<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Fiddler抓取雷电模拟器4.x</title>
      <link href="/2022/06/23/2022062300/"/>
      <url>/2022/06/23/2022062300/</url>
      
        <content type="html"><![CDATA[<h3 id="Fiddler抓取雷电模拟器4-x"><a href="#Fiddler抓取雷电模拟器4-x" class="headerlink" title="Fiddler抓取雷电模拟器4.x"></a>Fiddler抓取雷电模拟器4.x</h3><h4 id="本文原由"><a href="#本文原由" class="headerlink" title="本文原由"></a>本文原由</h4><p>之前使用<code>Fiddler</code>抓取雷电模拟器<code>3.x</code>版本，是可以按照常规做法，在无线网那里改为手动设置，填入本机<code>ip</code>和抓取端口(一般为<code>8888</code>)就能抓取到了，但是毕竟<code>3.x</code>的雷电安卓版本太低了，最近遇到些个别<code>APP</code>直接闪退，所以索性换成了<code>4.x</code>的雷电，但是官方好像并没有优化好，按照<code>3.x</code>的逻辑已经没有办法抓包了，查阅了很多帖子，进行过多次尝试后终于成功了，为了避免以后少走弯路，所以将抓包配置步骤记录如下</p><h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><p>雷电<code>4.x</code>使用的是安卓<code>7</code>，对用户自行安装的证书不再信任，所以造成无法抓包</p><p>因此解决方式就是将证书制作成为系统证书</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>1、打开<code>Fiddler</code>，依次打开工具类中的<code>工具</code>，选择<code>选项</code>，然后找到<code>https</code>标签页，点击右侧的<code>操作</code>按钮，选择<code>导出根证书到桌面</code></p><p><img src="/img/post/2022062300/01.png"></p><p>2、使用<code>win+R</code>打开运行窗口，输入<code>cmd</code>打开提示符窗口，输入如下命令进入桌面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Desktop</span><br></pre></td></tr></table></figure><p>3、找到桌面导出的证书<code>FiddlerRoot.cer</code>，使用如下命令将证书转换为<code>.pem</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform DER -<span class="keyword">in</span> FiddlerRoot.cer -out fiddler.pem</span><br></pre></td></tr></table></figure><p>4、解析出证书的<code>hash</code>值(因为安卓证书文件名是根据<code>hash</code>值存的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform PEM -subject_hash_old -<span class="keyword">in</span> fiddler.pem | head -1</span><br></pre></td></tr></table></figure><p>5、将该<code>hash</code>值作为新的文件名以<code>.0</code>结尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat fiddler.pem &gt; 269953fb.0</span><br></pre></td></tr></table></figure><p>6、经过操作，我们可以看到桌面生成了这么几个文件</p><p><img src="/img/post/2022062300/02.png"></p><p>7、打开雷电模拟器，依次点击右侧工具栏中<code>更多</code>-<code>共享文件</code></p><p><img src="/img/post/2022062300/03.png"></p><p><img src="/img/post/2022062300/04.png"></p><p>8、我们首先选择左侧，打开电脑文件夹，将刚刚生成的<code>.0</code>结尾的文件复制到该目录</p><p><img src="/img/post/2022062300/05.png"></p><p>9、然后我们点击右侧打开安卓文件夹，勾选该文件，然后依次点击父目录，找到如下目录，将此文件移动到该目录中，这里需要<code>ROOT</code>权限操作，因为我使用的是精简去广告版，所以自带<code>ROOT</code>权限，百度搜索相关关键字即可找到资源，这里就不分享了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/system/etc/security/cacerts</span><br></pre></td></tr></table></figure><p><img src="/img/post/2022062300/06.png"></p><p><img src="/img/post/2022062300/07.png"></p><p>10、移动成功后，我们在当前目录选中刚刚的文件，点击右上角，对属性进行修改如下，然后点击雷电模拟器右上角<code>X</code>，选择重新启动</p><p><img src="/img/post/2022062300/08.png"></p><p><img src="/img/post/2022062300/09.png"></p><p>11、重启成功后，依次点击<code>设置</code>-<code>安全</code>-<code>信任的凭据</code>中，找到如下凭据，即安装证书成功</p><p><img src="/img/post/2022062300/10.png"></p><p>12、此时我们点击桌面生成的雷电模拟器图标右键，选择<code>打开文件所在的位置</code>，此时在该目录中我们在地址栏输入<code>cmd</code>，按回车进入当前目录的命令提示符界面</p><p><img src="/img/post/2022062300/11.png"></p><p>13、先使用如下命令，看能否检测到雷电模拟器设备，如果无法检测到，则重启雷电模拟器在尝试此命令，搜索到如下图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p><img src="/img/post/2022062300/12.png"></p><p>14、搜索到设备后，执行如下命令，给雷电模拟器设置全局代理，端口可在<code>Fiddler</code>设置界面中找到，修改后需要重启<code>Fiddler</code>才会生效，默认端口为<code>8888</code>；本机<code>ip</code>可是在命令提示符中输入<code>ipconfig</code>找到</p><p><img src="/img/post/2022062300/13.png"></p><p><img src="/img/post/2022062300/14.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb.exe shell settings put global http_proxy 本机ip:fiddler端口</span><br></pre></td></tr></table></figure><p>我本地ip为<code>172.18.0.188</code>，端口为<code>8888</code>，所以我执行的命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb.exe shell settings put global http_proxy 172.18.0.188:8888</span><br></pre></td></tr></table></figure><p><img src="/img/post/2022062300/15.png"></p><p>15、配置完成后，重启雷电模拟器后，即可正常进行抓包了</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL通过binlog恢复误删数据</title>
      <link href="/2022/01/22/2022012200/"/>
      <url>/2022/01/22/2022012200/</url>
      
        <content type="html"><![CDATA[<h3 id="docker安装mysql并开启binlog"><a href="#docker安装mysql并开启binlog" class="headerlink" title="docker安装mysql并开启binlog"></a>docker安装mysql并开启binlog</h3><p>1、在<code>linux</code>中对应的挂载目录，我这里使用的是<code>/mydata/mysql/my.cnf</code>，创建mysql配置文件<code>my.cnf</code>，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">!includedir /etc/mysql/conf.d/</span></span><br><span class="line"><span class="comment">!includedir /etc/mysql/mysql.conf.d/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">mysql-bin</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure><p>2、执行docker命令直接进行安装，看到如下提示说明安装成功了</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -di -p 3306:3306 --name mysql -v /mydata/mysql/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/my.cnf:/etc/mysql/my.cnf --privileged=<span class="literal">true</span> --restart=always -e TZ=Asia/Shanghai -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7 --lower_case_table_names=1</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/2022012200/01.png"></p><p>3、使用<code>docker ps -a</code>查看mysql的运行状况</p><p><img src="/img/post/2022012200/02.png"></p><p>4、查看当前的<code>log_bin</code>的开启情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;LOG_BIN%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/img/post/2022012200/03.png"></p><p>如果未开启状态，则需要在<code>my.cnf</code>中添加如下配置并重启mysql服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">mysql-bin</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure><p>5、同样如果某些表不需要进行记录，也可以在配置文件中进行设置忽略</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">binlog-ignore-db</span> = <span class="string">test</span></span><br><span class="line"><span class="meta">replicate-ignore-db</span> = <span class="string">test</span></span><br></pre></td></tr></table></figure><h3 id="如何通过binlog恢复数据"><a href="#如何通过binlog恢复数据" class="headerlink" title="如何通过binlog恢复数据"></a>如何通过binlog恢复数据</h3><p>首先查看当前mysql时间是否与服务器时间一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select now(); </span><br></pre></td></tr></table></figure><p>如果时间不一致，会影响一会我们排查具体操作的时间范围，可以使用如下命令修复，修复后需要重启mysql服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /usr/share/zoneinfo/Asia/Shanghai 容器id:/etc/localtime</span><br></pre></td></tr></table></figure><p>然后进入docker容器中<code>lob_bin_basename</code>的位置，我这里是<code>/var/lib/mysql/</code>，然后找前缀为<code>mysql-bin</code>的日志文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器名称 bash</span><br><span class="line"><span class="built_in">cd</span> /var/lib/mysql</span><br></pre></td></tr></table></figure><p>然后通过<code>mysqlbinlog</code>导出要查询的日志到<code>tmp.log</code>文件，这里需要根据大概的操作时间按点来进行筛选</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog --no-defaults -v --base64-output=DECODE-ROWS --start-datetime=<span class="string">&#x27;2022-01-22 00:00:00&#x27;</span> --stop-datetime=<span class="string">&#x27;2022-01-22 23:00:00&#x27;</span> mysql-bin.000003 &gt; tmp.log</span><br></pre></td></tr></table></figure><p>到这里就可以根据表名或者其他关键字进行查找恢复了</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git快速入门</title>
      <link href="/2021/11/08/2021110800/"/>
      <url>/2021/11/08/2021110800/</url>
      
        <content type="html"><![CDATA[<h3 id="Git快速入门"><a href="#Git快速入门" class="headerlink" title="Git快速入门"></a>Git快速入门</h3><h4 id="01、Git下载以及安装"><a href="#01、Git下载以及安装" class="headerlink" title="01、Git下载以及安装"></a>01、Git下载以及安装</h4><blockquote><p>下载地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p></blockquote><p>这里我选择的是<code>64位</code>的免安装版</p><p><img src="/img/post/2021110800/001.png"></p><p>下载完成后是一个是一个自解压程序，我们可以使用<code>7-zip</code>将它解压到我们喜欢的地方，因为我们使用的是免安装版本，所以需要我们手动在系统环境变量的<code>PATH</code>变量中增加如下设置即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如这里我是将Git解压到E:\Software 请自行替换自己解压的位置</span></span><br><span class="line"><span class="string">E:\Software\Git\bin</span></span><br><span class="line"><span class="string">E:\Software\Git\usr\bin</span></span><br><span class="line"><span class="string">E:\Software\Git\mingw64\bin</span></span><br></pre></td></tr></table></figure><p>到这里我们可以使用<code>cmd</code>来进行确认是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/002.png"></p><p>如果看到对应的<code>git</code>版本号信息的话，就说明我们的环境已经准备完成了~</p><h4 id="02、Git的本地结构"><a href="#02、Git的本地结构" class="headerlink" title="02、Git的本地结构"></a>02、Git的本地结构</h4><p>一共分为三个部分：工作区、暂存区、本地库</p><ul><li>工作区：我们写的代码以及相关文件都会被存在这里<ul><li>通过<code>git add</code>可以提交到暂存区</li></ul></li><li>暂存区：我们想要提交但是还没有提交的文件在这里<ul><li>可以通过<code>git commit</code>继续提交到本地库</li><li>可以通过<code>git reset</code>撤回到本地工作区</li></ul></li><li>本地库：存储所有真正的文件历史版本相关数据信息</li></ul><h4 id="03、Git使用场景"><a href="#03、Git使用场景" class="headerlink" title="03、Git使用场景"></a>03、Git使用场景</h4><p>我们已经有了<code>本地库</code>，同样需要一个<code>代码托管中心</code>来帮我们维护<code>远程库</code></p><p>本地库与远程库的交互，分为如下两个场景：</p><ul><li><p>团队内部协作</p><ul><li>由项目经理创建本地库，然后将本地库代码<code>push</code>推送到远程库</li><li>开发人员将远程库的代码<code>clone</code>到自己的本地库</li><li>代码开发完成，开发人员将本地库代码<code>push</code>推送到远程库</li><li>项目经理在开发人员提交后，将新的远程库代码<code>pull</code>拉取到本地</li></ul></li><li><p>跨团队协作</p><ul><li>由A项目经理创建本地库，然后将本地库代码<code>push</code>推送到A远程库</li><li>由B项目经理将A的远程库进行<code>fork</code>复制一个新的B远程库</li><li>A和B的开发人员按照团队内部协作方式各自进行开发</li><li>B团队需要将代码发起拉取申请<code>pull reqeust</code>操作</li><li>A团队看到申请后，觉得B团队提交的代码没有问题，进行<code>merge</code>合并</li><li>合并完成后即完成了A的远程库和B的远程库进行同步的操作</li></ul></li></ul><blockquote><p>下面通过考试的场景帮助大家更好的理解这个过程</p></blockquote><ul><li>考试时你做的试卷相当于仓库</li><li>做错的题目相当于bug</li><li>老师把你的试卷拿过来相当于<code>fork</code>操作</li><li>老师在你的试卷进行批改相当于<code>git commit</code></li><li>改好的试卷还给你，相当于申请<code>pull request</code></li><li>你按照老师的批改把做错的题目进行了改正相当于<code>merge</code></li></ul><blockquote><p>当你想更正别人仓库里的错误时，要走一个流程：</p><ol><li>先<code>fork</code>别人的仓库，相当于拷贝一份，相信我，不会有人直接让你改修原仓库的</li><li>将代码<code>clone</code>到本地分支，做一些<code>bug</code>的修改</li><li>发起<code>pull request</code>给原仓库，让他看到你修改的<code>bug</code></li><li>原仓库<code>review</code>这个<code>bug</code>，如果是正确的话就会<code>merge</code>到他自己的项目中</li></ol></blockquote><p>常见的托管中心种类分为局域网以及外网</p><ul><li><p>局域网可以自行搭建<code>GitLab</code></p></li><li><p>外网可以使用<code>Github</code>或者<code>Gitee</code></p></li></ul><h4 id="04、Git创建本地仓库"><a href="#04、Git创建本地仓库" class="headerlink" title="04、Git创建本地仓库"></a>04、Git创建本地仓库</h4><p>接下来我们就要开始创建本地仓库了，首先随便创建一个文件夹，并进行初始化操作</p><p><img src="/img/post/2021110800/003.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为我使用的是windows自带的cmd 所以需要先进入bash控制台</span></span><br><span class="line">bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹 这步也可以在系统手动创建</span></span><br><span class="line">mkdir gitdemo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入文件夹</span></span><br><span class="line"><span class="built_in">cd</span> gitdemo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个本地库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>经过以上几个步骤后，我们就可以在<code>gitdemo</code>文件夹内看到一个隐藏文件夹，其中会包含如下文件内容，这些文件内容请不要随意修改，可能会导致<code>git</code>无法正确识别到</p><p><img src="/img/post/2021110800/004.png"></p><h4 id="05、Git设置全局签名"><a href="#05、Git设置全局签名" class="headerlink" title="05、Git设置全局签名"></a>05、Git设置全局签名</h4><p>设置全局签名，有利于将来让别人知道代码是谁提交的，这一步对于甩锅或者追责非常重要喔~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置名称 可以随意写 非托管中心账号</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Levi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置邮箱 可以随意写 非托管中心邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;15011507338@163.com&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/005.png"></p><h4 id="06、Git添加到暂存区"><a href="#06、Git添加到暂存区" class="headerlink" title="06、Git添加到暂存区"></a>06、Git添加到暂存区</h4><p>我们在<code>gitdemo</code>文件夹中随便创建一个文件当作我们编写的文件，并将它添加到暂存区</p><p><img src="/img/post/2021110800/006.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将demo.txt添加到暂存区</span></span><br><span class="line">git add demo.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加全部文件则使用.</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/007.png"></p><h4 id="07、Git提交文件"><a href="#07、Git提交文件" class="headerlink" title="07、Git提交文件"></a>07、Git提交文件</h4><p><img src="/img/post/2021110800/008.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交demo.txt并添加注释&quot;第一次提交&quot;</span></span><br><span class="line">git commit -m <span class="string">&quot;第一次提交&quot;</span> demo.txt</span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ul><li>不放在<code>git</code>本地仓库的文件是不会被<code>git</code>进行管理的</li><li>即使放在<code>git</code>本地仓库的文件，也要通过<code>git add</code>和<code>git commit</code>才会被<code>git</code>管理</li></ul><h4 id="08、Git查看文件状态"><a href="#08、Git查看文件状态" class="headerlink" title="08、Git查看文件状态"></a>08、Git查看文件状态</h4><p>我们可以随时使用<code>git status</code>对本地仓库内的文件的状态进行查看</p><p><img src="/img/post/2021110800/009.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下提示代表暂存区是空的 没有需要提交的文件</span></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>这时如果我们在本地仓库内新建一个<code>demo2.txt</code>的文件，再次运行<code>git status</code></p><p><img src="/img/post/2021110800/010.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下提示代表 有一个demo2.txt文件没有被追踪管理 并提示可以使用git add进行添加操作</span></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        demo2.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure><p>然后我们使用<code>git add</code>将<code>demo2.txt</code>添加到暂存区中，再次运行<code>git status</code></p><p><img src="/img/post/2021110800/011.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件添加到暂存区</span></span><br><span class="line">Levi@DESKTOP-STVLE5R MINGW64 /d/gitdemo (master)</span><br><span class="line">$ git add demo2.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下提示代表 有一个demo2.txt文件可以进行提交操作</span></span><br><span class="line">Levi@DESKTOP-STVLE5R MINGW64 /d/gitdemo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   demo2.txt</span><br></pre></td></tr></table></figure><p>然后我们使用<code>git commit</code>将<code>demo2.txt</code>进行提交，再次运行<code>git status</code></p><p><img src="/img/post/2021110800/012.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将demo2.txt进行提交操作</span></span><br><span class="line">Levi@DESKTOP-STVLE5R MINGW64 /d/gitdemo (master)</span><br><span class="line">$ git commit -m <span class="string">&quot;第二次提交&quot;</span> demo2.txt</span><br><span class="line">[master 3f754d0] 第二次提交</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 demo2.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为暂存区已经无待提交的文件 所以提示和最开始一样</span></span><br><span class="line">Levi@DESKTOP-STVLE5R MINGW64 /d/gitdemo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><h4 id="09、Git查看提交日志"><a href="#09、Git查看提交日志" class="headerlink" title="09、Git查看提交日志"></a>09、Git查看提交日志</h4><p>我们可以使用<code>git log</code>来对我们历史提交过的文件日志进行查看</p><p><img src="/img/post/2021110800/013.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>在<code>commit</code>后面的一长串数字 可以理解为当前操作记录的索引值 可根据它进行查找</p><p><img src="/img/post/2021110800/014.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> b55262a24db3bf2a244a5d63c4af22e2b7344f48</span><br></pre></td></tr></table></figure><p>如果在日志很多的情况下，默认会显示分页信息，可以使用<code>空格</code>换到下一页，使用<code>b</code>换到上一页，如果看到结尾显示<code>END</code>则代表已经到尾页了，使用<code>q</code>可以结束查看日志，回到正常命令模式</p><p><img src="/img/post/2021110800/015.png"></p><p><img src="/img/post/2021110800/016.png"></p><p>但是如果我们的日志很多，这种方式显示起来就不是那么美观，我们可以使用一种更简洁的方式来打印我们需要的日志信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示完整索引号</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/017.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示简短索引号</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/018.png"></p><p>我们还可以使用<code>git reflog</code>查看日志信息，其中<code>HEAD@&#123;数字&#125;</code>后面的数字代表需要几步才能回退到当前版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/019.png"></p><h4 id="10、Git前进或回退历史版本"><a href="#10、Git前进或回退历史版本" class="headerlink" title="10、Git前进或回退历史版本"></a>10、Git前进或回退历史版本</h4><p>在上面查看日志的时候，我们可以看到每一次提交信息对应的<code>索引</code>信息，下面我们就可以使用<code>name.txt</code>文件来讲解<code>reset</code>命令的使用</p><p>前置准备条件：创建一个<code>name.txt</code>文件</p><ul><li>第一次编写<code>zhangsan</code>进行提交</li><li>第二次编写<code>lisi</code>进行提交</li><li>第三次编写<code>wangwu</code>进行提交</li></ul><p>然后我们使用<code>git reflog</code>查看日志信息</p><p><img src="/img/post/2021110800/020.png"></p><p>这个时候我们可以看到，当前指针的位置是在最后一次提交的<code>add wangwu</code>上，我们此时如果想回到<code>add zhangsan</code>版本，可以使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hard后面的索引值 可以在日志中进行查看</span></span><br><span class="line">git reset --hard a672d61</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/021.png"></p><p>这时我们打开<code>name.txt</code>会发下内容已经回滚到<code>zhangsan</code>版本了，但是如果这时候我们又想再次回到<code>wangwu</code>版本怎么办呢？还是同样命令，修改为<code>wangwu</code>对应的索引即可</p><p><img src="/img/post/2021110800/022.png"></p><p>这里我们使用了<code>--hard</code>参数，相关的还有一个参数是<code>--mixed</code>参数和<code>--soft</code>参数</p><ul><li>soft：重置<code>git commit</code>，即所有修改都回到暂存区中，可以再次进行<code>commit</code></li><li>mixed：重置<code>git commit</code>和<code>git add</code>，即所有修改都回到工作区中，可以再次<code>add</code></li><li>hard：重置<code>git commit</code>和<code>git add</code>和工作副本的修改，即未做任何修改，全部回滚</li></ul><h4 id="11、Git删除文件及找回"><a href="#11、Git删除文件及找回" class="headerlink" title="11、Git删除文件及找回"></a>11、Git删除文件及找回</h4><p>如果我们想把已经提交的文件进行删除，可以使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除本地仓库中的name.txt文件</span></span><br><span class="line">rm name.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件</span></span><br><span class="line">git add name.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交文件</span></span><br><span class="line">git commit -m <span class="string">&quot;delete name.txt&quot;</span> name.txt</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/023.png"></p><p>这里需要注意的是，如果误删了某个文件，删除操作并非真正的删除，只是将索引值指向了别处而已，可以使用上一节讲到的<code>reset</code>进行回滚到上一个版本索引，实现文件找回操作</p><h4 id="12、Git比对文件差异"><a href="#12、Git比对文件差异" class="headerlink" title="12、Git比对文件差异"></a>12、Git比对文件差异</h4><p>如果我们想要比较出自己修改了哪些文件，可以使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较某一个文件差异 例如name.txt 红色-代表删除行 绿色+代表增加行</span></span><br><span class="line">git diff name.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较所有文件的差异</span></span><br><span class="line">git diff</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/024.png"></p><p>需要注意的是，使用<code>diff</code>命令比较的是工作区和暂存区，如果我们想要跟历史的某个版本进行比对，可以直接在命令后追加索引即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6354a90为要比对版本的索引值 name.txt为要比对的文件</span></span><br><span class="line">git diff 6354a90 name.txt</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/025.png"></p><h4 id="13、Git查看分支"><a href="#13、Git查看分支" class="headerlink" title="13、Git查看分支"></a>13、Git查看分支</h4><p>什么是分支？</p><ul><li>在版本控制中，使用多条线同时推进多个任务，这里说的多条线，就是多个分支</li></ul><p>分支的好处？</p><ul><li>同时多个分支可以并行开发，互不耽误，提高开发效率</li><li>如果某个分支开发失败，可以直接删除，不影响主分支</li></ul><p>我们可以使用<code>git branch</code>来查看都有哪些分支，✳代表当前在哪个分支开发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有分支以及最新版本索引</span></span><br><span class="line">git branch -v</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/026.png"></p><h4 id="14、Git创建分支"><a href="#14、Git创建分支" class="headerlink" title="14、Git创建分支"></a>14、Git创建分支</h4><p>我们可以使用<code>git branch 分支名称</code>来创建一个新分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个名字叫prod的新分支</span></span><br><span class="line">git branch prod</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/027.png"></p><h4 id="15、Git切换分支"><a href="#15、Git切换分支" class="headerlink" title="15、Git切换分支"></a>15、Git切换分支</h4><p>我们可以使用<code>git checkout 分支名称</code>来切换到另一个分支上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到prod分支</span></span><br><span class="line">git checkout prod</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/028.png"></p><h4 id="16、Git解决冲突"><a href="#16、Git解决冲突" class="headerlink" title="16、Git解决冲突"></a>16、Git解决冲突</h4><p>冲突是比较常见的问题，下面说一下如何解决冲突问题</p><p>前置环境准备：</p><ul><li><p>新建一个分支prod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建prod分支</span></span><br><span class="line">git branch prod</span><br></pre></td></tr></table></figure></li><li><p>切换到prod分支修改<code>name.txt</code>，删除全部内容并重新写入<code>aaaa</code>提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到prod分支</span></span><br><span class="line">git checkout prod</span><br><span class="line"><span class="comment"># 修改name.txt 写入aaaa 然后添加到缓存区</span></span><br><span class="line">git add name.txt</span><br><span class="line"><span class="comment"># 提交name.txt</span></span><br><span class="line">git commit -m <span class="string">&quot;add aaaa&quot;</span> name.txt</span><br></pre></td></tr></table></figure></li><li><p>切换回master分支修改<code>name.txt</code>，删除全部内容并重新写入<code>bbbb</code>提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 修改name.txt 写入bbbb 然后添加到缓存区</span></span><br><span class="line">git add name.txt</span><br><span class="line"><span class="comment"># 提交name.txt</span></span><br><span class="line">git commit -m <span class="string">&quot;add bbbb&quot;</span> name.txt</span><br></pre></td></tr></table></figure></li></ul><p>首先查看目前分支版本情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支版本情况</span></span><br><span class="line">git branch -v</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/029.png"></p><p>可以看到目前两个分支索引已经不再同一个位置了，下面开始合并<code>prod</code>分支内容到<code>master</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并prod到master 合并到哪个分支就要先切换到哪个分支</span></span><br><span class="line">git merge prod</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/030.png"></p><p>从提示中我们可以看到，自动合并失败，需要我们手动去解决错误然后进行<code>commit</code>提交</p><p><img src="/img/post/2021110800/031.png"></p><p>打开文件后，我们可以看到出现了很多<code>&lt;&lt;&lt;&lt;</code>、<code>====</code>和<code>&gt;&gt;&gt;&gt;</code>符号</p><ul><li><p>&lt;&lt;&lt;&lt;到====之间为<code>master</code>中的内容</p></li><li><p>&lt;&lt;&lt;&lt;到====之间为<code>prod</code>中的内容</p></li></ul><p>我们需要做的就是，找到两个分支的开发人员进行确认分支之间的不同，并对文件进行修改，最后去掉所有的符号再次提交</p><p><img src="/img/post/2021110800/032.png"></p><p>如果这时候你使用以前的方式进行提交，会看到如下的报错，并且可以看到<code>master</code>后面的状态显示为<code>MERGING</code>显示，表示目前<code>master</code>分支依旧处于冲突状态</p><p><img src="/img/post/2021110800/033.png"></p><p>这里我们提交的时候不能在最后写上具体的某个文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交冲突</span></span><br><span class="line">git commit -m <span class="string">&quot;fix merge&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/034.png"></p><p>这时我们已经看不到<code>master|MERGING</code>了，说明我们已经成功将<code>prod</code>合并到<code>master</code>了</p><h4 id="17、Git远程地址别名"><a href="#17、Git远程地址别名" class="headerlink" title="17、Git远程地址别名"></a>17、Git远程地址别名</h4><p>我们的代码都是要提交到远程地址的，但是每次都要输入地址比较麻烦，这里我们可以给远程地址起一个别名方便日后使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否有别名</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加demo为别名 可以随便起 最后为你要提交的远程地址</span></span><br><span class="line">git remote add demo https://github.com/tomatoLevi/demo.git</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/035.png"></p><h4 id="18、Git推送本地到远程"><a href="#18、Git推送本地到远程" class="headerlink" title="18、Git推送本地到远程"></a>18、Git推送本地到远程</h4><p>我们可以使用<code>git push</code>将本地仓库的代码推送到远程仓库中，这里可能会弹出账号密码输入框，按照你选择的代码托管平台进行输入即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地master分支的代码推送到demo别名的地址</span></span><br><span class="line">git push demo master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然也可以直接写地址</span></span><br><span class="line">git push https://github.com/tomatoLevi/demo.git master</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/036.png"></p><p>然后我们打开<code>github</code>，可以看到文件已经推送过来了，并且自动创建了<code>master</code>分支</p><p><img src="/img/post/2021110800/037.png"></p><p>如果上文中我们使用<code>prod</code>分支的话，会怎么样呢？当然是在远端新创建一个<code>prod</code>分支啦~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地prod分支的代码推送到demo别名的地址</span></span><br><span class="line">git push demo prod</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/038.png"></p><h4 id="19、Git克隆远程到本地"><a href="#19、Git克隆远程到本地" class="headerlink" title="19、Git克隆远程到本地"></a>19、Git克隆远程到本地</h4><p>代码已经发布到远程仓库了，现在有一个新入职的开发人员需要拉取代码进行开发，这时候他就需要用到<code>git clone</code>命令从远程拉取代码到本地了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建mygit文件夹用于存放远端拉取的代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/tomatoLevi/demo.git</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/039.png"></p><p>这时候我们可以看到，在<code>mygit</code>文件夹内，已经创建好了一个<code>demo</code>文件夹，并且其中包含了所有远程仓库中的文件信息以及一个隐藏的<code>.git</code>文件夹</p><p><img src="/img/post/2021110800/040.png"></p><p>可以看到<code>clone</code>克隆操作已经自动帮我们完成了三件事情</p><ul><li>执行<code>git init</code>初始化操作</li><li>将远端代码完全复制到本地仓库中</li><li>自动帮我们给地址起了一个<code>origin</code>别名</li></ul><p><img src="/img/post/2021110800/041.png"></p><h4 id="20、Git更新远程到本地"><a href="#20、Git更新远程到本地" class="headerlink" title="20、Git更新远程到本地"></a>20、Git更新远程到本地</h4><p>使用<code>git pull</code>进行拉取远端仓库代码到本地仓库的操作，等同于使用<code>fetch</code>和<code>merge</code>两个操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新别名为origin的远程master分支代码到本地</span></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021110800/042.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旧版eclipse问题总结</title>
      <link href="/2021/03/31/2021033100/"/>
      <url>/2021/03/31/2021033100/</url>
      
        <content type="html"><![CDATA[<h4 id="旧版eclipse问题总结"><a href="#旧版eclipse问题总结" class="headerlink" title="旧版eclipse问题总结"></a>旧版<code>eclipse</code>问题总结</h4><blockquote><p>随着<code>Eclipse</code>越来越大，<code>IDEA</code>越来越好用，所以我的<code>Eclipse</code>一直使用的<code>Neon.3 Release (4.6.3)</code>这个版本，因为喜欢这个启动图标以及名字，也因为他可能是第一个支持<code>JDK8</code>的版本，足够我用来开发一些老项目使用也足够我应付一些新项目了，但是毕竟有点老，所以很多时候会遇到一些问题，下面就用来记录一些常见的问题以及解决方案</p></blockquote><p>1、创建<code>SpringBoot</code>2.3.x或更高版本项目后，在<code>pom.xml</code>中第一行提示<code>Unknown error</code></p><p>解决办法：</p><ul><li><p>第一种是将<code>SpringBoot</code>版本调回<code>2.2.x</code>或更低版本即可，但是如果项目必须要用新版的，难道就没办法解决了吗？所以不推荐使用这种办法</p></li><li><p>第二种可以直接修改<code>maven-jar-plugin.version</code>的版本，我在maven的<code>settings.xml</code>中将原来的<code>3.x</code>修改为指定<code>2.6</code>版本的依赖，可能是旧版<code>eclipse</code>不支持高版本也可能是高版本的依赖在阿里仓库中无法下载造成的</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven-jar-plugin.version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">maven-jar-plugin.version</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再项目上<code>update</code>即可发现项目的错误不见了，可以愉快的使用<code>2.4.x</code>版本的<code>SpringBoot</code>了</p><p>2、因为新版的<code>IDEA</code>跟<code>Dbeaver</code>都必须要求是<code>JDK11</code>环境才能使用，但是环境变量只能配置一份，这个时候你打开旧版eclipse是会报错无法启动的</p><p>解决办法：</p><p>在<code>eclipse.ini</code>中<code>startup</code>配置前面增加如下配置即可，路径为你的<code>JDK8</code>版本的<code>bin</code>目录位置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-vm</span><br><span class="line">E:/JDK8/bin</span><br><span class="line">-startup</span><br><span class="line">plugins/org.eclipse.equinox.launcher_1.3.201.v20161025-1711.jar</span><br></pre></td></tr></table></figure><p>再次启动你会发现已经可以正常启动了</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB学习笔记</title>
      <link href="/2021/01/10/2021011001/"/>
      <url>/2021/01/10/2021011001/</url>
      
        <content type="html"><![CDATA[<h3 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h3><blockquote><p><code>MongoDB</code>是为快速开发互联网Web应用而设计的数据库系统</p><p><code>MongoDB</code>的设计目标是极简、灵活，作为Web应用栈的一部分</p><p><code>MongoDB</code>的数据模型是面向文档的，所谓文档是一种类似于<code>JSON</code>的结构</p><p>简单理解<code>MongoDB</code>这个数据库中存的是各种各样的<code>BSON(二进制JSON)</code></p></blockquote><h4 id="三个概念"><a href="#三个概念" class="headerlink" title="三个概念"></a>三个概念</h4><ul><li>数据库(<code>database</code>)：数据库是一个仓库，在仓库中可以存放集合</li><li>集合(<code>collection</code>)：集合类似于数组，在集合中可以存放文档</li><li>文档(<code>document</code>)：文档数据库中的最小单位，我们可以存储和操作的内容都是文档</li></ul><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><blockquote><p>下载地址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p></blockquote><p>1、打开首页，我们可以在右侧下载当前最新版本的<code>MongoDB</code>，选择自己需要的操作系统以及安装包的类型，个人有软件洁癖，所以这里选择了免安装版使用</p><p><img src="/img/post/2021011001/001.png"></p><p>2、下载完zip版本解压后，放到自定义目录下，红框内无用文件可删除，如图所示：</p><p><img src="/img/post/2021011001/002.png"></p><p>3、新建<code>data</code>目录用于存放数据，新建配置文件<code>mongodb.conf</code>，如图示：</p><p><img src="/img/post/2021011001/003.png"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口号，默认为27017</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">27017</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据库存放路径 换成你自己的目录</span></span><br><span class="line"><span class="attr">dbpath</span>=<span class="string">E:\Learn\Software\MongoDB\data</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 日志存放路径 换成你自己的目录</span></span><br><span class="line"><span class="attr">logpath</span>=<span class="string">E:\Learn\Software\MongoDB\data\mongodb.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否追加日志</span></span><br><span class="line"><span class="attr">logappend</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否启用日志，默认启用</span></span><br><span class="line"><span class="attr">journal</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否过滤无用日志信息</span></span><br><span class="line"><span class="attr">quiet</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>4、配置<code>MongoDB</code>的<code>bin</code>目录到<code>path</code>环境变量内，以后可在任意目录使用<code>mongo</code>命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">E</span>:<span class="string">\Learn\Software\MongoDB\bin</span></span><br></pre></td></tr></table></figure><p>5、管理员运行CMD，启动<code>mongodb</code>，同时将<code>MongoDB</code>注册为<code>Windows服务</code>，没有任何提示说明服务注册成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config &quot;E:\Learn\Software\MongoDB\mongodb.conf&quot; --install --serviceName &quot;MongoDB&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/post/2021011001/004.png"></p><p>6、此时可以通过<code>win + r</code>输入<code>services.msc</code>打开服务列表，生成的<code>MongoDB</code>服务，可以设置为开机自启，之后不用每次都手动启动<code>MongoDB</code></p><p><img src="/img/post/2021011001/005.png"></p><p>7、启动服务后，我们可以直接在CMD中输入<code>mongo</code>登录了，如图所示：</p><p><img src="/img/post/2021011001/006.png"></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><blockquote><p>数据库(<code>database</code>) =&gt; 集合(<code>collection</code>) =&gt; 文档(<code>document</code>)</p><p>在<code>MongoDB</code>中，<code>数据库</code>和<code>集合</code>都不需要手动创建</p><p>当我们创建<code>文档</code>时，如果<code>文档</code>所在的<code>集合</code>或<code>数据库</code>不存在，则会自动创建</p></blockquote><h4 id="查询相关"><a href="#查询相关" class="headerlink" title="查询相关"></a>查询相关</h4><h5 id="1、显示所有数据库"><a href="#1、显示所有数据库" class="headerlink" title="1、显示所有数据库"></a>1、显示所有数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs 或者 show databases</span><br></pre></td></tr></table></figure><h5 id="2、使用某数据库"><a href="#2、使用某数据库" class="headerlink" title="2、使用某数据库"></a>2、使用某数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意 VSCode中 可能需要使用use(<span class="string">&quot;数据库名&quot;</span>)</span></span><br><span class="line">use 数据库名</span><br><span class="line"></span><br><span class="line">例如：进入hello数据库</span><br><span class="line">use hello</span><br></pre></td></tr></table></figure><h5 id="3、查看当前所在数据库"><a href="#3、查看当前所在数据库" class="headerlink" title="3、查看当前所在数据库"></a>3、查看当前所在数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure><h5 id="4、查询数据库中所有集合"><a href="#4、查询数据库中所有集合" class="headerlink" title="4、查询数据库中所有集合"></a>4、查询数据库中所有集合</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure><h5 id="5、查看某集合中的所有文档"><a href="#5、查看某集合中的所有文档" class="headerlink" title="5、查看某集合中的所有文档"></a>5、查看某集合中的所有文档</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果是find() 省略查询对象即查询全部</span></span><br><span class="line">db.集合名.find(&#123;&#125;) 或 db.集合名.find()</span><br><span class="line"></span><br><span class="line">例如：查询student集合中所有的文档</span><br><span class="line">db.student.find()</span><br></pre></td></tr></table></figure><h5 id="6、根据条件查询某集合中的文档"><a href="#6、根据条件查询某集合中的文档" class="headerlink" title="6、根据条件查询某集合中的文档"></a>6、根据条件查询某集合中的文档</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find(&#123;查询条件对象&#125;)</span><br><span class="line"></span><br><span class="line">例如：查询student集合中name为Levi、age为20的文档</span><br><span class="line">db.student.find(&#123;name:&quot;Levi&quot;,age:20&#125;)</span><br></pre></td></tr></table></figure><h5 id="7、根据条件查询某集合中的第一个文档"><a href="#7、根据条件查询某集合中的第一个文档" class="headerlink" title="7、根据条件查询某集合中的第一个文档"></a>7、根据条件查询某集合中的第一个文档</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.findOne(&#123;查询条件对象&#125;)</span><br><span class="line"></span><br><span class="line">例如：查询student集合中age为20的第一个文档</span><br><span class="line">db.student.findOne(&#123;age:20&#125;)</span><br></pre></td></tr></table></figure><h5 id="8、根据条件查询某集合中的第一个文档的某个属性值"><a href="#8、根据条件查询某集合中的第一个文档的某个属性值" class="headerlink" title="8、根据条件查询某集合中的第一个文档的某个属性值"></a>8、根据条件查询某集合中的第一个文档的某个属性值</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 因为find方法返回的是数组 而findOne返回的是对象 所以find不适用该方法 可加[索引值]使用</span></span><br><span class="line">db.集合名.findOne(&#123;查询条件对象&#125;).属性名</span><br><span class="line"></span><br><span class="line">例如：查询student集合中age为20的第一个文档的name属性值</span><br><span class="line">db.student.findOne(&#123;age:20&#125;).name</span><br></pre></td></tr></table></figure><h5 id="9、查询结果的数量"><a href="#9、查询结果的数量" class="headerlink" title="9、查询结果的数量"></a>9、查询结果的数量</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find().count() 或 db.集合名.find().length()</span><br><span class="line"></span><br><span class="line">例如：查询student集合中的文档数量</span><br><span class="line">db.student.find().count()</span><br></pre></td></tr></table></figure><h5 id="10、查询内嵌文档"><a href="#10、查询内嵌文档" class="headerlink" title="10、查询内嵌文档"></a>10、查询内嵌文档</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 属性名必须加引号 单引号双引号均可</span></span><br><span class="line">db.集合名.find(&#123;&quot;属性名1.属性名2&quot;:&quot;属性名2值&quot;&#125;)</span><br><span class="line"></span><br><span class="line">例如：现有集合person如下</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_id&quot;: &quot;5ffaba06c157ae635cc1238d&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;tangseng&quot;,</span><br><span class="line">  &quot;student&quot;: &#123;</span><br><span class="line">    &quot;fname&quot;: &quot;sunwukong&quot;,</span><br><span class="line">    &quot;age&quot;: 12</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">要求查询出学生有sunwukong的记录</span><br><span class="line">db.person.find(&#123;&quot;student.fname&quot;:&quot;sunwukong&quot;&#125;)</span><br></pre></td></tr></table></figure><h5 id="11、查询操作符"><a href="#11、查询操作符" class="headerlink" title="11、查询操作符"></a>11、查询操作符</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询操作符大于</span></span><br><span class="line">db.集合名.find(&#123;属性名:&#123;$gt:数字&#125;&#125;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询操作符大于等于</span></span><br><span class="line">db.集合名.find(&#123;属性名:&#123;$gte:数字&#125;&#125;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询操作符小于</span></span><br><span class="line">db.集合名.find(&#123;属性名:&#123;$lt:数字&#125;&#125;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询操作符小于等于</span></span><br><span class="line">db.集合名.find(&#123;属性名:&#123;$lte:数字&#125;&#125;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询操作符不等于</span></span><br><span class="line">db.集合名.find(&#123;属性名:&#123;$ne:数字&#125;&#125;)</span><br></pre></td></tr></table></figure><h5 id="12、查询前N条数据"><a href="#12、查询前N条数据" class="headerlink" title="12、查询前N条数据"></a>12、查询前N条数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find().limit(n)</span><br><span class="line"></span><br><span class="line">例如：查询student集合前10条数据</span><br><span class="line">db.student.find().limit(10)</span><br></pre></td></tr></table></figure><h5 id="13、跳过前N条数据"><a href="#13、跳过前N条数据" class="headerlink" title="13、跳过前N条数据"></a>13、跳过前N条数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find().skip(n)</span><br><span class="line"></span><br><span class="line">例如：查询student集合第11条开始的数据</span><br><span class="line">db.student.find().skip(10)</span><br></pre></td></tr></table></figure><h5 id="14、分页查询"><a href="#14、分页查询" class="headerlink" title="14、分页查询"></a>14、分页查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find().skip((pageNum-1)*pageSize).limit(pageSize)</span><br><span class="line"></span><br><span class="line">例如：分页查询 pageSize为10 查询pageNum为2的文档记录</span><br><span class="line">db.student.find().skip(10).limit(10)</span><br></pre></td></tr></table></figure><h5 id="15、排序查询"><a href="#15、排序查询" class="headerlink" title="15、排序查询"></a>15、排序查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 正序排序</span></span><br><span class="line">db.集合名.find().sort(&#123;属性名:1&#125;)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 倒序排序</span></span><br><span class="line">db.集合名.find().sort(&#123;属性名:-1&#125;)</span><br><span class="line"></span><br><span class="line">例如：根据年龄倒序排序</span><br><span class="line">db.student.find().sort(&#123;age:-1&#125;)</span><br></pre></td></tr></table></figure><h5 id="16、查询显示指定列"><a href="#16、查询显示指定列" class="headerlink" title="16、查询显示指定列"></a>16、查询显示指定列</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询显示指定列 1表示显示 0表示不显示 默认id显示 可手动关闭</span></span><br><span class="line">db.集合名.find(&#123;&#125;,&#123;属性名1:1,属性名2:0&#125;)</span><br><span class="line"></span><br><span class="line">例如：查询student集合的名字和年龄 不显示id</span><br><span class="line">db.student.find(&#123;&#125;,&#123;name:1,age:1,_id:0&#125;)</span><br></pre></td></tr></table></figure><h4 id="新增相关"><a href="#新增相关" class="headerlink" title="新增相关"></a>新增相关</h4><h5 id="1、向集合中插入一条数据"><a href="#1、向集合中插入一条数据" class="headerlink" title="1、向集合中插入一条数据"></a>1、向集合中插入一条数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.insertOne(&#123;插入对象&#125;) 等同于 insert</span><br><span class="line"></span><br><span class="line">例如：向student集合中插入一条数据</span><br><span class="line">db.student.insertOne(&#123;name:&quot;Levi&quot;,age:19&#125;)</span><br></pre></td></tr></table></figure><h5 id="2、向集合中插入多条数据"><a href="#2、向集合中插入多条数据" class="headerlink" title="2、向集合中插入多条数据"></a>2、向集合中插入多条数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.insertMany([插入对象数组]) 等同于 insert</span><br><span class="line"></span><br><span class="line">例如：向student集合中插入多条数据</span><br><span class="line">db.student.insertMany([&#123;name:&quot;Jack&quot;,age:18&#125;,&#123;name:&quot;Lily&quot;,age:19&#125;])</span><br></pre></td></tr></table></figure><h5 id="3、向集合中循环插入多条数据"><a href="#3、向集合中循环插入多条数据" class="headerlink" title="3、向集合中循环插入多条数据"></a>3、向集合中循环插入多条数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 向numbers集合中循环插入20000条数据</span></span><br><span class="line">var arr = [];</span><br><span class="line">for(var i=1; i&lt;=20000; i++)&#123;</span><br><span class="line">arr.push(&#123;num:i&#125;);</span><br><span class="line">&#125;</span><br><span class="line">db.numbers.insert(arr);</span><br></pre></td></tr></table></figure><h4 id="修改相关"><a href="#修改相关" class="headerlink" title="修改相关"></a>修改相关</h4><h5 id="1、根据条件修改符合的第一个文档-丢失原有属性"><a href="#1、根据条件修改符合的第一个文档-丢失原有属性" class="headerlink" title="1、根据条件修改符合的第一个文档(丢失原有属性)"></a>1、根据条件修改符合的第一个文档(丢失原有属性)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将对象全部修改为第二个对象 会丢失原有属性</span></span><br><span class="line">db.集合名.updateOne(&#123;查询条件对象&#125;,&#123;要修改成的新对象&#125;) 等同于 update 等同于 replaceOne</span><br><span class="line"></span><br><span class="line">例如：修改student集合中name为Levi的文档 age为11</span><br><span class="line">db.student.updateOne(&#123;name:&quot;Levi&quot;&#125;,&#123;age:11&#125;)</span><br></pre></td></tr></table></figure><h5 id="2、根据条件修改符合的第一个文档-增加属性"><a href="#2、根据条件修改符合的第一个文档-增加属性" class="headerlink" title="2、根据条件修改符合的第一个文档(增加属性)"></a>2、根据条件修改符合的第一个文档(增加属性)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 仅增加第二个对象的属性 不丢失原有属性</span></span><br><span class="line">db.集合名.updateOne(&#123;查询条件对象&#125;,&#123;$set:&#123;要增加的属性名&#125;&#125;) 等同于 update</span><br><span class="line"></span><br><span class="line">例如：修改student集合中name为Levi的文档 增加属性age为11</span><br><span class="line">db.student.updateOne(&#123;name:&quot;Levi&quot;&#125;,&#123;$set:&#123;age:11&#125;&#125;)</span><br></pre></td></tr></table></figure><h5 id="3、根据条件修改符合的第一个文档-删除属性"><a href="#3、根据条件修改符合的第一个文档-删除属性" class="headerlink" title="3、根据条件修改符合的第一个文档(删除属性)"></a>3、根据条件修改符合的第一个文档(删除属性)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 仅删除第二个对象的属性 不丢失原有属性</span></span><br><span class="line">db.集合名.updateOne(&#123;查询条件对象&#125;,&#123;$set:&#123;要删除的属性名&#125;&#125;) 等同于 update</span><br><span class="line"></span><br><span class="line">例如：修改student集合中name为Levi的文档 删除属性age为11</span><br><span class="line">db.student.updateOne(&#123;name:&quot;Levi&quot;&#125;,&#123;$unset:&#123;age:11&#125;&#125;)</span><br></pre></td></tr></table></figure><h5 id="4、同时修改多条记录-新增或删除属性"><a href="#4、同时修改多条记录-新增或删除属性" class="headerlink" title="4、同时修改多条记录(新增或删除属性)"></a>4、同时修改多条记录(新增或删除属性)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.updateMany(&#123;查询条件对象&#125;,&#123;$set:&#123;要增加的属性名&#125;&#125;) 或删除属性 $unset</span><br><span class="line">db.集合名.update(&#123;查询条件对象&#125;,&#123;$set:&#123;要增加的属性名&#125;,&#123;multi:true&#125;&#125;) 或删除属性 $unset</span><br><span class="line"></span><br><span class="line">例如：给student集合中age为19的文档 增加sex为man的属性</span><br><span class="line">db.student.updateMany(&#123;age:19&#125;,&#123;$set:&#123;sex:&quot;man&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure><h5 id="5、向集合中某个数组属性新增一个文档"><a href="#5、向集合中某个数组属性新增一个文档" class="headerlink" title="5、向集合中某个数组属性新增一个文档"></a>5、向集合中某个数组属性新增一个文档</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 向集合中添加一个新的元素 相当于List 可重复添加</span></span><br><span class="line">db.集合名.update(&#123;查询条件对象&#125;,&#123;$push:&#123;要添加的元素&#125;&#125;)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 向集合中添加一个新的元素 相当于Set 无重复添加</span></span><br><span class="line">db.集合名.update(&#123;查询条件对象&#125;,&#123;$addToSet:&#123;要添加的元素&#125;&#125;)</span><br></pre></td></tr></table></figure><h5 id="6、在原有属性值的基础上自增"><a href="#6、在原有属性值的基础上自增" class="headerlink" title="6、在原有属性值的基础上自增"></a>6、在原有属性值的基础上自增</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.update(&#123;查询条件对象&#125;,&#123;$inc:&#123;要自增的对象&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="删除相关"><a href="#删除相关" class="headerlink" title="删除相关"></a>删除相关</h4><h5 id="1、删除文档"><a href="#1、删除文档" class="headerlink" title="1、删除文档"></a>1、删除文档</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除文档 remove默认情况下等同于deleteMany</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> remove添加第二个参数<span class="literal">true</span>则删除一个 空对象删除全部</span></span><br><span class="line">db.集合名.remove(&#123;查询条件对象&#125;)</span><br><span class="line">db.集合名.remove(&#123;查询条件对象&#125;,true)</span><br><span class="line">db.集合名.deleteOne(&#123;查询条件对象&#125;)</span><br><span class="line">db.集合名.deleteMany(&#123;查询条件对象&#125;)</span><br><span class="line">db.集合名.remove(&#123;空对象&#125;)</span><br></pre></td></tr></table></figure><h5 id="2、删除集合"><a href="#2、删除集合" class="headerlink" title="2、删除集合"></a>2、删除集合</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除集合 如果数据库中没有集合 则会不显示数据库</span></span><br><span class="line">db.集合名.drop()</span><br></pre></td></tr></table></figure><h5 id="3、删除数据库"><a href="#3、删除数据库" class="headerlink" title="3、删除数据库"></a>3、删除数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除数据库</span></span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><h4 id="查询手册"><a href="#查询手册" class="headerlink" title="查询手册"></a>查询手册</h4><blockquote><p><a href="https://www.lanzous.com/iLFUbk8xy0f">https://www.lanzous.com/iLFUbk8xy0f</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java NIO学习笔记</title>
      <link href="/2021/01/08/2021010801/"/>
      <url>/2021/01/08/2021010801/</url>
      
        <content type="html"><![CDATA[<h3 id="NIO简介"><a href="#NIO简介" class="headerlink" title="NIO简介"></a>NIO简介</h3><blockquote><p><code>Java NIO</code>(New IO Non Blocking IO)可以理解为<code>新IO</code>或<code>非阻塞IO</code>，是从Java1.4开始引入的一个新的IO API，与原来的IO有同样的作用和目的，但是使用方式完全不同</p><p>NIO支持面向缓冲区、基于通道的IO操作。简单说，NIO将以更高效的方式进行文件的读写</p></blockquote><h3 id="传统IO与NIO的区别？"><a href="#传统IO与NIO的区别？" class="headerlink" title="传统IO与NIO的区别？"></a>传统IO与NIO的区别？</h3><blockquote><p>传统IO是面向流的，且是单向操作的。分别需要输入流跟输出流，流直接面对其中的数据，来进行数据的传输(即把文件通过byte[]数组进行传输)，可以简单的将传统的IO理解为日常生活中的水流</p></blockquote><blockquote><p>NIO中建立连接的是通道，可以将通道简单的理解为日常生活中的铁路，但是铁路本身并不具备传输功能，我们需要通过缓冲区来进行传输数据，缓冲区可以对等的理解为火车。所以我们可以得知，NIO是面向缓冲区的，且是双向操作的</p></blockquote><ul><li>传统IO：面向流，直接传输数据，单向操作，阻塞IO(水流在水管中单向流动)</li><li>NIO：面向缓冲区，通道只做连接，传输依靠缓冲区，双向操作，非阻塞IO(火车在铁路上来回运输)</li></ul><h3 id="通道与缓冲区"><a href="#通道与缓冲区" class="headerlink" title="通道与缓冲区"></a>通道与缓冲区</h3><blockquote><p>NIO系统的核心在于：通道(<code>Channel</code>)和缓冲区(<code>Buffer</code>)</p><p><strong>通道：</strong>表示打开到IO设备(文件等)的连接，使用NIO之前，一定要获取连接IO设备的通道【铁路】</p><p><strong>缓冲区：</strong>就是数组，负责不同数据类型的数据存储【火车】</p><p>可以简单的理解为：<code>Channel</code>负责传输，<code>Buffer</code>负责存储</p></blockquote><h3 id="缓冲区的使用"><a href="#缓冲区的使用" class="headerlink" title="缓冲区的使用"></a>缓冲区的使用</h3><blockquote><p>根据数据类型不同，提供对应类型的缓冲区(<code>boolean除外</code>)</p><p>包含如下：<code>ByteBuffer、CharBuffer、ShortBuffer、IntBuffer、LongBuffer、FloatBuffer、DoubleBuffer</code></p><p>上述缓冲区的管理方式几乎一致，通过<code>allocate()</code>获取缓冲区</p></blockquote><blockquote><p>缓冲区存取数据的两个核心方法：</p><ul><li><code>put()</code>：存入数据到缓冲区中</li><li><code>get()</code>：获取缓冲区中的数据</li></ul><p>缓冲区中四个核心属性：</p><ul><li><code>capacity</code>：容量，表示缓冲区中最大存储数据的容量，一旦声明不能改变(<code>因为底层是数组</code>)</li><li><code>limit</code>：界限，还是缓冲区中可以操作的数据的大小(<code>limit后数据不能进行读写</code>)</li><li><code>position</code>：位置，表示缓冲区中正在操作数据的位置</li><li><code>mark</code>：标记，表示记录当前<code>position</code>的位置，可以通过<code>reset()</code>恢复到<code>mark</code>位置</li></ul><p>以上参数的限制：<code>0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、分配一个大小为1024的缓冲区</span></span><br><span class="line">ByteBuffer bf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;-----------allocate()-----------&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;当前位置:&quot;</span> + bf.position());</span><br><span class="line">System.out.println(<span class="string">&quot;当前界限:&quot;</span> + bf.limit());</span><br><span class="line">System.out.println(<span class="string">&quot;当前容量:&quot;</span> + bf.capacity());</span><br><span class="line"><span class="comment">// 2、利用put()存入数据到缓冲区中</span></span><br><span class="line">System.out.println(<span class="string">&quot;-----------put()-----------&quot;</span>);</span><br><span class="line">bf.put(<span class="string">&quot;abcde&quot;</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">&quot;当前位置:&quot;</span> + bf.position());</span><br><span class="line">System.out.println(<span class="string">&quot;当前界限:&quot;</span> + bf.limit());</span><br><span class="line">System.out.println(<span class="string">&quot;当前容量:&quot;</span> + bf.capacity());</span><br><span class="line"><span class="comment">// 3、切换读数据模式</span></span><br><span class="line">System.out.println(<span class="string">&quot;-----------flip()-----------&quot;</span>);</span><br><span class="line">bf.flip();</span><br><span class="line">System.out.println(<span class="string">&quot;当前位置:&quot;</span> + bf.position());</span><br><span class="line">System.out.println(<span class="string">&quot;当前界限:&quot;</span> + bf.limit());</span><br><span class="line">System.out.println(<span class="string">&quot;当前容量:&quot;</span> + bf.capacity());</span><br><span class="line"><span class="comment">// 4、利用get()读取缓冲区中的数据</span></span><br><span class="line">System.out.println(<span class="string">&quot;-----------get()-----------&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">bf.get(dst);</span><br><span class="line">System.out.println(<span class="string">&quot;读取数据:&quot;</span> + <span class="keyword">new</span> String(dst, <span class="number">0</span>, dst.length));</span><br><span class="line">System.out.println(<span class="string">&quot;当前位置:&quot;</span> + bf.position());</span><br><span class="line">System.out.println(<span class="string">&quot;当前界限:&quot;</span> + bf.limit());</span><br><span class="line">System.out.println(<span class="string">&quot;当前容量:&quot;</span> + bf.capacity());</span><br><span class="line"><span class="comment">// 4、利用get()读取缓冲区中的数据</span></span><br><span class="line">System.out.println(<span class="string">&quot;-----------get()-----------&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span>[] dst1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>];</span><br><span class="line">bf.get(dst1);</span><br><span class="line">System.out.println(<span class="string">&quot;读取数据:&quot;</span> + <span class="keyword">new</span> String(dst1, <span class="number">0</span>, dst1.length));</span><br><span class="line">System.out.println(<span class="string">&quot;当前位置:&quot;</span> + bf.position());</span><br><span class="line">System.out.println(<span class="string">&quot;当前界限:&quot;</span> + bf.limit());</span><br><span class="line">System.out.println(<span class="string">&quot;当前容量:&quot;</span> + bf.capacity());</span><br><span class="line"><span class="comment">// 5、利用rewind()重复读取数据 回到flip()后的位置</span></span><br><span class="line">System.out.println(<span class="string">&quot;-----------rewind()-----------&quot;</span>);</span><br><span class="line">bf.rewind();</span><br><span class="line">System.out.println(<span class="string">&quot;当前位置:&quot;</span> + bf.position());</span><br><span class="line">System.out.println(<span class="string">&quot;当前界限:&quot;</span> + bf.limit());</span><br><span class="line">System.out.println(<span class="string">&quot;当前容量:&quot;</span> + bf.capacity());</span><br><span class="line"><span class="comment">// 6、利用clear()清空缓冲区 数据依然存在 只是位置界限恢复初始位置 处于被遗忘状态</span></span><br><span class="line">System.out.println(<span class="string">&quot;-----------clear()-----------&quot;</span>);</span><br><span class="line">bf.clear();</span><br><span class="line">System.out.println(<span class="string">&quot;当前位置:&quot;</span> + bf.position());</span><br><span class="line">System.out.println(<span class="string">&quot;当前界限:&quot;</span> + bf.limit());</span><br><span class="line">System.out.println(<span class="string">&quot;当前容量:&quot;</span> + bf.capacity());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">控制台打印信息</span><br><span class="line"></span><br><span class="line">-----------allocate()-----------</span><br><span class="line">当前位置:<span class="number">0</span></span><br><span class="line">当前界限:<span class="number">1024</span></span><br><span class="line">当前容量:<span class="number">1024</span></span><br><span class="line">-----------put()-----------</span><br><span class="line">当前位置:<span class="number">5</span></span><br><span class="line">当前界限:<span class="number">1024</span></span><br><span class="line">当前容量:<span class="number">1024</span></span><br><span class="line">-----------flip()-----------</span><br><span class="line">当前位置:<span class="number">0</span></span><br><span class="line">当前界限:<span class="number">5</span></span><br><span class="line">当前容量:<span class="number">1024</span></span><br><span class="line">-----------get()-----------</span><br><span class="line">读取数据:ab</span><br><span class="line">当前位置:<span class="number">2</span></span><br><span class="line">当前界限:<span class="number">5</span></span><br><span class="line">当前容量:<span class="number">1024</span></span><br><span class="line">-----------get()-----------</span><br><span class="line">读取数据:cde</span><br><span class="line">当前位置:<span class="number">5</span></span><br><span class="line">当前界限:<span class="number">5</span></span><br><span class="line">当前容量:<span class="number">1024</span></span><br><span class="line">-----------rewind()-----------</span><br><span class="line">当前位置:<span class="number">0</span></span><br><span class="line">当前界限:<span class="number">5</span></span><br><span class="line">当前容量:<span class="number">1024</span></span><br><span class="line">-----------clear()-----------</span><br><span class="line">当前位置:<span class="number">0</span></span><br><span class="line">当前界限:<span class="number">1024</span></span><br><span class="line">当前容量:<span class="number">1024</span></span><br></pre></td></tr></table></figure><blockquote><p>这里我相信大家肯定跟我同样有一个疑问，到底什么时候使用<code>flip()</code>进行切换呢？</p><p>下面我们看一下<code>flip()</code>这个方法里面都干了什么，你就会明白什么时候使用了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flips this buffer.  The limit is set to the current position and then</span></span><br><span class="line"><span class="comment"> * the position is set to zero.  If the mark is defined then it is discarded.</span></span><br><span class="line"><span class="comment"> * 会将缓冲区的当前位置赋值给缓冲区界限,将当前位置修改为0,如果设置了标记也会一并清空</span></span><br><span class="line"><span class="comment"> * 简单点说,如果我们使用了put()方法后,如果需要使用get()进行读取数据的话,我们要执行一次flip()</span></span><br><span class="line"><span class="comment"> * 这样我们的position才会从头开始进行读取，读取的最大长度是我们之前写入的最长位置,即当前的界限大小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    limit = position;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面我们重新存储一下数据 进行<code>mark()</code>和<code>reset()</code>的演示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义要放入缓冲区中的字符串</span></span><br><span class="line">String str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="comment">// 初始化一个1024大小的缓冲区</span></span><br><span class="line">ByteBuffer bf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 使用put() 将字符串放入到缓冲区中</span></span><br><span class="line">bf.put(str.getBytes());</span><br><span class="line"><span class="comment">// 使用flip() 切换读写模式</span></span><br><span class="line">bf.flip();</span><br><span class="line"><span class="comment">// 定义一个与缓冲区界限一样大的字节数组用于存放数据</span></span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[bf.limit()];</span><br><span class="line"><span class="comment">// 使用get() 读取前两个字符</span></span><br><span class="line">bf.get(b, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;读取到的字符:&quot;</span> + <span class="keyword">new</span> String(b, <span class="number">0</span>, <span class="number">2</span>) + <span class="string">&quot; 当前位置:&quot;</span> + bf.position());</span><br><span class="line"><span class="comment">// 使用mark() 进行标记</span></span><br><span class="line">bf.mark();</span><br><span class="line">System.out.println(<span class="string">&quot;使用mark进行标记&quot;</span>);</span><br><span class="line"><span class="comment">// 继续读取两个</span></span><br><span class="line">bf.get(b, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;读取到的字符:&quot;</span> + <span class="keyword">new</span> String(b, <span class="number">2</span>, <span class="number">2</span>) + <span class="string">&quot; 当前位置:&quot;</span> + bf.position());</span><br><span class="line"><span class="comment">// 使用reset() 恢复到mark位置</span></span><br><span class="line">bf.reset();</span><br><span class="line">System.out.println(<span class="string">&quot;已使用reset恢复 当前位置:&quot;</span> + bf.position());</span><br><span class="line"><span class="comment">// 判断是否还有可读取的数据</span></span><br><span class="line"><span class="keyword">if</span> (bf.hasRemaining()) &#123;</span><br><span class="line">    <span class="comment">// 使用remaining() 获取剩余可读取的数量</span></span><br><span class="line">    System.out.println(<span class="string">&quot;剩余可读取的数量:&quot;</span> + bf.remaining());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">控制台打印信息</span><br><span class="line"></span><br><span class="line">读取到的字符:ab 当前位置:<span class="number">2</span></span><br><span class="line">使用mark进行标记</span><br><span class="line">读取到的字符:cd 当前位置:<span class="number">4</span></span><br><span class="line">已使用reset恢复 当前位置:<span class="number">2</span></span><br><span class="line">剩余可读取的数量:<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="直接缓冲区-amp-非直接缓冲区"><a href="#直接缓冲区-amp-非直接缓冲区" class="headerlink" title="直接缓冲区&amp;非直接缓冲区"></a>直接缓冲区&amp;非直接缓冲区</h3><blockquote><p>非直接缓冲区：通过<code>allocate()</code>方法分配缓冲区，将缓冲区建立在<code>JVM</code>的内存中</p><p>直接缓冲区：通过<code>allocateDirect()</code>方法或通过<code>FileChannel</code>的<code>map()</code>方法，直接将缓冲区建立在物理内存中，且只有<code>ByteBuffer</code>支持直接缓冲区，两种方法原理相同仅获取方式不同</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建直接缓冲区</span></span><br><span class="line">ByteBuffer bf1 = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 创建非直接缓冲区</span></span><br><span class="line">ByteBuffer bf2 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 通过isDirect() 判断是否是直接缓冲区</span></span><br><span class="line">System.out.println(<span class="string">&quot;allocateDirect:&quot;</span> + bf1.isDirect());</span><br><span class="line">System.out.println(<span class="string">&quot;allocate:&quot;</span> + bf2.isDirect());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">控制台打印信息</span><br><span class="line"></span><br><span class="line">allocateDirect:<span class="keyword">true</span></span><br><span class="line">allocate:<span class="keyword">false</span></span><br></pre></td></tr></table></figure><blockquote><p>建议：一般情况下，直接缓冲区分配和取消所需要消耗的成本都高于非直接缓冲区，所以除非直接缓冲区能在程序性能方面带来明显好处时才进行使用</p></blockquote><h3 id="通道Channel"><a href="#通道Channel" class="headerlink" title="通道Channel"></a>通道Channel</h3><blockquote><p>用于源节点与目标节点的连接，在<code>Java NIO</code>中负责缓冲区中数据的传输</p><p><code>Channel</code>本身不存储数据，因此需要配合缓冲区进行传输</p></blockquote><h4 id="通道的主要实现类"><a href="#通道的主要实现类" class="headerlink" title="通道的主要实现类"></a>通道的主要实现类</h4><p><code>java.nio.channels.Channel</code>接口：</p><ul><li>本地：<ul><li><code>FileChannel</code></li></ul></li><li>网络：<ul><li><code>SocketChannel</code></li><li><code>ServerSocketChannel</code></li><li><code>DatagramChannel</code></li></ul></li></ul><h4 id="获取通道Channel三种方法"><a href="#获取通道Channel三种方法" class="headerlink" title="获取通道Channel三种方法"></a>获取通道Channel三种方法</h4><blockquote><p>这里需要注意的是，只是获取通道的方式不同，与直接缓冲区或非直接缓冲区无关</p></blockquote><ol><li><code>Java</code>针对支持通道的类提供了<code>getChannel()</code>方法</li></ol><ul><li>本地IO：<ul><li><code>FileInputStream/FileOutputStream</code></li><li><code>RandomAccessFile</code></li></ul></li><li>网络IO：<ul><li><code>Socket</code></li><li><code>ServerSocket</code></li><li><code>DatagramSocket</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取输入输出流</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:\\xx.mp4&quot;</span>);</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\yy.mp4&quot;</span>);</span><br><span class="line"><span class="comment">// 获取通道</span></span><br><span class="line">FileChannel inChannel = fis.getChannel();</span><br><span class="line">FileChannel outChannel = fos.getChannel();</span><br><span class="line"><span class="comment">// 分配指定大小缓冲区</span></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 将inChannel通道中的数据存入缓冲区(可以理解为 本次火车卖1024张车票)</span></span><br><span class="line"><span class="keyword">while</span> (inChannel.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 切换读数据模式</span></span><br><span class="line">    buffer.flip();</span><br><span class="line">    <span class="comment">// 将缓冲区中的数据存入到outChannel通道中(可以理解为 1024张车票的乘客都已坐上火车)</span></span><br><span class="line">    outChannel.write(buffer);</span><br><span class="line">    <span class="comment">// 清空缓冲区(可以理解为 乘客终点站都下车了 只有没人了才能卖1024张返程车票)</span></span><br><span class="line">    buffer.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line">outChannel.close();</span><br><span class="line">inChannel.close();</span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">fos.close();</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>JDK1.7</code>中的<code>NIO.2</code>针对各个通道提供了静态方法<code>open()</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过通道的静态方法open()获取通道 并指定模式(读、写、新建不覆盖、新建覆盖)</span></span><br><span class="line">FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">&quot;D:\\xx.mp4&quot;</span>), StandardOpenOption.READ);</span><br><span class="line">FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">&quot;D:\\yy.mp4&quot;</span>), StandardOpenOption.WRITE,StandardOpenOption.READ, StandardOpenOption.CREATE);</span><br><span class="line"><span class="comment">// 使用FileChannel的map()方法建立直接缓冲区</span></span><br><span class="line">MappedByteBuffer inMapBuffer = inChannel.map(MapMode.READ_ONLY, <span class="number">0</span>, inChannel.size());</span><br><span class="line">MappedByteBuffer outMapBuffer = outChannel.map(MapMode.READ_WRITE, <span class="number">0</span>, inChannel.size());</span><br><span class="line"><span class="comment">// 这种写法的好处是 省略了通道读写的操作 直接对缓冲区进行读写操作</span></span><br><span class="line"><span class="comment">// 定义一个与缓冲区界限一样大的字节数组用于存放数据</span></span><br><span class="line"><span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[inMapBuffer.limit()];</span><br><span class="line">inMapBuffer.get(dst);</span><br><span class="line">outMapBuffer.put(dst);</span><br><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line">inChannel.close();</span><br><span class="line">outChannel.close();</span><br></pre></td></tr></table></figure><blockquote><p><code>StandardOpenOption.CREATE_NEW</code>：如果文件不存在则创建 存在则报错</p><p><code>StandardOpenOption.CREATE</code>：如果文件不存在则创建 存在则覆盖</p><p>注意：因为<code>MapMode.READ_WRITE</code>只有读写方式，所以<code>StandardOpenOption</code>必须同时指定<code>READ</code>和<code>WRITE</code>两种模式，否则会出现报错</p></blockquote><ol start="3"><li>在<code>JDK1.7</code>中的<code>NIO.2</code>的<code>Files</code>工具类的<code>newByteChannel()</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过Files工具类的newByteChannel()获取通道</span></span><br><span class="line">SeekableByteChannel inChannel = Files.newByteChannel(Paths.get(<span class="string">&quot;D:\\xx.mp4&quot;</span>), StandardOpenOption.READ);</span><br><span class="line">SeekableByteChannel outChannel = Files.newByteChannel(Paths.get(<span class="string">&quot;D:\\yy.mp4&quot;</span>), StandardOpenOption.WRITE,StandardOpenOption.READ, StandardOpenOption.CREATE);</span><br><span class="line"><span class="comment">// 创建指定大小的缓冲区</span></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 将inChannel通道中的数据存入缓冲区</span></span><br><span class="line"><span class="keyword">while</span> (inChannel.read(buf) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 切换缓冲区读取数据模式</span></span><br><span class="line">    buf.flip();</span><br><span class="line">    <span class="comment">// 将缓冲区中的数据存入outChannel通道中</span></span><br><span class="line">    outChannel.write(buf);</span><br><span class="line">    <span class="comment">// 清空缓冲区来存放下次数据</span></span><br><span class="line">    buf.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭通道和流</span></span><br><span class="line">outChannel.close();</span><br><span class="line">inChannel.close();</span><br></pre></td></tr></table></figure><h4 id="通道之间的数据传输"><a href="#通道之间的数据传输" class="headerlink" title="通道之间的数据传输"></a>通道之间的数据传输</h4><blockquote><p>使用<code>transferFrom()</code>和<code>transferTo()</code>对数据进行直接传输(<code>采用直接缓冲区方式</code>)</p><p>读数据通道使用<code>transferTo()</code>，写数据通道使用<code>transferFrom()</code>，任选一种方式即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取读数据通道</span></span><br><span class="line">FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">&quot;d:\\xx.mp4&quot;</span>), StandardOpenOption.READ);</span><br><span class="line"><span class="comment">// 获取写数据通道</span></span><br><span class="line">FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">&quot;d:\\yy.mp4&quot;</span>), StandardOpenOption.READ,StandardOpenOption.WRITE, StandardOpenOption.CREATE);</span><br><span class="line"><span class="comment">// 使用transferTo或transferFrom 直接进行数据的传输 任选一个即可</span></span><br><span class="line"><span class="comment">// inChannel.transferTo(0, inChannel.size(), outChannel);</span></span><br><span class="line">outChannel.transferFrom(inChannel, <span class="number">0</span>, inChannel.size());</span><br><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line">inChannel.close();</span><br><span class="line">outChannel.close();</span><br></pre></td></tr></table></figure><h3 id="分散-Scatter-与聚集-Gather"><a href="#分散-Scatter-与聚集-Gather" class="headerlink" title="分散(Scatter)与聚集(Gather)"></a>分散(Scatter)与聚集(Gather)</h3><blockquote><p><strong>分散读取</strong>：将通道中的数据分散到多个缓冲区中，按照缓冲区顺序，从通道中读取的数据依次将缓冲区填满</p><p><strong>聚集写入</strong>：将多个缓冲区中的数据聚集到通道中，按照缓冲区顺序，写入<code>position</code>和<code>limit</code>间的数据到通道中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件</span></span><br><span class="line">RandomAccessFile read = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;d:\\11.txt&quot;</span>), <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"><span class="comment">// 获取读数据通道</span></span><br><span class="line">FileChannel inChannel = read.getChannel();</span><br><span class="line"><span class="comment">// 分配指定大小缓冲区</span></span><br><span class="line">ByteBuffer buffer1 = ByteBuffer.allocate(<span class="number">100</span>);</span><br><span class="line">ByteBuffer buffer2 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 将所有缓冲区存入数组中</span></span><br><span class="line">ByteBuffer[] bufs = &#123; buffer1, buffer2 &#125;;</span><br><span class="line"><span class="comment">// 分散读取</span></span><br><span class="line">inChannel.read(bufs);</span><br><span class="line"><span class="comment">// 聚集写入</span></span><br><span class="line">RandomAccessFile write = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;d:\\22.txt&quot;</span>), <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"><span class="comment">// 获取写数据通道</span></span><br><span class="line">FileChannel outChannel = write.getChannel();</span><br><span class="line"><span class="comment">// 将所有的缓冲区都遍历切换为读取数据模式</span></span><br><span class="line"><span class="keyword">for</span> (ByteBuffer buffer : bufs) &#123;</span><br><span class="line">    buffer.flip();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将数据写入</span></span><br><span class="line">outChannel.write(bufs);</span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">outChannel.close();</span><br><span class="line">inChannel.close();</span><br></pre></td></tr></table></figure><h3 id="字符集Charset"><a href="#字符集Charset" class="headerlink" title="字符集Charset"></a>字符集Charset</h3><blockquote><p>编码：字符串 -&gt; 字节数组</p><p>解码：字节数组 -&gt; 字符串</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定字符集</span></span><br><span class="line">Charset charset = Charset.forName(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"><span class="comment">// 根据字符集获取编码器</span></span><br><span class="line">CharsetEncoder encoder = charset.newEncoder();</span><br><span class="line"><span class="comment">// 根据字符集获取解码器</span></span><br><span class="line">CharsetDecoder decoder = charset.newDecoder();</span><br><span class="line"><span class="comment">// 定义指定大小的缓冲区</span></span><br><span class="line">CharBuffer charBuffer = CharBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 存入数据</span></span><br><span class="line">charBuffer.put(<span class="string">&quot;一给我哩giao&quot;</span>);</span><br><span class="line">charBuffer.flip();</span><br><span class="line"><span class="comment">// 对存入的数据进行编码 因为要读出你存的数据 所以之前一定要flip()</span></span><br><span class="line">ByteBuffer byteBuffer = encoder.encode(charBuffer);</span><br><span class="line"><span class="comment">// 对存入的数据进行解码</span></span><br><span class="line">CharBuffer result = decoder.decode(byteBuffer);</span><br><span class="line"><span class="comment">// 打印解码后的结果</span></span><br><span class="line">System.out.println(<span class="string">&quot;解码后的数据:&quot;</span> + result.toString());</span><br></pre></td></tr></table></figure><blockquote><p>那么为什么<code>encode()编码</code>跟<code>decode()解码</code>后不需要用<code>flip()</code>呢？</p><p>这里我们需要注意三点：</p><p>第一点是<code>flip()</code>的含义，<code>flip()</code>是将我们现在移动的位置<code>position</code>当作界限<code>limit</code>，然后将<code>position</code>重置为<code>0</code>，这就意味着我们只有在<code>flip()</code>后才可以进行<code>get()</code>，否则我们获取的位置是新的位置，并不是我们已经放入数据的位置</p><p>第二点为什么我们编码或解码前，需要进行<code>flip()</code>，因为在编码或解码的过程中，是需要读取数据的，否则怎么对你已经<code>put()</code>存入的数据进行读取呢？所以我们需要保证传入的缓冲区已经执行了<code>flip()</code>方法，确保编码跟解码的时候可以读取到数据</p><p>第三点我们可以查看<code>encode()</code>跟<code>decode()</code>源码发现，在原代码最后返回之前，都已经替我们执行了一次<code>flip()</code>，所以我们无论是编码还是解码后，都可以直接读取里面的数据而无需<code>flip()</code></p></blockquote><h3 id="阻塞式网络通信"><a href="#阻塞式网络通信" class="headerlink" title="阻塞式网络通信"></a>阻塞式网络通信</h3><blockquote><p>接下来我们用代码模拟<code>阻塞式网络通信</code>，传输一张图片</p></blockquote><ul><li>客户端代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取网络通道</span></span><br><span class="line">SocketChannel clientChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>));</span><br><span class="line"><span class="comment">// 分配指定大小的缓冲区</span></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 读取本地文件 并发送到服务端</span></span><br><span class="line">FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">&quot;d:\\xx.jpg&quot;</span>),StandardOpenOption.READ);</span><br><span class="line"><span class="comment">// 将读取到的图片保存到缓冲区中</span></span><br><span class="line"><span class="keyword">while</span> (inChannel.read(buf) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 切换缓冲区读写模式</span></span><br><span class="line">    buf.flip();</span><br><span class="line">    <span class="comment">// 将读取到的数据存入网络通道中</span></span><br><span class="line">    clientChannel.write(buf);</span><br><span class="line">    <span class="comment">// 清空缓冲区</span></span><br><span class="line">    buf.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端写完数据了</span></span><br><span class="line">clientChannel.shutdownOutput();</span><br><span class="line"><span class="comment">// 定义读取的数据长度</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 接收服务端的反馈</span></span><br><span class="line"><span class="keyword">while</span> ((len = clientChannel.read(byteBuffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 切换缓冲区读写模式</span></span><br><span class="line">    byteBuffer.flip();</span><br><span class="line">    <span class="comment">// 接收到多少就打印多少</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, len));</span><br><span class="line">    <span class="comment">// 清空缓冲区</span></span><br><span class="line">    byteBuffer.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line">inChannel.close();</span><br><span class="line">clientChannel.close();</span><br></pre></td></tr></table></figure><ul><li>服务端代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取网络通道</span></span><br><span class="line">ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class="line"><span class="comment">// 绑定端口号</span></span><br><span class="line">serverChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line"><span class="comment">// 获取客户端连接的通道</span></span><br><span class="line">SocketChannel clientChannel = serverChannel.accept();</span><br><span class="line"><span class="comment">// 接收客户端的数据 将文件保存到本地</span></span><br><span class="line">FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">&quot;d:\\yy.jpg&quot;</span>), StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class="line"><span class="comment">// 分配指定大小的缓冲区</span></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 循环读取客户端数据</span></span><br><span class="line"><span class="keyword">while</span> (clientChannel.read(buf) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 切换缓冲区读写模式</span></span><br><span class="line">    buf.flip();</span><br><span class="line">    <span class="comment">// 将获取到的数据写入到磁盘</span></span><br><span class="line">    outChannel.write(buf);</span><br><span class="line">    <span class="comment">// 清空缓冲区</span></span><br><span class="line">    buf.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将服务端反馈数据写入</span></span><br><span class="line">byteBuffer.put(<span class="string">&quot;服务端数据接收完成!&quot;</span>.getBytes());</span><br><span class="line"><span class="comment">// 切换读取数据模式</span></span><br><span class="line">byteBuffer.flip();</span><br><span class="line"><span class="comment">// 发送反馈给客户端</span></span><br><span class="line">clientChannel.write(byteBuffer);</span><br><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line">outChannel.close();</span><br><span class="line">clientChannel.close();</span><br><span class="line">serverChannel.close();</span><br></pre></td></tr></table></figure><h3 id="非阻塞式网络通信"><a href="#非阻塞式网络通信" class="headerlink" title="非阻塞式网络通信"></a>非阻塞式网络通信</h3><blockquote><p>当调用<code>register(Selector sel,int ops)</code>将通道注册选择器时，选择器对通道的监听事件，需要通过第二个参数<code>ops</code>指定</p><p>可以监听的事件类型(可以使用<code>SelectionKey</code>的四个常量表示)：</p><ul><li>读：<code>SelectionKey.OP_READ</code></li><li>写：<code>SelectionKey.OP_WRITE</code></li><li>连接：<code>SelectionKey.OP_CONNECT</code></li><li>接收：<code>SelectionKey.OP_ACCEPT</code></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若注册时不止监听一个事件，则可以使用`&quot;位或&quot;`操作符连接</span></span><br><span class="line"><span class="keyword">int</span> i = SelectionKey.OP_READ|SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure><blockquote><p>接下来我们用代码模拟<code>非阻塞式网络通信</code>，完成简易聊天室的效果</p></blockquote><ul><li>客户端代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取客户端通道</span></span><br><span class="line">SocketChannel clientChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>));</span><br><span class="line"><span class="comment">// 切换非阻塞模式</span></span><br><span class="line">clientChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 定义指定大小的缓冲区</span></span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 创建键盘录入</span></span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">// 遍历录入数据</span></span><br><span class="line"><span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">    <span class="comment">// 将数据存入缓冲区</span></span><br><span class="line">    byteBuffer.put((<span class="keyword">new</span> Date().toString() + <span class="string">&quot;\n&quot;</span> + scanner.next()).getBytes());</span><br><span class="line">    <span class="comment">// 切换读写模式</span></span><br><span class="line">    byteBuffer.flip();</span><br><span class="line">    <span class="comment">// 将缓冲区写入客户端通道</span></span><br><span class="line">    clientChannel.write(byteBuffer);</span><br><span class="line">    <span class="comment">// 清空缓冲区</span></span><br><span class="line">    byteBuffer.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line">clientChannel.close();</span><br></pre></td></tr></table></figure><ul><li>服务端代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取服务端通道</span></span><br><span class="line">ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class="line"><span class="comment">// 切换非阻塞模式</span></span><br><span class="line">serverChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 绑定端口号</span></span><br><span class="line">serverChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line"><span class="comment">// 获取选择器</span></span><br><span class="line">Selector selector = Selector.open();</span><br><span class="line"><span class="comment">// 将通道注册到选择器中 并指定监听&quot;接收事件&quot;</span></span><br><span class="line">serverChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"><span class="comment">// 轮询式的获取选择器上已经&quot;准备就绪&quot;的事件</span></span><br><span class="line"><span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取该选择器中注册的&quot;选择键&quot;(已就绪的监听事件)</span></span><br><span class="line">    Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();</span><br><span class="line">    <span class="comment">// 遍历迭代器 判断当前是哪种状态</span></span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 获取当前选择键</span></span><br><span class="line">        SelectionKey key = it.next();</span><br><span class="line">        <span class="comment">// 如果是接收就绪状态</span></span><br><span class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">            <span class="comment">// 获取客户端连接</span></span><br><span class="line">            SocketChannel clientChannel = serverChannel.accept();</span><br><span class="line">            <span class="comment">// 切换非阻塞模式</span></span><br><span class="line">            clientChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 将通道注册到选择器中 并指定读就绪状态</span></span><br><span class="line">            clientChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            <span class="comment">// 获取当前选择键中&quot;读就绪&quot;状态的通道</span></span><br><span class="line">            SocketChannel clientChannel = (SocketChannel) key.channel();</span><br><span class="line">            <span class="comment">// 定义指定大小缓冲区</span></span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="comment">// 定义读取长度</span></span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = clientChannel.read(byteBuffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 切换读数据模式</span></span><br><span class="line">                byteBuffer.flip();</span><br><span class="line">                <span class="comment">// 将数据打印</span></span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, len));</span><br><span class="line">                <span class="comment">// 清空缓冲区</span></span><br><span class="line">                byteBuffer.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取消选择键SelectionKey</span></span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DatagramChannel"><a href="#DatagramChannel" class="headerlink" title="DatagramChannel"></a>DatagramChannel</h3><blockquote><p><code>Java NIO</code>中的<code>DatagramChannel</code>是一个能收发<code>UDP</code>包的通道</p><p><strong>操作步骤：</strong></p><ul><li>打开<code>DatagramChannel</code></li><li>接收/发送数据</li></ul><p>同样，我们使用这种方式实现一个简易的聊天室</p></blockquote><ul><li>发送端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取发送端通道</span></span><br><span class="line">DatagramChannel sendChannel = DatagramChannel.open();</span><br><span class="line"><span class="comment">// 切换非阻塞模式</span></span><br><span class="line">sendChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 定义指定大小的缓冲区</span></span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 获取键盘录入</span></span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">// 遍历录入数据</span></span><br><span class="line"><span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">    <span class="comment">// 将数据存入缓冲区</span></span><br><span class="line">    byteBuffer.put((<span class="keyword">new</span> Date().toString() + <span class="string">&quot;\n&quot;</span> + scanner.next()).getBytes());</span><br><span class="line">    <span class="comment">// 切换读写模式</span></span><br><span class="line">    byteBuffer.flip();</span><br><span class="line">    <span class="comment">// 将缓冲区数据发送</span></span><br><span class="line">    sendChannel.send(byteBuffer, <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>));</span><br><span class="line">    <span class="comment">// 清空缓冲区</span></span><br><span class="line">    byteBuffer.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line">sendChannel.close();</span><br></pre></td></tr></table></figure><ul><li>接收端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取接收端通道</span></span><br><span class="line">DatagramChannel receiveChannel = DatagramChannel.open();</span><br><span class="line"><span class="comment">// 切换非阻塞模式</span></span><br><span class="line">receiveChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 绑定端口</span></span><br><span class="line">receiveChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line"><span class="comment">// 获取选择器</span></span><br><span class="line">Selector selector = Selector.open();</span><br><span class="line"><span class="comment">// 将通道注册到选择器中 并指定&quot;读就绪&quot;模式</span></span><br><span class="line">receiveChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line"><span class="comment">// 轮询式的获取选择器上已经&quot;准备就绪&quot;的事件</span></span><br><span class="line"><span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取该选择器中注册的&quot;选择键&quot;(已就绪的监听事件)</span></span><br><span class="line">    Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();</span><br><span class="line">    <span class="comment">// 遍历迭代器 判断当前是哪种状态</span></span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 获取当前选择键</span></span><br><span class="line">        SelectionKey key = it.next();</span><br><span class="line">        <span class="comment">// 如果是&quot;读就绪&quot;状态</span></span><br><span class="line">        <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            <span class="comment">// 定义指定大小缓冲区</span></span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="comment">// 接收数据</span></span><br><span class="line">            receiveChannel.receive(byteBuffer);</span><br><span class="line">            <span class="comment">// 切换读数据模式</span></span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            <span class="comment">// 将接收到的数据进行打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, byteBuffer.limit()));</span><br><span class="line">            <span class="comment">// 清空缓冲区</span></span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取消选择键</span></span><br><span class="line">    it.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="管道Pipe"><a href="#管道Pipe" class="headerlink" title="管道Pipe"></a>管道Pipe</h3><blockquote><p><code>Java NIO</code>管道是2个线程之间的单向数据连接</p><p><code>Pipe</code>有一个<code>source</code>通道和一个<code>sink</code>通道，数据会被写到<code>sink</code>通道，从<code>source</code>通道读取</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取管道</span></span><br><span class="line">Pipe pipe = Pipe.open();</span><br><span class="line"><span class="comment">// 定义指定大小缓冲区</span></span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 获取sink通道</span></span><br><span class="line">SinkChannel sinkChannel = pipe.sink();</span><br><span class="line"><span class="comment">// 将数据存入缓冲区</span></span><br><span class="line">byteBuffer.put(<span class="string">&quot;通过单向管道发送数据&quot;</span>.getBytes());</span><br><span class="line"><span class="comment">// 切换读写模式</span></span><br><span class="line">byteBuffer.flip();</span><br><span class="line"><span class="comment">// 将缓冲区中的数据写入管道</span></span><br><span class="line">sinkChannel.write(byteBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上方写数据 下方读数据 以后可以分开两个线程分别执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取source通道</span></span><br><span class="line">SourceChannel sourceChannel = pipe.source();</span><br><span class="line"><span class="comment">// 因为之前执行了write方法 需要再次切换读数据模式</span></span><br><span class="line">byteBuffer.flip();</span><br><span class="line"><span class="comment">// 读取缓冲区中的数据</span></span><br><span class="line"><span class="keyword">int</span> len = sourceChannel.read(byteBuffer);</span><br><span class="line"><span class="comment">// 打印读取到的数据</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, len));</span><br><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line">sourceChannel.close();</span><br><span class="line">sinkChannel.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城20-27 Nacos&amp;Gateway网关</title>
      <link href="/2020/10/19/2020101900/"/>
      <url>/2020/10/19/2020101900/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么使用SpringCloudAlibaba"><a href="#为什么使用SpringCloudAlibaba" class="headerlink" title="为什么使用SpringCloudAlibaba?"></a>为什么使用SpringCloudAlibaba?</h4><p><code>SpringCloud</code>部分组件停止维护和更新，给开发带来不便</p><p><code>SpringCloud</code>部分环境搭建复杂，没有完善的可视化界面，我们需要大量的二次开发和定制</p><p><code>SpringCloud</code>配置复杂，难以上手，部分配置差别难以区分和合理应用</p><h4 id="SpringCloudAlibaba的优势？"><a href="#SpringCloudAlibaba的优势？" class="headerlink" title="SpringCloudAlibaba的优势？"></a>SpringCloudAlibaba的优势？</h4><p>阿里使用过的组件经历了考验，性能强悍，设计合理，给开发带来了极大的便利</p><p>搭建简单，学习成本低，可视化界面好</p><h4 id="结合SpringCloudAlibaba的最终技术搭配方案"><a href="#结合SpringCloudAlibaba的最终技术搭配方案" class="headerlink" title="结合SpringCloudAlibaba的最终技术搭配方案"></a>结合SpringCloudAlibaba的最终技术搭配方案</h4><p><code>SpringCloudAlibaba-Nacos</code>：注册中心(服务发现/注册)</p><p><code>SpringCloudAlibaba-Nacos</code>：配置中心(动态配置管理)</p><p><code>SpringCloud-Ribbon</code>：负载均衡</p><p><code>SpringCloud-Feign</code>：声明式HTTP客户端(调用远程服务)</p><p><code>SpringCloudAlibaba-Sentinel</code>：服务容错(限流、降级、熔断)</p><p><code>SpringCloud-Gateway</code>：API网关(<code>webflux</code>编程模式)</p><p><code>SpringCloud-Sleuth</code>：调用链监控</p><p><code>SpringCloudAlibaba-Seata</code>：原<code>Fescar</code>，即分布式事务解决方案</p><h4 id="SpringCloudAlibaba源码地址"><a href="#SpringCloudAlibaba源码地址" class="headerlink" title="SpringCloudAlibaba源码地址"></a>SpringCloudAlibaba源码地址</h4><blockquote><p><a href="https://github.com/alibaba/spring-cloud-alibaba">https://github.com/alibaba/spring-cloud-alibaba</a></p></blockquote><h4 id="如何整合Nacos"><a href="#如何整合Nacos" class="headerlink" title="如何整合Nacos?"></a>如何整合Nacos?</h4><p>学习最快的方式就是看官方文档啦😊</p><blockquote><p>首先我们需要统一下<code>SpringBoot&amp;SpringCloud&amp;SpringCloudAlibaba</code>版本号，防止出现一些不合常规的问题，以下配置是建立在<code>SpringBoot 2.3.10.RELEASE</code>版本基础上</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR10<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Nacos官方文档地址：</p><blockquote><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/readme.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/readme.md</a></p></blockquote><p>1、将<code>spring-cloud-starter-alibaba-nacos-discovery</code>添加到pom.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，如果你使用的是<code>SpringBoot2.4.x</code>版本，因为负载均衡不再是使用<code>ribbon</code>而是使用<code>spring-cloud-loadbalancer</code>，所以我们需要排除<code>ribbon</code>并引入<code>loadbalancer</code>，如果使用的跟我一样是<code>SpringBoot2.3.x</code>版本，则无需这一步</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在<code>application.yml</code>中配置<code>Nacos</code>的服务地址，也就是<code>Nacos</code>注册中心的地址，这里我是在windows中直接通过客户端启动，所以地址为<code>127.0.0.1:8848</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">cloud</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">nacos</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">discovery</span>:<span class="string"></span></span><br><span class="line">        <span class="meta">server-addr</span>: <span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p>这里我们需要先获取到一个<code>Nacos Server</code>注册中心的服务地址</p><ul><li>在<code>github</code>中下载<code>Nacos Server</code>,建议选择<a href="https://github.com/alibaba/nacos/releases/latest">Latest release</a>稳定版</li><li>下载后解压，双击<code>Nacos\bin\startup.bat</code>，就开启了一个<code>Nacos Server</code>，默认端口是在我们本机的<code>8848</code>端口</li></ul><p><img src="/img/post/2020101900/001.png"></p><blockquote><p>这里需要注意：</p><p>如果你使用的是1.4.1或更高版本，则默认模式为集群模式</p><p>我们需要打开<code>nacos\bin\startup.bat</code>文件，将如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> MODE=<span class="string">&quot;cluster&quot;</span></span><br></pre></td></tr></table></figure><p>修改为单机模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> MODE=<span class="string">&quot;standalone&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>3、在启动类上使用<code>@EnableDiscoveryClient</code>注解，开启服务注册与发现功能，开启后才能将服务注册到<code>Nacos</code>中，其他服务才能通过接口调用到你提供的服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CouponApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在<code>application.yml</code>中添加<code>spring.application.name</code>名字，该名字会作为服务名在<code>nacos</code>中显示，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">coupon-provider</span></span><br></pre></td></tr></table></figure><p>运行<code>SpringBoot</code>启动类，我们可以在<a href="http://localhost:8848/nacos%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E6%98%AF%E5%90%A6%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%99%BB%E5%BD%95%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E5%9D%87%E4%B8%BA%60nacos%60%EF%BC%8C%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F%E5%90%8E%EF%BC%8C%E5%9C%A8%E5%B7%A6%E4%BE%A7%60%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86-%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%60%E4%B8%AD%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F%E7%9A%84%E6%9C%8D%E5%8A%A1">http://localhost:8848/nacos查看服务是否注册成功，默认登录的账号密码均为`nacos`，登录成功后，在左侧`服务管理-服务列表`中可以查看到注册成功的服务</a></p><p><img src="/img/post/2020101900/002.png"></p><h4 id="OpenFeign远程调用服务"><a href="#OpenFeign远程调用服务" class="headerlink" title="OpenFeign远程调用服务"></a>OpenFeign远程调用服务</h4><p>如果我们想要远程调用服务，我们需要如下几步：</p><p>1、在<code>pom.xml</code>中添加<code>OpenFeign</code>的依赖，这里我统一放到<code>common</code>公共模块中统一管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写一个接口，告诉<code>SpringCloud</code>这个接口需要调用远程服务，并声明接口的每一个方法都是调用哪个远程服务的请求</p><blockquote><p>建议在<code>controller</code>包同级下创建一个<code>feign</code>目录，在<code>feign</code>包路径下创建Interface接口</p><p>例如：我想要在<code>会员服务</code>中调用上<code>优惠券服务</code>，那么我们就在会员服务中刚刚创建的<code>fegin</code>目录中，创建一个<code>OrderFeginService.java</code>接口(接口名字随意起 没有要求)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给CouponController中添加一个测试接口 用于给会员服务调用获取优惠券信息</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/memberCoupons&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">memberCoupons</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CouponEntity entity = <span class="keyword">new</span> CouponEntity();</span><br><span class="line">    entity.setCouponName(<span class="string">&quot;满100减50&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">&quot;data&quot;</span>, entity);</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 表明该接口是一个远程客户端 调用哪个服务就写哪个服务的服务名</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;coupon-provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CouponFeginService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;coupon/coupon/memberCoupons&quot;)</span></span><br><span class="line">    <span class="function">R <span class="title">memberCoupons</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是：这里通过<code>@FeignClient</code>标注你调用的是哪个服务，其中的<code>coupon-provider</code>是对应服务在<code>yml</code>中配置的<code>spring.application.name</code>的名称</p><p>同时需要注意，接口需要与服务中的接口保持一致，且调用路径需要写全路径，即如果你在<code>Controller</code>中标注了统一的路径，也需要一起加到地址中，否则会提示无法找到</p></blockquote><p>3、在启动类上开启远程调用功能注解支持<code>@EnableFeignClients</code>，默认扫描的是当前所在工程目录下标注了<code>@FeginClient</code>的接口，也可以<code>basePackages</code>标注<code>feign</code>所在的包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.atguigu.gulimall.member.feign&quot;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallMemberApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GulimallMemberApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在<code>MemberController</code>中注入刚刚编写的接口<code>CouponFeginService</code>，并编写测试方法调用<code>CouponController</code>中的测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CouponFeginService feginService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> feginService.memberCoupons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、依次启动<code>优惠券服务</code>与<code>会员服务</code>，浏览器调用会员服务接口地址，请换成你们自己的端口</p><blockquote><p><a href="http://localhost:8000/member/member/test">http://localhost:8000/member/member/test</a></p></blockquote><p>浏览器响应结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;msg&quot;</span>:<span class="string">&quot;success&quot;</span>,<span class="attr">&quot;code&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;data&quot;</span>:&#123;<span class="attr">&quot;couponName&quot;</span>:<span class="string">&quot;满100减50&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>到此为止，我们就成功从<code>会员服务</code>调用到了<code>订单服务</code></p><h4 id="为什么要接入Nacos-Config"><a href="#为什么要接入Nacos-Config" class="headerlink" title="为什么要接入Nacos Config"></a>为什么要接入Nacos Config</h4><p>如果我们的代码中有一部分是从配置文件中读取的，每次修改后都需要重新打包项目在进行调用接口才能看到效果，如果我们部署了很多台机器，每次这样重新修改打包后在发布调用是很繁琐的</p><h4 id="如何接入Nacos-Config作为配置中心"><a href="#如何接入Nacos-Config作为配置中心" class="headerlink" title="如何接入Nacos Config作为配置中心"></a>如何接入Nacos Config作为配置中心</h4><p>1、在<code>pom.xml</code>中引入<code>Nacos Config Starter</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在<code>resources</code>目录下，创建一个<code>bootstrap.properties</code>配置文件，配置如下信息，需要注意的是，如果已经在<code>application.yml</code>中配置了<code>spring.application.name</code>，那么可以不配或要保持一致</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">nacos-config-example</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p>3、在调用了配置文件的<code>Controller</code>类上，使用<code>@RefreshScope</code>注解来动态刷新配置文件，配合<code>@Value</code>来获取配置文件中的值，配置中心有的，优先使用配置中心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;coupon/coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;coupon.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String couponName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/memberCoupons&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">memberCoupons</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CouponEntity entity = <span class="keyword">new</span> CouponEntity();</span><br><span class="line">        entity.setCouponName(couponName);</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;data&quot;</span>, entity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、之后打开<code>Nacos Server</code>，依次点开左侧<code>配置管理</code>节点下的<code>配置列表</code>，点击右上方➕添加一条配置</p><p><img src="/img/post/2020101900/003.png"></p><blockquote><p><code>Data ID</code>：为<code>spring.application.name</code>加上<code>properties</code>，即<code>xxxx.properties</code></p><p>如按照上方配置，则为<code>coupon-provider.properties</code></p><p><code>Group</code>：默认即可<code>DEFAULT_GROUP</code>，也可以自行输入其他名字分组，例如：1111、618等节日</p><p><code>配置格式</code>：YAML配置后没获取到，可能需要手动指定YAML格式，这里我选择properties</p><p><code>配置内容</code>：根据选择的配置格式进行编写，例如：coupon.name=满100-80</p></blockquote><p><img src="/img/post/2020101900/004.png"></p><p>5、编写完成后，点击发布即可，以后想要修改值的时候，只需要在<code>nacos</code>配置中心中修改配置内容即可，而无需重新启动项目即可看到修改后的值</p><h4 id="Nacos-Config相关细节"><a href="#Nacos-Config相关细节" class="headerlink" title="Nacos Config相关细节"></a>Nacos Config相关细节</h4><h5 id="1、命名空间：配置隔离"><a href="#1、命名空间：配置隔离" class="headerlink" title="1、命名空间：配置隔离"></a>1、命名空间：配置隔离</h5><blockquote><p>默认新增的所有配置都在public命名空间中</p><p>如果将来存在多个配置环境，例如：开发、测试、生产环境</p><p>那么我们就需要新建多个命名空间，推荐每一个微服务都创建一个命名空间</p></blockquote><ul><li><p>首先我们在Nacos左侧<code>命名空间</code>菜单中新增一个<code>dev</code>环境</p></li><li><p>然后在<code>配置列表</code>上方能看到新增的<code>dev</code>分组，之后选择该分组进行创建配置文件，规则同<code>public</code></p></li><li><p>最后在<code>bootstrap.properties</code>中配置<code>namespace</code>，值为该命名空间的<code>id</code></p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">e6ad418d-65b6-4a46-9d73-1ccde42240af</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/2020101900/005.png"></p><p><img src="/img/post/2020101900/006.png"></p><h5 id="2、配置集"><a href="#2、配置集" class="headerlink" title="2、配置集"></a>2、配置集</h5><blockquote><p>一组相关或不相关配置项的集合就叫配置集</p></blockquote><h5 id="3、配置集ID"><a href="#3、配置集ID" class="headerlink" title="3、配置集ID"></a>3、配置集ID</h5><blockquote><p>类似于配置文件名，在<code>Nacos</code>中体现的是<code>Data ID</code>，即应用名+properties</p></blockquote><h5 id="4、配置分组"><a href="#4、配置分组" class="headerlink" title="4、配置分组"></a>4、配置分组</h5><blockquote><p>默认所有的配置集都属于：DEFAULT_GROUP分组</p><p>如果需要修改分组，我们可以在<code>bootstrap.properties</code>中配置如下信息，值为组名</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">1111</span></span><br></pre></td></tr></table></figure><h4 id="Nacos配置中心加载多配置集"><a href="#Nacos配置中心加载多配置集" class="headerlink" title="Nacos配置中心加载多配置集"></a>Nacos配置中心加载多配置集</h4><p>以前我们将所有的配置文件都放到了一个配置文件中，时间久了这个配置文件就会很大且不够清晰，所以我们可能将跟数据源相关的放到<code>datasource.yml</code>中，跟<code>mybatis</code>相关的放到<code>mybatis.yml</code>中，将一个大的配置文件拆分成多个小的配置文件</p><p>那么我们如何才能实现上述效果呢？</p><p>我们只需要在<code>Nacos</code>中配置多个对应的配置文件后，在<code>bootstrap.properties</code>中配置如下信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置ext-config为List集合 所以依此类推[1]、[2]……</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].data-id</span>=<span class="string">datasource.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"># 配置是否自动刷新 默认为false 即在Nacos中修改后不会立即生效</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h4 id="Spring-Cloud-GateWay网关"><a href="#Spring-Cloud-GateWay网关" class="headerlink" title="Spring Cloud GateWay网关"></a>Spring Cloud GateWay网关</h4><blockquote><p>网关作为流量的入口，常用功能包括路由转发、权限校验、限流控制等</p><p><code>SpringCloudGateWay</code>提供一种简单有效的方式对<code>API</code>进行路由，并为他们提供切面</p></blockquote><p>我们无需去关心后台的情况，哪些服务是否能正常提供服务，网关可以帮我们动态的路由到每一个服务中；同时网关可以为我们做鉴权、限流、日志等服务，我们就无需在每一个微服务中都写一部分相同的代码来进行处理了</p><p>网关由<code>ID</code>、<code>目标URI</code>、<code>断言规则</code>、<code>过滤器</code>来决定一个请求是否能路由到某个地方，只有最后断言的结果为<code>true</code>时，才能将请求成功的路由到指定位置</p><p>断言为Java8中提供的<code>断言型函数式</code>接口，可以根据任何<code>请求头</code>或者<code>请求参数</code>中的信息，来判断是否满足路由规则，判断成功那么就能路由到指定位置</p><p>过滤器与之前Spring中的过滤器功能基本一致，在请求或响应之前或之后都可以进行修改</p><blockquote><p>综上我们可以明白一个完整的流程如下：</p><p>当<code>客户端</code>想要发送请求到<code>目标服务</code>时，中间会经过<code>API网关</code>，客户端先将请求发给<code>API网关</code>，会先来到<code>Gateway Handler Mapping</code>查看映射信息能否被路由或被处理，如果能被处理则会将请求转发给每一个<code>Handler</code>处理器进行处理，在处理器处理前会经过大量的<code>Filter</code>过滤器进行筛选，之后才能成功请求到<code>目标服务</code>，当<code>目标服务</code>处理完成后，在按照相同流程返回给<code>客户端</code></p></blockquote><p>我们可以在官方手册中找到大量的<code>predicate</code>或者<code>filter</code>规则，可以直接根据示例进行配置</p><blockquote><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.RELEASE/reference/html/#gateway-request-predicates-factories">https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.RELEASE/reference/html/#gateway-request-predicates-factories</a></p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.RELEASE/reference/html/#gatewayfilter-factories">https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.RELEASE/reference/html/#gatewayfilter-factories</a></p></blockquote><h4 id="整合Spring-Cloud-GateWay网关"><a href="#整合Spring-Cloud-GateWay网关" class="headerlink" title="整合Spring Cloud GateWay网关"></a>整合Spring Cloud GateWay网关</h4><p>1、新建<code>SpringBoot</code>项目或<code>Maven</code>项目，导入<code>GateWay</code>相关<code>starter</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在启动类上使用注解<code>@EnableDiscoveryClient</code>开启<code>服务注册与发现</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallGatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GulimallGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、在<code>application.yml</code>配置<code>nacos</code>的服务注册地址、应用名及服务端口</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">88</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><p>4、在<code>bootstrap.properties</code>中配置<code>nacos</code>的配置中心地址</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><p>5、因为我们还依赖了公共模块<code>common</code>，其中有对<code>MyBatis</code>的引用，启动的时候会提示我们去<code>yml</code>中添加数据源相关的配置，所以我们在启动类中排除对<code>DataSource</code>的配置操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="comment">// 排除对DataSource的相关自动配置操作</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallGatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GulimallGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、现在我们的网关已经在<code>88端口</code>正常启动了</p><h4 id="Spring-Cloud-GateWay网关配置示例"><a href="#Spring-Cloud-GateWay网关配置示例" class="headerlink" title="Spring Cloud GateWay网关配置示例"></a>Spring Cloud GateWay网关配置示例</h4><blockquote><p>现在我们有这样一个需求，当我发送请求的时候，会跟一个url地址，如果是baidu则跳转到<a href="http://www.baidu.com,如果是qq则跳转到www.qq.com/">www.baidu.com，如果是qq则跳转到www.qq.com</a></p></blockquote><p>那么我们需要在<code>yml</code>文件中增加如下配置</p><blockquote><p>详情可参考官方手册<code>query-route-predicate-factory</code>部分讲解</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.RELEASE/reference/html/#the-query-route-predicate-factory">https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.RELEASE/reference/html/#the-query-route-predicate-factory</a></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">baidu_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,baidu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">qq_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.qq.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,qq</span></span><br></pre></td></tr></table></figure><p><code>Query</code>后第一个值表示<code>查询参数名</code>，第二个值可以写字符串，且支持正则表达式匹配规则，表示对应参数的值，如果匹配到参数未url且值为指定值的时候，就会跳转到配置的uri地址</p><p>所以如上配置后，我们在浏览器发送不同的请求就会来到不同的页面</p><p>例如：</p><ul><li><p>发送请求<code>localhost:88?url=baidu</code>跳转到<a href="http://www.baidu.com/">www.baidu.com</a> </p></li><li><p>发送请求<code>localhost:88?url=qq</code>跳转到<a href="http://www.qq.com/">www.qq.com</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城28-35 ES6前端</title>
      <link href="/2020/10/19/2020101901/"/>
      <url>/2020/10/19/2020101901/</url>
      
        <content type="html"><![CDATA[<h3 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h3><blockquote><p>ES6是2015年发布的一套<code>JavaScript</code>标准，基本上每年都有一个新版本</p></blockquote><h4 id="1、let-amp-const"><a href="#1、let-amp-const" class="headerlink" title="1、let&amp;const"></a>1、let&amp;const</h4><blockquote><p>在<code>VSCode</code>中，新建一个<code>.html</code>文件，输入<code>！回车</code>即可快速创建出一个<code>html模板</code></p></blockquote><p>1、<code>let</code>声明的变量有严格的局部作用域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// var 声明的变量往往会越域</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// let 声明的变量有严格局部作用域</span></span></span><br><span class="line"><span class="javascript">    &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> b = <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);<span class="comment">// 1</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b);<span class="comment">// b is not defined</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>因为<code>b</code>是在代码块中使用<code>let</code>定义的，所以在括号外打印会提示<code>not defined</code></p></blockquote><p>2、<code>let</code>声明的变量只能被赋值一次</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> b = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> b = <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b);<span class="comment">// Identifier &#x27;b&#x27; has already been declared</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用<code>var</code>定义的变量，可以重新赋值，用<code>let</code>定义的变量不可以</p></blockquote><p>3、<code>let</code>不会存在变量提升</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);<span class="comment">// undefined</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b);<span class="comment">// Cannot access &#x27;b&#x27; before initialization</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> b = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>var</code>定义的变量没定义的时候会提升为<code>undefined</code></p><p>使用<code>let</code>定义的变量没定义的时候会报错</p></blockquote><p>4、<code>const</code>声明常量(只读变量)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    a = <span class="number">3</span>;<span class="comment">// Assignment to constant variable.</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> a;</span></span><br><span class="line"><span class="javascript">    a = <span class="number">3</span>;<span class="comment">// Missing initializer in const declaration</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>const</code>声明之后不允许改变，一但声明必须初始化，否则会报错</p></blockquote><h4 id="2、解构-amp-字符串"><a href="#2、解构-amp-字符串" class="headerlink" title="2、解构&amp;字符串"></a>2、解构&amp;字符串</h4><p>1、可以批量将数组中的数据赋值给多个变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以前的写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> a = arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> b = arr[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> c = arr[<span class="number">2</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a,b,c);<span class="comment">// 1,2,3</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--现在的写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span>[a,b,c] = arr;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a,b,c);<span class="comment">// 1,2,3</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、可以批量将对象中的内容赋值给多个常量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以前的写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">21</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">language</span>: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> name = person.name;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> age = person.age;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> language = person.language;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(name, age, language)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--现在的写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">21</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">language</span>: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span>&#123;name,age,language&#125; = person;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(name, age, language)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--如果想将name、age、language赋值给新的变量abc 可直接赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">21</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">language</span>: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123; <span class="attr">name</span>: a, <span class="attr">age</span>: b, <span class="attr">language</span>: c &#125; = person;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a, b, c)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、字符串扩展</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// startsWith() 返回布尔值,表示参数字符串是否在原字符串的头部</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;hello&quot;</span>));<span class="comment">// true</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;hello1&quot;</span>));<span class="comment">// false</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// endsWith() 返回布尔值,表示参数字符串是否在原字符串的尾部</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;world&quot;</span>));<span class="comment">// true</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;world1&quot;</span>));<span class="comment">// false</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// includes() 返回布尔值,表示是否找到了参数字符串</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str.includes(<span class="string">&quot;e&quot;</span>));<span class="comment">// true</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str.includes(<span class="string">&quot;a&quot;</span>));<span class="comment">// false</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、字符串模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    // 可是使用``将一段字符串包含在里面 而不用像以前一样换行需要手动拼接字符串</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    let template = </span></span></span><br><span class="line"><span class="xml"><span class="handlebars">   `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、字符串插入变量和表达式或方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123; name, age &#125; = person;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义一个函数 返回你好啊</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">&quot;你好啊&quot;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 可在``中写变量、对变量进行运算、同时可以调用函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> str = <span class="string">`我叫<span class="subst">$&#123;name&#125;</span>,今年<span class="subst">$&#123;age + <span class="number">10</span>&#125;</span>岁,<span class="subst">$&#123;say()&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、函数优化"><a href="#3、函数优化" class="headerlink" title="3、函数优化"></a>3、函数优化</h4><p>1、函数参数设置默认值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 在ES6以前,我们无法给一个函数的参数设置默认值</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 只能在代码中进行非空判断设置默认值</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        b = b || <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> a + b;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 现在我们可以在参数上设置默认值</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果没有传则自动使用默认值</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">a, b = <span class="number">1</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> a + b;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(add1(<span class="number">10</span>), add2(<span class="number">10</span>));<span class="comment">// 11,11</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、传递不定参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 传入不定参数,打印参数的长度</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">...values</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(values.length);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    getLength(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">// 3</span></span></span><br><span class="line"><span class="javascript">    getLength(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);<span class="comment">// 4</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、箭头函数(可参考java8中的lamdba表达式)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义一个参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果函数体只有一句话 可以简写成这种形式 通过=&gt;连接</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// print则为函数名 obj为参数名</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> print = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj);</span></span><br><span class="line"><span class="javascript">    print(<span class="string">&quot;hello&quot;</span>);<span class="comment">// hello</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义多个参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义函数sum用于获取a+b的值</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>))<span class="comment">// 30</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义多个参数多行代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义函数sum用于获取a+b的值</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">let</span> result = a + b; <span class="built_in">console</span>.log(result) &#125;;</span></span><br><span class="line"><span class="javascript">    sum(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">// 30</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--将解构和箭头函数整合在一起 直接将传入的person的name解构出传入函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义函数sum用于获取a+b的值</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Levi&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> hello = <span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;名字是&quot;</span> + name);</span></span><br><span class="line"><span class="javascript">    hello(person);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4、对象优化"><a href="#4、对象优化" class="headerlink" title="4、对象优化"></a>4、对象优化</h4><p>1、获取对象中的keys、values以及key-value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Levi&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取对象中的所有key数组</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person));<span class="comment">// [&quot;name&quot;, &quot;age&quot;]</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取对象中的所有value数组</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(person));<span class="comment">// [&quot;Levi&quot;, 19]</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取对象中所有的key-value数组</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(person));<span class="comment">// 0: [&quot;name&quot;, &quot;Levi&quot;],1: [&quot;age&quot;, 19]</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、将一些对象复制到目标对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> c1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> c2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> c3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第一个参数为目标对象 将后面的参数值复制给第一个参数</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.assign(c1, c2, c3);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(c1);<span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(c2);<span class="comment">// &#123;b: 2&#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(c3);<span class="comment">// &#123;c: 3&#125;</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、声明对象简写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> name = <span class="string">&quot;Levi&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> age = <span class="number">19</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果名字和对象中的名字相同,则可以省略直接写</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// const person = &#123; name: name, age: age &#125;;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> person = &#123; name, age &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(person.name, person.age);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、对象的函数属性简写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;Levi&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">eat1</span>: <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;正在吃&quot;</span> + food);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">eat2</span>: <span class="function"><span class="params">food</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;正在吃&quot;</span> + food),</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">eat3</span>(<span class="params">food</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;正在吃&quot;</span> + food);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 可以看出 箭头函数的写法是不支持this.name方法的</span></span></span><br><span class="line"><span class="javascript">    person.eat1(<span class="string">&quot;香蕉&quot;</span>);<span class="comment">// Levi正在吃香蕉</span></span></span><br><span class="line"><span class="javascript">    person.eat2(<span class="string">&quot;苹果&quot;</span>);<span class="comment">// 正在吃苹果</span></span></span><br><span class="line"><span class="javascript">    person.eat3(<span class="string">&quot;橙子&quot;</span>);<span class="comment">// Levi正在吃橙子</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5、对象扩展运算符"><a href="#5、对象扩展运算符" class="headerlink" title="5、对象扩展运算符"></a>5、对象扩展运算符</h4><p>1、拷贝对象(深拷贝)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Levi&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 使用... 将对象p1深拷贝到p2</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p2 = &#123; ...p1 &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p2);<span class="comment">// &#123;name: &quot;Levi&quot;, age: 19&#125;</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、合并对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p2 = &#123; <span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">4</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 将p1和p2的对象属性都合并到p3中</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果p1和p2有重复的属性 后面的覆盖前面的</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p3 = &#123; ...p1, ...p2 &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p3);<span class="comment">// &#123;a: 1, b: 3, c: 4&#125;</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6、map-amp-reduce"><a href="#6、map-amp-reduce" class="headerlink" title="6、map&amp;reduce"></a>6、map&amp;reduce</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 取出数组中的每一个数字 乘2后在返回一个数组</span></span></span><br><span class="line"><span class="javascript">    arr = arr.map(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(arr);<span class="comment">// [2, 4, 6, 8, 10]</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 将上一次处理后的结果当作a 在加上b</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 返回本次a+b的值 即下一次的a的值</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> result = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(result);<span class="comment">// 15</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7、promise异步编排"><a href="#7、promise异步编排" class="headerlink" title="7、promise异步编排"></a>7、promise异步编排</h4><blockquote><p>新建一个json目录 其中包含如下三个json文件</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Levi&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user_corse_1.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;数学&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// course_score_10.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">&quot;score&quot;</span>: <span class="string">&quot;100分&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本地使用ajax依次查询出当前用户信息、用户课程信息、课程分数信息</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.10.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义一个方法 用于返回Promise</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">data</span>: data,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">success</span>(<span class="params">success</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        resolve(success);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">error</span>(<span class="params">error</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        reject(error);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 调用get方法 获取用户信息</span></span></span><br><span class="line"><span class="javascript">        get(<span class="string">&quot;json/user.json&quot;</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;获取用户信息成功&quot;</span>, data);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> get(<span class="string">`json/user_corse_<span class="subst">$&#123;data.id&#125;</span>.json`</span>);</span></span><br><span class="line"><span class="javascript">        &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;获取用户课程成功&quot;</span>, data);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> get(<span class="string">`json/course_score_<span class="subst">$&#123;data.id&#125;</span>.json`</span>);</span></span><br><span class="line"><span class="javascript">        &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;获取课程分数成功&quot;</span>, data);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8、模块化"><a href="#8、模块化" class="headerlink" title="8、模块化"></a>8、模块化</h4><blockquote><p>模块化就是把代码进行拆分，方便重复利用，类似Java中的导包</p><p>要使用一个包，必须先导包，在JS中模块的含义就是包</p></blockquote><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code></p><ul><li><code>export</code>命令用于规定模块的对外接口，可以导出一切js变量，比如：基本类型变量、函数、数组、对象</li><li><code>import</code>命令用于导入其他模块提供的功能</li></ul><p>例如：新建<code>hello.js</code>导出对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = &#123;</span><br><span class="line">    <span class="function"><span class="title">sum</span>(<span class="params">a, b</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; util &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以简写成如下格式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> util = &#123;</span><br><span class="line">    <span class="function"><span class="title">sum</span>(<span class="params">a, b</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>例如：新建<code>user.js</code>导出变量和函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Levi&quot;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; name, age, getInfo &#125;</span><br></pre></td></tr></table></figure><p>新建一个<code>main.js</code>，导入<code>hello.js</code>和<code>user.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以只导入需要用的模块 不需要全部导入</span></span><br><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">&#x27;./hello&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; name, age, getInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;./user&#x27;</span>;</span><br><span class="line"></span><br><span class="line">util.sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(name, age);</span><br><span class="line">getInfo(<span class="string">&quot;Homra&quot;</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>如果想要导入的时候自定义名字，可以在导出的时候使用<code>default</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们可以将hello.js中的内容修改为如下</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">sum</span>(<span class="params">a, b</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样我们导入的时候可以修改为任意名字导入</span></span><br><span class="line"><span class="keyword">import</span> homra <span class="keyword">from</span> <span class="string">&#x27;./hello&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城36-44 vue前端</title>
      <link href="/2020/10/19/2020101902/"/>
      <url>/2020/10/19/2020101902/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><blockquote><p><code>Vue</code>是一套用于构建用户界面的<strong>渐进式框架</strong>，使用的是<code>MVVM思想</code></p><p>官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p></blockquote><h4 id="1、什么是MVVM？"><a href="#1、什么是MVVM？" class="headerlink" title="1、什么是MVVM？"></a>1、什么是MVVM？</h4><ul><li>M：即<code>Model</code>模型，包含数据和一些基本操作</li><li>V：即<code>View</code>视图，页面渲染结果</li><li>VM：即<code>View-Model</code>，模型与视图间的双向操作(无需开发人员干涉)</li></ul><p>在<code>MVVM</code>之前，开发人员从后端获取数据模型，然后要通过<code>DOM</code>操作<code>Model</code>进行渲染到<code>View</code>中，而后当用户操作视图，我们还需要通过<code>DOM</code>获取<code>View</code>中的数据，然后同步到<code>Model</code>中</p><p>而<code>NVVM</code>中的<code>VM</code>要做的事情就是把<code>DOM</code>操作完全封装起来，开发人员不用在关心<code>Model</code>和<code>View</code>之间是如何互相影响的</p><h4 id="2、安装使用Vue"><a href="#2、安装使用Vue" class="headerlink" title="2、安装使用Vue"></a>2、安装使用Vue</h4><p>我们首先新建一个<code>vue</code>的文件夹，使用如下命令初始化项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>初始化后我们就能看到目录中多了一个<code>package.json</code>文件</p><p>然后我们使用<code>npm</code>安装<code>vue</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 最新稳定版</span> </span><br><span class="line">npm install vue</span><br></pre></td></tr></table></figure><p>到此我们就给当前项目成功安装了<code>vue</code>，只需要在项目中引入即可使用啦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;./node_modules/vue/dist/vue.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面我们使用<code>! tab</code>快速生成一个html文件进行测试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>VUE测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 声明需要的数据 --&gt;</span></span><br><span class="line">        &#123;&#123;name&#125;&#125;在说Hello World!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 代表管控的元素</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 代表使用的属性</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&quot;Levi&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、双向绑定v-model"><a href="#3、双向绑定v-model" class="headerlink" title="3、双向绑定v-model"></a>3、双向绑定v-model</h4><p>我们只需要将元素跟模型中需要使用的数据进行绑定即可</p><p>当数据变了输入框会变，同样数据框变了数据也会变</p><p>即模型变化，视图变化，反之亦然</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sum&quot;</span>&gt;</span></span><br><span class="line">    当前共有&#123;&#123;sum&#125;&#125;个人</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">sum</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>花括号格式：<code>&#123;&#123;表达式&#125;&#125;</code></p><p>说明：</p><ul><li>该表达式支持JS语法，可以调用js内置函数(必须有返回值)</li><li>表达式必须有返回结果，例如：1+1，没有结果的表达式不允许使用，如let a=1+1</li><li>可以直接获取<code>vue</code>实例中定义的数据或函数</li></ul><h4 id="4、事件处理"><a href="#4、事件处理" class="headerlink" title="4、事件处理"></a>4、事件处理</h4><p>示例：当点击一下按钮的时候，总人数增加1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    当前共有&#123;&#123;sum&#125;&#125;个人<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">sum</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5、声明方法"><a href="#5、声明方法" class="headerlink" title="5、声明方法"></a>5、声明方法</h4><p>我们如果处理一下比较复杂的逻辑的时候，可以将内容写到<code>methods</code>中</p><p>在这里我们可以定义很多方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    当前共有&#123;&#123;sum&#125;&#125;个人</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;cancle&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 绑定元素</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 封装数据</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">sum</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 封装方法</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">cancle</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 这里需要使用this才能使用到sum</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.sum--;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6、常用指令"><a href="#6、常用指令" class="headerlink" title="6、常用指令"></a>6、常用指令</h4><p><code>v-html</code>：对内容进行转义后显示，即<code>h1标签</code>会默认识别到，只显示标签内的内容</p><p><code>v-text</code>：不进行转义进行显示文本内容，不存在插值闪烁问题，即当<code>vue</code>的声明是在插值之后的时候，如果网速很慢，在数据未加载完成时，页面会出现原始的&#123;&#123;&#125;&#125;标签，加载完毕后才显示正常数据，我们称之为插值闪烁，例如如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里声明vue是在&#123;&#123;msg&#125;&#125;下方 所以在页面没加载完全的时候 可能看到&#123;&#123;msg&#125;&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-bind</code>：给<code>html</code>标签的属性进行绑定</p><p>例如我们需要动态的将跳转的地址进行更改，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;link&quot;</span>&gt;</span>gogogo<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,        <span class="attr">data</span>: &#123;            <span class="attr">link</span>: <span class="string">&quot;https://www.baidu.com&quot;</span>        &#125;    &#125;);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-bind</code>：还可以根据boolean指定显示不同的值，可动态修改<code>class</code>或<code>style</code></p><p>例如我们需要根据不同情况显示class的不同属性值，可以简写为<code>:</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 语法：&#123;class名1:布尔值1,class名2:布尔值2&#125; --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active:isActive,&#x27;text-danger&#x27;:hasError&#125;&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,        <span class="attr">data</span>: &#123;            <span class="attr">isActive</span>: <span class="literal">true</span>,            <span class="attr">hasError</span>: <span class="literal">false</span>        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-model</code>：进行双向绑定，数据和页面任何一方改变，对方都会跟着改变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小火龙&quot;</span>&gt;</span>宝可梦A    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;杰尼龟&quot;</span>&gt;</span>宝可梦B    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;皮卡丘&quot;</span>&gt;</span>宝可梦C    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;妙蛙种子&quot;</span>&gt;</span>宝可梦D    <span class="tag">&lt;<span class="name">br</span> /&gt;</span>您选择了：&#123;&#123;name.join(&quot;,&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,        <span class="attr">data</span>: &#123;            <span class="attr">name</span>: []        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-for</code>：遍历操作，可以使用<code>index</code>获取到当前索引值，使用<code>:key</code>指定唯一的主键，可以提高整体渲染速度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user, index) in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.name&quot;</span>&gt;</span>            学号:&#123;&#123;index+1&#125;&#125; 姓名:&#123;&#123;user.name&#125;&#125; 性别:&#123;&#123;user.gender&#125;&#125;        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,        <span class="attr">data</span>: &#123;            <span class="attr">users</span>: [                &#123; <span class="attr">name</span>: <span class="string">&quot;皮卡丘&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span> &#125;,                &#123; <span class="attr">name</span>: <span class="string">&quot;杰尼龟&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span> &#125;,                &#123; <span class="attr">name</span>: <span class="string">&quot;波克比&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span> &#125;,                &#123; <span class="attr">name</span>: <span class="string">&quot;可达鸭&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span> &#125;,                &#123; <span class="attr">name</span>: <span class="string">&quot;海星星&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span> &#125;            ]        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在循环内部，也可以获取到对象的<code>key</code>、<code>value</code>以及<code>index</code>，名字可以自定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user, index) in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.name&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;user.gender==&#x27;女&#x27;&quot;</span>&gt;</span>            <span class="comment">&lt;!-- 只有一个代表值 --&gt;</span>            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;value in user&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>            <span class="comment">&lt;!-- 第一个代表值，第二个代表键 --&gt;</span>            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in user&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>            <span class="comment">&lt;!-- 第一个代表值，第二个代表键，第三个代表索引 --&gt;</span>            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in user&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;:&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,        <span class="attr">data</span>: &#123;            <span class="attr">users</span>: [                &#123; <span class="attr">name</span>: <span class="string">&quot;皮卡丘&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span> &#125;,                &#123; <span class="attr">name</span>: <span class="string">&quot;杰尼龟&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span> &#125;,                &#123; <span class="attr">name</span>: <span class="string">&quot;波克比&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span> &#125;,                &#123; <span class="attr">name</span>: <span class="string">&quot;可达鸭&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span> &#125;,                &#123; <span class="attr">name</span>: <span class="string">&quot;海星星&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span> &#125;            ]        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-if</code>：只有当判断条件成立的时候才会被渲染，不满足条件时页面中无相关代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以将上文中的案例改写如下 只查询性别为女的宝可梦 --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user, index) in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.name&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;user.gender==&#x27;女&#x27;&quot;</span>&gt;</span>            学号:&#123;&#123;index+1&#125;&#125; 姓名:&#123;&#123;user.name&#125;&#125; 性别:&#123;&#123;user.gender&#125;&#125;        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样，也存在<code>v-else</code>和<code>v-else-if</code>操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Not A/B/C<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,        <span class="attr">data</span>: &#123;            <span class="attr">type</span>: <span class="string">&#x27;A&#x27;</span>        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-show</code>：只有当判断条件成立的时候才会显示</p><blockquote><p>不同于<code>v-if</code>，不满足条件时仅作隐藏不会在页面中消失</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,        <span class="attr">data</span>: &#123;            <span class="attr">ok</span>: <span class="literal">false</span>        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7、事件修饰符"><a href="#7、事件修饰符" class="headerlink" title="7、事件修饰符"></a>7、事件修饰符</h4><p>现有如下案例：我们点击<code>点我去百度</code>的时候，会先弹出一次弹框(点击了小DIV)，然后会弹出第二次弹框(点小DIV也算点击了大DIV)，最后会跳转到百度，这种情况就叫做<code>事件冒泡</code></p><blockquote><p><code>v-on</code>：绑定事件，<code>v-on:click</code>可以简写成<code>@click</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red;padding: 20px;&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>        大DIV        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid blue;padding:20px&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>            小DIV            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>点我去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,        <span class="attr">methods</span>: &#123;            <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;                alert(<span class="string">&quot;Hello World&quot;</span>);            &#125;        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面我们要解决一下这个问题，外层div不弹窗，在点击事件后增加<code>stop</code>即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid blue;padding:20px&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个叫事件修饰符，下面列举一些常用的事件修饰符，也可以查看官网文档</p><blockquote><p><a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">https://cn.vuejs.org/v2/guide/events.html#事件修饰符</a></p></blockquote><ul><li><code>.stop</code>：阻止事件冒泡，不让当前元素的事件继续往外触发</li><li><code>.prevent</code>：阻止事件本身行为，例如阻止超链接跳转，表单提交等</li><li><code>.capture</code>：改变<code>js</code>默认的事件机制，默认是冒泡，capture功能是将冒泡改为倾听模式，当元素发生冒泡时，先触发带有该修饰符的元素。若有多个该修饰符，则由外而内触发</li><li><code>.self</code>：只有自己出发的自己才会执行，如果是内部冒泡事件则会忽略</li><li><code>.once</code>：将事件设置为只执行一次，<code>prevent.once</code>代表只阻止事件行为一次</li><li><code>.passive</code>：立即执行默认方法，无需等待浏览器判断是否存在<code>preventDefault</code>阻止该次事件的默认动作，需要注意的是，如果<code>passive</code>和<code>prevent</code>同时存在，后者无效</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;&lt;!-- 提交事件不再重载页面 --&gt;&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;&lt;!-- 修饰符可以串联 --&gt;&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;&lt;!-- 只有修饰符 --&gt;&lt;form v-on:submit.prevent&gt;&lt;/form&gt;&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;&lt;!-- 即事件不是从内部元素触发的 --&gt;&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p><blockquote><p>因为点击的时候会先<code>prevent</code>，阻止默认事件，阻止了跳转；然后判断是否是<code>self</code>，因为点击到的是<code>div</code>标签，所以不是<code>self</code>。但是<code>a标签</code>是<code>self</code>，阻止了<code>alert(2)</code></p></blockquote><h4 id="8、按键修饰符"><a href="#8、按键修饰符" class="headerlink" title="8、按键修饰符"></a>8、按键修饰符</h4><p>在监听键盘事件时，我们经常需要检查详细的按键。<code>Vue</code> 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在key是Enter时调用vm.submit() --&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可以直接将 <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.page-down</span>=<span class="string">&quot;onPageDown&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上述示例中，处理函数只会在 <code>$event.key</code> 等于 <code>PageDown</code> 时被调用</p><blockquote><p>常用键盘码如下</p></blockquote><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获<code>删除</code>和<code>退格</code>键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>你还可以通过全局 <code>config.keyCodes</code> 对象自定义按键修饰符别名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 可以使用v-on:keyup.f1Vue.config.keyCodes.f1 = 112</span><br></pre></td></tr></table></figure><h4 id="9、计算属性"><a href="#9、计算属性" class="headerlink" title="9、计算属性"></a>9、计算属性</h4><blockquote><p>任何复杂的逻辑，都应该使用计算属性，计算属性逻辑写在<code>computed</code>中，</p><p>只要检测到它使用到的属性有变化，就会触发重新计算</p><p>这也是<code>计算属性</code>与直接调用函数计算的区别所在</p><p>如果使用到的属性没有任何变化，<code>计算属性</code>是会直接返回缓存结果，而不会再次执行</p><p>但是如果使用的是函数的话，则依旧会继续调用</p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>西游记：价格：&#123;&#123;xyjPrice&#125;&#125; ,数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;xyjNum&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>水浒传：价格：&#123;&#123;shzPrice&#125;&#125; ,数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;shzNum&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>总价：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,        <span class="attr">data</span>: &#123;            <span class="attr">xyjPrice</span>: <span class="number">12</span>,            <span class="attr">shzPrice</span>: <span class="number">19</span>,            <span class="attr">xyjNum</span>: <span class="number">1</span>,            <span class="attr">shzNum</span>: <span class="number">1</span>        &#125;,        <span class="attr">computed</span>: &#123;            <span class="function"><span class="title">totalPrice</span>(<span class="params"></span>)</span> &#123;                <span class="keyword">return</span> <span class="built_in">this</span>.xyjPrice * <span class="built_in">this</span>.xyjNum + <span class="built_in">this</span>.shzPrice * <span class="built_in">this</span>.shzNum;            &#125;        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10、侦听属性"><a href="#10、侦听属性" class="headerlink" title="10、侦听属性"></a>10、侦听属性</h4><blockquote><p>侦听属性是一种更通用的方式来观察和响应 <code>Vue</code>实例上的数据变动</p><p>当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 <code>watch</code>，通常更好的做法是使用计算属性而不是命令式的 <code>watch</code> 回调</p></blockquote><p>还是上面的案例，如果西游记只能买3本，超过3本就提示库存已经超了，就可以使用<code>watch</code>监听了，</p><p>侦听属性里可以获取到修改前以及修改后的值，这样方便我们进行一些判断操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>西游记：价格：&#123;&#123;xyjPrice&#125;&#125; ,数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;xyjNum&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>水浒传：价格：&#123;&#123;shzPrice&#125;&#125; ,数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;shzNum&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>总价：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,        <span class="attr">data</span>: &#123;            <span class="attr">xyjPrice</span>: <span class="number">12</span>,            <span class="attr">shzPrice</span>: <span class="number">19</span>,            <span class="attr">xyjNum</span>: <span class="number">1</span>,            <span class="attr">shzNum</span>: <span class="number">1</span>,            <span class="attr">message</span>: <span class="string">&quot;&quot;</span>        &#125;,        <span class="attr">watch</span>: &#123;            <span class="function"><span class="title">xyjNum</span>(<span class="params">newVal, oldVal</span>)</span> &#123;                <span class="keyword">if</span> (newVal &gt;= <span class="number">3</span>) &#123;                    <span class="built_in">this</span>.message = <span class="string">&quot;库存不能超过3&quot;</span>;                    <span class="built_in">this</span>.xyjNum = <span class="number">3</span>;                &#125; <span class="keyword">else</span> &#123;                    <span class="built_in">this</span>.message = <span class="string">&quot;&quot;</span>;                &#125;            &#125;        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="11、过滤器"><a href="#11、过滤器" class="headerlink" title="11、过滤器"></a>11、过滤器</h4><blockquote><p>我们可以自定义局部或全局的过滤器，对一些常见的文本格式化</p><p>过滤器可以用在两个地方：<strong>双花括号插值和 <code>v-bind</code> 表达式</strong> </p><p>过滤器应该被添加在<code>JavaScript</code>表达式的尾部，由<code>管道 |</code>符号指示</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span>&#123;&#123; message | capitalize &#125;&#125;<span class="comment">&lt;!-- 在 `v-bind` 中 --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可以在一个组件的选项中定义本地的过滤器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;    &lt;ul&gt;        &lt;li v-for=&quot;name in names&quot;&gt;            &#123;&#123;name | nameFilter&#125;&#125;        &lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;&lt;script&gt;    let vm = new Vue(&#123;        el: &quot;#app&quot;,        data: &#123;            names: [&quot;可达鸭&quot;,&quot;杰尼龟&quot;,&quot;波克比&quot;,&quot;小火龙&quot;]        &#125;,        filters: &#123;            nameFilter(n) &#123;                if (n == &quot;可达鸭&quot;) &#123;                    return n + &quot;真笨&quot;;                &#125; else &#123;                    return n;                &#125;            &#125;        &#125;    &#125;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>或者在创建<code>Vue</code>实例之前全局定义过滤器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(&#x27;nameFilterG&#x27;, function (n) &#123;    if (n == &quot;可达鸭&quot;) &#123;        return n + &quot;真蠢&quot;;    &#125; else &#123;        return n;    &#125;&#125;)new Vue(&#123;  // ...&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>当全局过滤器和局部过滤器重名时，会采用局部过滤器</p></blockquote><h4 id="12、组件化"><a href="#12、组件化" class="headerlink" title="12、组件化"></a>12、组件化</h4><blockquote><p>在大型应用开发的时候，页面可以划分成很多部分，往往在不同的页面，也会有相同的部分</p><p>但是如果每个页面都独自开发，无疑会增加开发的成本，所以将相同的部分拆分成独立的组件，可以在不同的页面共享这些组件，避免重复开发</p><p>在<code>vue</code>里，所有的<code>vue</code>实例都是组件</p></blockquote><p>例如我们现在有一个点击增加次数的按钮如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>我被点击了&#123;&#123;num&#125;&#125;次<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,        <span class="attr">data</span>: &#123;            <span class="attr">num</span>: <span class="number">1</span>        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>然后我们使用组件来改造这个方法，其中组件的名字<code>counter</code>可以随便更改，且<code>data</code>必须是一个函数才可以，因此每个实例可以维护一份被返回对象的独立的拷贝，否则如果存在多个组件，修改任意一个值都会改变全部组件的值，各个值之间不是互相独立的</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>我被点击了&#123;&#123;num&#125;&#125;次<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span>    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">    // 全局声明注册一个组件    Vue.component(&quot;counter&quot;, &#123;        template: `<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>全局组件点击了</span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml">次<span class="tag">&lt;/<span class="name">button</span>&gt;</span>`,        data() &#123;            return &#123;                count: 1            &#125;        &#125;    &#125;)    // 局部声明注册一个组件    const buttonCounter = &#123;        template: `<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>局部组件点击了</span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml">次<span class="tag">&lt;/<span class="name">button</span>&gt;</span>`,        data() &#123;            return &#123;                count: 1            &#125;        &#125;    &#125;;    var vm = new Vue(&#123;        el: &quot;#app&quot;,        data: &#123;            num: 1        &#125;,        components: &#123;            &#x27;button-counter&#x27;: buttonCounter        &#125;    &#125;)</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="13、生命周期和钩子函数"><a href="#13、生命周期和钩子函数" class="headerlink" title="13、生命周期和钩子函数"></a>13、生命周期和钩子函数</h4><h5 id="beforeCreate-实例创建前"><a href="#beforeCreate-实例创建前" class="headerlink" title="beforeCreate(实例创建前)"></a><code>beforeCreate</code>(实例创建前)</h5><p>实例组件刚开始创建，元素<code>dom</code>和数据都还没有初始化</p><p>应用场景：可以在这加个<code>loading</code>事件</p><h5 id="created-实例创建后"><a href="#created-实例创建后" class="headerlink" title="created(实例创建后)"></a><code>created</code>(实例创建后)</h5><p>数据data已经初始化完成，方法也已经可以调用，但是<code>dom</code>为渲染，在这个周期里面如果进行请求是可以改变数据并渲染，由于<code>dom</code>未挂载，请求过多或者占用时间过长会导致页面线上空白</p><p>应用场景：在这结束<code>loading</code>，还做一些初始化，实现函数自执行</p><h5 id="beforeMoute-元素挂载前"><a href="#beforeMoute-元素挂载前" class="headerlink" title="beforeMoute(元素挂载前)"></a><code>beforeMoute</code>(元素挂载前)</h5><p><code>dom</code>未完成挂载，数据初始化完成，但是数据的双向绑定还是&#123;&#123;&#125;&#125;，这是因为<code>vue</code>采用了虚拟<code>dom</code>技术</p><h5 id="mouted-元素挂载后"><a href="#mouted-元素挂载后" class="headerlink" title="mouted(元素挂载后)"></a><code>mouted</code>(元素挂载后)</h5><p>数据和<code>dom</code>都完成挂载，在上一个周期占位的数据把值渲染进去，一般请求会放在这个地方，因为这边请求改变数据之后刚好能渲染</p><h5 id="beforeUpdate-实例更新前"><a href="#beforeUpdate-实例更新前" class="headerlink" title="beforeUpdate(实例更新前)"></a><code>beforeUpdate</code>(实例更新前)</h5><p>只要是页面数据改变了都会触发，数据更新之前，页面数据还是原来的数据，当你请求赋值一个数据的时候就会执行这个周期，如果没有数据改变不执行</p><h5 id="updated-实例更新后"><a href="#updated-实例更新后" class="headerlink" title="updated(实例更新后)"></a><code>updated</code>(实例更新后)</h5><p>只要是页面数据改变了都会触发，数据更新完毕，页面的数据是更新完成的，<code>beforeUpdated</code>和<code>updated</code>要谨慎使用，因为页面更新数据的时候都会触发，在这里操作数据很影响性能和死循环</p><h5 id="beforeDestory-实例销毁前"><a href="#beforeDestory-实例销毁前" class="headerlink" title="beforeDestory(实例销毁前)"></a><code>beforeDestory</code>(实例销毁前)</h5><p>实例销毁之前调用，在这一步，实例仍然完全可用</p><h5 id="destory-实例销毁后"><a href="#destory-实例销毁后" class="headerlink" title="destory(实例销毁后)"></a><code>destory</code>(实例销毁后)</h5><p><code>vue</code>实例销毁后调用，调用后，<code>vue</code>实例指示的所有内容都会解除绑定，所有的事件监听器都会被移除，所有的子实例也会被销毁</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span>    <span class="tag">&lt;<span class="name">head</span>&gt;</span>        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue的生命周期示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">body</span>&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>            &#123;&#123;name&#125;&#125;        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;destory()&quot;</span>&gt;</span>销毁实例<span class="tag">&lt;/<span class="name">button</span>&gt;</span>        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript">            <span class="keyword">const</span> vm=<span class="keyword">new</span> Vue(&#123;                <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,                <span class="attr">data</span>:&#123;                    <span class="attr">name</span>:<span class="string">&#x27;xx&#x27;</span>,                    <span class="attr">age</span>:<span class="number">18</span>                &#125;,                <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;                    <span class="built_in">console</span>.log(<span class="string">&#x27;============实例创建前=============&#x27;</span>);                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);    <span class="comment">//undefined                    console.log(this.$data);//undefined                &#125;,                created()&#123;                    console.log(&#x27;============实例创建后=============&#x27;);                    console.log(this.$el);                    console.log(JSON.stringify(this.$data));                &#125;,                beforeMount()&#123;                    console.log(&#x27;============元素挂载前=============&#x27;);                    console.log(this.$el);                        console.log(JSON.stringify(this.$data));                &#125;,                mounted()&#123;                    console.log(&#x27;============元素挂载后=============&#x27;);                    console.log(this.$el);                        console.log(JSON.stringify(this.$data));                &#125;,                beforeUpdate()&#123;                    console.log(&#x27;============实例更新前=============&#x27;);                    console.log(this.$el);                        console.log(JSON.stringify(this.$data));                &#125;,                updated()&#123;                    console.log(&#x27;============实例更新后=============&#x27;);                    console.log(this.$el);                        console.log(JSON.stringify(this.$data));                &#125;,                beforeDestroy()&#123;                    console.log(&#x27;============实例销毁前=============&#x27;);                    console.log(this.$el);                        console.log(JSON.stringify(this.$data));                &#125;,                destroyed()&#123;                    console.log(&#x27;============实例销毁后=============&#x27;);                    console.log(this.$el);                        console.log(JSON.stringify(this.$data));                &#125;            &#125;);            function destory()&#123;                vm.$destroy();            &#125;        </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="14、使用Vue脚手架模块化开发"><a href="#14、使用Vue脚手架模块化开发" class="headerlink" title="14、使用Vue脚手架模块化开发"></a>14、使用Vue脚手架模块化开发</h4><blockquote><p>全局安装<code>webpack</code></p><p>命令：<code>npm install webpack -g</code></p></blockquote><blockquote><p>全局安装<code>vue脚手架</code></p><p>命令：<code>npm install -g @vue/cli-init</code></p></blockquote><blockquote><p>使用脚手架初始化一个叫<code>vue-demo</code>的项目</p><p>命令：<code>vue init webpack vue-demo</code></p></blockquote><blockquote><p>运行项目</p><p>命令：<code>npm run dev</code></p></blockquote><p>需要注意的两点：</p><ul><li>如果提示<code>vue</code>不是内部或外部命令，则在<code>Nodejs</code>目录下全局搜索<code>vue.cmd</code>，将当前文件所在目录加入到<code>path</code>环境变量中即可</li><li>如果使用<code>vscode</code>运行则会报错，因为<code>powershell</code>禁止执行脚本文件，所以将<code>vscode</code>的命令方式修改为<code>cmd</code>或直接使用<code>cmd</code>窗口进行执行命令即可</li></ul><p><img src="/img/post/2020101902/001.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins避坑配置</title>
      <link href="/2020/07/02/2020070200/"/>
      <url>/2020/07/02/2020070200/</url>
      
        <content type="html"><![CDATA[<h3 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h3><blockquote><p><code>Linux</code>镜像，这里我选择的是<code>CentOS7官方精简版</code>，特点是占用空间小</p><p>链接：<a href="https://mirrors.aliyun.com/centos/7.8.2003/isos/x86_64/CentOS-7-x86_64-Minimal-2003.iso">https://mirrors.aliyun.com/centos/7.8.2003/isos/x86_64/CentOS-7-x86_64-Minimal-2003.iso</a></p></blockquote><blockquote><p><code>虚拟机</code>软件，这里我选择的是<code>VMWare15</code></p><p><code>SSH</code>连接工具，这里我选择的是<code>XShell6</code></p></blockquote><h3 id="2、环境配置"><a href="#2、环境配置" class="headerlink" title="2、环境配置"></a>2、环境配置</h3><p>此处省略<code>VMWare</code>与<code>CentOS</code>的安装步骤，直接从<code>Linux</code>中开始配置环境</p><p>1、配置网卡信息为静态IP地址，且开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑ifcfg-ens33 按i进入编辑模式</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将内容全部替换为如下信息 注意修改IP和网关为自己的</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=IP地址</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=网关地址</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按esc退出编辑模式 输入如下命令保存并退出</span></span><br><span class="line">:wq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启网卡</span></span><br><span class="line">service network restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为是最小化安装 此时可用命令ip addr查看分配网卡情况</span></span><br><span class="line">ip addr</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关机 配置网络为桥接模式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机联网后安装ifconfig功能</span></span><br><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure><p>2、此时我们可以使用<code>XShell</code>连接到我们的虚拟机了，接下来准备需要的软件</p><blockquote><p><code>Maven3.6.3</code>：<a href="https://cloud.189.cn/t/YVr6vuBR7Fbq%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9A%60u62v%60%EF%BC%89">https://cloud.189.cn/t/YVr6vuBR7Fbq（访问码：`u62v`）</a></p><p><code>Jenkins</code>：<a href="https://cloud.189.cn/t/QnMjeqfmiAf2%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9A%60tc7l%60%EF%BC%89">https://cloud.189.cn/t/QnMjeqfmiAf2（访问码：`tc7l`）</a></p><p><code>JDK8</code>：<a href="https://cloud.189.cn/t/URzqMjZR3MVb%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9A%608zp2%60%EF%BC%89">https://cloud.189.cn/t/URzqMjZR3MVb（访问码：`8zp2`）</a></p></blockquote><p>3、将上述软件准备好后，我们使用<code>Xftp</code>将所有下载的文件上传到<code>CentOS</code>中任意目录下，这里我选择的是<code>/root</code>目录下，然后使用命令进行解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>4、将目录名修改为<code>JDK8</code>、<code>maven</code>，并新建文件夹<code>repo</code>用于存放<code>maven</code>下载的依赖<code>jar</code></p><blockquote><p>修改<code>maven/conf/settings.xml</code>配置文件，修改内容如下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/root/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、现在我们需要将<code>maven</code>和<code>JDK</code>加入到环境变量中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改profile文件</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文件最后加上如下内容</span></span><br><span class="line">export JAVA_HOME=/root/JDK8</span><br><span class="line">export MAVEN_HOME=/root/maven</span><br><span class="line">export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存退出后执行命令保存配置文件</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>6、执行命令安装<code>git</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 联网安装git</span></span><br><span class="line">yum install git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看git安装位置</span></span><br><span class="line">whereis git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果如下</span></span><br><span class="line">git: /usr/bin/git /usr/share/man/man1/git.1.gz</span><br></pre></td></tr></table></figure><p>7、因<code>jenkins</code>默认端口是<code>8080</code>，所以我们要放行<code>8080</code>端口，否则无法访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑/etc/sysconfig目录下iptables文件 如没有该文件 使用如下命令安装</span></span><br><span class="line">yum install -y iptables </span><br><span class="line">yum install iptables-services</span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables新增内容如下 端口为jenkins启动端口</span></span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果依旧不能访问 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>8、启动<code>jenkins</code>，默认端口是<code>8080</code>，即可看到解锁<code>jenkins</code>界面了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 前台启动命令</span></span><br><span class="line">java -jar jenkins.war</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台启动命令</span></span><br><span class="line">nohup java -jar jenkins.war &amp;</span><br></pre></td></tr></table></figure><p><img src="/img/post/2020070200/001.png"></p><p>使用如下命令查看<code>管理员密码</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/.jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p>然后安装插件、新建用户的名字跟密码，最后进入到<code>jenkins</code>的首页</p><p><img src="/img/post/2020070200/002.png"></p><p>9、因为<code>jenkins</code>默认的插件下载速度极其缓慢，我们先将下载源修改为<code>国内源</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入jenkins工作目录中的updates目录下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> jenkins工作目录可参考第一步管理员密码存放的路径</span></span><br><span class="line">cd /root/.jenkins/updates/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑default.json</span></span><br><span class="line">vi default.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按i进入编辑模式 输入: 后面粘贴如下内容</span></span><br><span class="line">1,$s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 继续输入: 粘贴如下内容</span></span><br><span class="line">1,$s/http:\/\/www.google.com/https:\/\/www.baidu.com/g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入:wq保存并退出</span></span><br><span class="line">:wq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 浏览器输入如下地址 重启jenkins</span></span><br><span class="line">ip:端口/restart</span><br></pre></td></tr></table></figure><p>10、安装<code>maven插件</code>并将页面进行<code>完全汉化</code></p><p><img src="/img/post/2020070200/003.png"></p><p>首先安装<code>maven插件</code></p><p><img src="/img/post/2020070200/004.png"></p><p>然后安装汉化插件</p><p><img src="/img/post/2020070200/005.png"></p><p>安装完成后返回首页，进入到<code>配置系统</code>页面</p><p><img src="/img/post/2020070200/006.png"></p><p>找到<code>Locale</code>选项，输入<code>zh_US</code>，这里并不是输入错误，一定要是<code>zh_US</code>才能完全汉化</p><p><img src="/img/post/2020070200/007.png"></p><p>应用保存后，地址栏输入<code>restart</code>重启<code>jenkins</code></p><p>11、重启完成后，点击<code>系统管理-全局工具配置</code></p><p><img src="/img/post/2020070200/008.png"></p><p>按如下图配置<code>maven</code>和<code>JDK</code>的路径</p><p><img src="/img/post/2020070200/009.png"></p><p>输入如下命令 查看<code>git</code>安装位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis git</span><br></pre></td></tr></table></figure><p>将前半部分路径配置到<code>git</code>中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git: /usr/bin/git /usr/share/man/man1/git.1.gz</span><br></pre></td></tr></table></figure><p><img src="/img/post/2020070200/010.png"></p><p>配置<code>maven</code>路径，之后点击<code>应用-保存</code></p><p><img src="/img/post/2020070200/011.png"></p><h3 id="3、新建任务"><a href="#3、新建任务" class="headerlink" title="3、新建任务"></a>3、新建任务</h3><p>1、点击首页的<code>新建任务</code></p><p><img src="/img/post/2020070200/012.png"></p><p>2、新建一个<code>maven</code>任务，名字随便起，点击<code>确定</code></p><p><img src="/img/post/2020070200/013.png"></p><p>3、在<code>源码管理</code>中输入你的<code>项目地址</code>，以及添加该项目网站的账号密码，例如使用的如果是<code>码云</code>，就输入码云的账号密码，输入的是<code>github</code>那就输入github的账号密码，填写成功后记得在<code>Credentials</code>选一下</p><p>刚刚录入的账号密码选项</p><p><img src="/img/post/2020070200/014.png"></p><p>4、设置<code>maven</code>的打包命令</p><p><img src="/img/post/2020070200/015.png"></p><p>5、<code>应用-保存</code>，回到首页后点击<code>立即构建</code>，我们可以看到控制台输出<code>BUILD SUCCESS</code></p><p><img src="/img/post/2020070200/016.png"></p><p>6、将控制台输出的jar包位置记录下来，即上方蓝色部分的路径</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/repo/starFire/starFire-api/0.0.1-SNAPSHOT/starFire-api-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></blockquote><p>到这里我们就完成了将项目从<code>git</code>地址下载并打包放到指定位置的操作了</p><h3 id="4、启动项目"><a href="#4、启动项目" class="headerlink" title="4、启动项目"></a>4、启动项目</h3><p>现在我们已经有<code>jar</code>包了，接下来只需要让<code>jenkins</code>帮助我们启动项目，就完成了自动部署的功能了</p><p><img src="/img/post/2020070200/017.png"></p><p>选择使用<code>执行shell</code></p><p><img src="/img/post/2020070200/018.png"></p><p>将如下的<code>shell脚本</code>修改后输入，<code>应用并保存</code>即可</p><p>需要注意的修改的点：</p><p>修改<code>JAR_NAME</code>、<code>JAR_PATH</code>、<code>JAR_WORK_PATH</code></p><p>可参考我上面获取到的<code>jar</code>路径修改</p><blockquote><p>/root/repo/starFire/starFire-api/0.0.1-SNAPSHOT/starFire-api-0.0.1-SNAPSHOT.jar</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">服务名称</span></span><br><span class="line">SERVER_NAME=xinghuo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 源jar路径,mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java -jar 命令执行</span>  </span><br><span class="line">JAR_NAME=starFire-api-0.0.1-SNAPSHOT</span><br><span class="line"><span class="meta">#</span><span class="bash"> 源jar路径</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash">/usr/<span class="built_in">local</span>/jenkins_home/workspace---&gt;jenkins 工作目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">demo 项目目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">target 打包生成jar包的目录</span></span><br><span class="line">JAR_PATH=/root/repo/starFire/starFire-api/0.0.1-SNAPSHOT/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打包完成之后，把jar包移动到运行jar包的目录---&gt;work_daemon，work_daemon这个目录需要自己提前创建</span></span><br><span class="line">JAR_WORK_PATH=/root/repo/starFire/starFire-api/0.0.1-SNAPSHOT/</span><br><span class="line"> </span><br><span class="line">echo &quot;查询进程id--&gt;$SERVER_NAME&quot;</span><br><span class="line">PID=`ps -ef | grep &quot;$SERVER_NAME&quot; |grep jar| awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">echo &quot;得到进程ID：$PID&quot;</span><br><span class="line">echo &quot;结束进程&quot;</span><br><span class="line">for id in $PID</span><br><span class="line">do</span><br><span class="line">kill -9 $id  </span><br><span class="line">echo &quot;killed $id&quot;  </span><br><span class="line">done</span><br><span class="line">echo &quot;结束进程完成&quot;</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">复制jar包到执行目录</span></span><br><span class="line">echo &quot;复制jar包到执行目录:cp $JAR_PATH/$JAR_NAME.jar $JAR_WORK_PATH&quot;</span><br><span class="line">cp $JAR_PATH/$JAR_NAME.jar $JAR_WORK_PATH</span><br><span class="line">echo &quot;复制jar包完成&quot;</span><br><span class="line">cd $JAR_WORK_PATH</span><br><span class="line"><span class="meta">#</span><span class="bash">修改文件权限</span></span><br><span class="line">chmod 755 $JAR_NAME.jar</span><br><span class="line"> </span><br><span class="line">BUILD_ID=dontKillMe nohup java -jar  $JAR_NAME.jar  &amp;</span><br></pre></td></tr></table></figure><p>项目已经启动成功了</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python笔记</title>
      <link href="/2020/06/22/2020062200/"/>
      <url>/2020/06/22/2020062200/</url>
      
        <content type="html"><![CDATA[<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>在 Python 的数字有 4 种数据类型，分别为：</p><ul><li>int（有符号整型）</li><li>long（长整型）</li><li>float（浮点型）</li><li>complex（复数）</li></ul><p>可以通过函数<code>type()</code>获取当前的数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">123</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">123.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;123&quot;</span>))</span><br></pre></td></tr></table></figure><p>上面示例的运行结果如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">float</span>&#x27;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>isinstance()</code>函数可以判断一个对象是否是一个已知的具体类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">object</span>, classinfo)</span><br></pre></td></tr></table></figure><blockquote><p>object——实例对象</p><p>classinfo——可以是直接或间接类名，基本类型或者由他们组成的元组</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">123</span>, <span class="built_in">int</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">123.0</span>, <span class="built_in">float</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;123&#x27;</span>, <span class="built_in">str</span>))</span><br></pre></td></tr></table></figure><p>上面示例的运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>整型的意思就是整数，例如：-1、-10、1、23333</p><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><ul><li>十进制：正常写就 ok ，所有的数字都默认是十进制的。</li><li>二进制：在最前面添加 <code>0b</code> 的前缀，并且组成部分必须只能由 0 或者 1 组成，如： 0b10101010101</li><li>八进制：在最前面添加 <code>0o</code> 的前缀，并且组成部分必须只能有 0~7 的数字组成，如：0o12345670</li><li>十六进制：在最前面添加 <code>0x</code> 的前缀，并且组成部分由 0<del>9 和 A</del>F 组成，如：0xdb273dc（注意：字母大小写不做区分，也可以写成 0xDB273DC ）</li></ul><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>简单讲，浮点数就是带小数点的数字，且浮点数只能是十进制的数字</p><p>同样，分数也是浮点数的一种，如：0.5、0.3333333333333333等</p><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><ul><li>有理数：指两个整数的比。简单讲就是整数 + 有限或者无限循环小数</li><li>无理数：简单讲就是无限不循环小数</li></ul><blockquote><p>有理数和无理数加在一起成为实数，实数之外还有一种数叫复数</p><p>复数：z = a + bi（a、b均为实数）的数称为复数，其中a称为实部，b称为虚部，i称为虚数单位</p></blockquote><p>在 Python 中，复数的表现方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>+<span class="number">1j</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">1</span>+<span class="number">1j</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>+<span class="number">1j</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">complex</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>那么在python中如何获取实部和虚部呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="number">2.46</span>+<span class="number">1.37j</span>).real)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((<span class="number">2.46</span>+<span class="number">1.37j</span>).imag)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.46</span></span><br><span class="line"><span class="number">1.37</span></span><br></pre></td></tr></table></figure><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>布尔值只有两个值，true和false，常用于各种逻辑判断中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">123</span> == <span class="number">123.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span> == <span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： <code>==</code> 只能用来做数值的比较，并不会比较当前的数据类型，所以 123 和 123.0 是相等的。而 ‘123’ 不等于 123 则是因为 ‘123’ 是字符串，不能数值运算，而 123 是数字</p></blockquote><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是由字符组成的一串有限序列，如：’homra’、”homra”</p><p><strong>注意：</strong> ” 或者 “” 表示的是空字符串，空字符串和 null 是不一样的</p><blockquote><p>字符串外面的包裹可以是单引号，也可以是双引号，需要注意的是单引号和双引号一定是成对出现的，不可混合使用</p></blockquote><p>如果非要组合使用，我们可以看如下案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;小明说：&quot;吃了吗？&quot;&#x27;</span>)</span><br><span class="line">// 输出结果：小明说：<span class="string">&quot;吃了吗？&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;小明说：\&quot;吃了吗？\&quot;&quot;</span>)</span><br><span class="line">// 输出结果：小明说：<span class="string">&quot;吃了吗？&quot;</span></span><br></pre></td></tr></table></figure><p>还可以使用连续三个单引号或者双引号，它可以使得中间被包裹起来的一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是一个多行字符串的实例</span></span><br><span class="line"><span class="string">多行字符串可以使用制表符</span></span><br><span class="line"><span class="string">TAB ( \t )。</span></span><br><span class="line"><span class="string">也可以使用换行符 [ \n ]。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是一个多行字符串的实例</span><br><span class="line">多行字符串可以使用制表符</span><br><span class="line">TAB (    )。</span><br><span class="line">也可以使用换行符 [</span><br><span class="line"> ]。</span><br></pre></td></tr></table></figure><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>简单说，就是将字符原有的含义转换了</p><p>Python支持的转义字符如下：</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>\</td><td>反斜杠符号</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\&quot;</td><td>双引号</td></tr><tr><td>\a</td><td>响铃</td></tr><tr><td>\b</td><td>退格(Backspace)</td></tr><tr><td>\000</td><td>空</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\v</td><td>纵向制表符</td></tr><tr><td>\t</td><td>横向制表符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\oyy</td><td>八进制数，yy 代表的字符，例如：\o12 代表换行，其中 o 是字母，不是数字 0</td></tr><tr><td>\xyy</td><td>十六进制数，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td>\other</td><td>其它的字符以普通格式输出</td></tr></tbody></table><p>如果想打印出字符\t，而并不是希望当作横向制表符进行处理，该怎么办？</p><p>可使用如下两种解决方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;横向制表符：\\t&quot;</span>)</span><br><span class="line">// 输出结果：横向制表符：\t</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;横向制表符：\t&quot;</span>)</span><br><span class="line">// 输出结果：横向制表符：\t</span><br></pre></td></tr></table></figure><ul><li>第一种是在转义符号前面再加一个转义符号 <code>\</code> ，负负得正。</li><li>第二种是在这个字符串的外面加一个 r （大小写均可）</li></ul><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p><code>len()</code>获取字符串长度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;I like Python!&#x27;</span>))</span><br><span class="line">// 输出结果：<span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;I like 小明!&#x27;</span>))</span><br><span class="line">// 输出结果：<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">// 输出结果：<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">// 输出结果：<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line">// 输出结果：<span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>+</code>字符串拼接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a + b 输出结果：&quot;</span>, a + <span class="string">&quot; &quot;</span> + b)</span><br><span class="line">// a + b 输出结果： Hello Python</span><br></pre></td></tr></table></figure><p><code>*</code>重复输出字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a * 2 输出结果：&quot;</span>, a * <span class="number">2</span>)</span><br><span class="line">// a * <span class="number">2</span> 输出结果： HelloHello</span><br></pre></td></tr></table></figure><p>通过索引获取字符串中的字符，第一个字符的索引为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a[1] 输出结果：&quot;</span>, a[<span class="number">1</span>])</span><br><span class="line">// a[<span class="number">1</span>] 输出结果： e</span><br></pre></td></tr></table></figure><p><code>[:]</code>截取字符串，遵循左闭右开原则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a[1:4] 输出结果：&quot;</span>, a[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line">// a[<span class="number">1</span>:<span class="number">4</span>] 输出结果： ell</span><br></pre></td></tr></table></figure><p><code>in</code>包含，可以判断一个字符串中是否包含指定的字符串，并返回true或false</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;H&quot;</span> <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;H 在变量 a 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;H 不在变量 a 中&quot;</span>)</span><br><span class="line"></span><br><span class="line">// H 在变量 a 中</span><br></pre></td></tr></table></figure><p><code>not in</code>不包含，返回的同样是布尔值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;M&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;M 不在变量 a 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;M 在变量 a 中&quot;</span>)</span><br><span class="line"></span><br><span class="line">// M 不在变量 a 中</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>在 Python 中使用变量，有一个和 Java 最大的不同是无需先声明，直接在赋值的时候就完成了声明</p><p>如果我们直接使用一个没有赋值的变量，会直接报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;小红&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line">// 输出结果：</span><br><span class="line">小红</span><br></pre></td></tr></table></figure><p>如果我们不在需要这个变量，可以通过Python提供的del来删除这个变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line">// 输出结果：删除后因为没有这个变量 所以报错了</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/Development/Projects/python-learning/base-variable/Demo.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">NameError: name <span class="string">&#x27;name&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h4 id="变量类型转换"><a href="#变量类型转换" class="headerlink" title="变量类型转换"></a>变量类型转换</h4><p>如果不同类型的变量进行拼接，会怎么样呢？</p><p>例如我们使用一个字符串加上一个整型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;123&#x27;</span> + <span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">// 输出结果：</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/Development/Projects/python-learning/base-variable/Demo.py&quot;</span>, line <span class="number">17</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;123&#x27;</span> + <span class="number">123</span>)</span><br><span class="line">TypeError: can only concatenate <span class="built_in">str</span> (<span class="keyword">not</span> <span class="string">&quot;int&quot;</span>) to <span class="built_in">str</span></span><br></pre></td></tr></table></figure><p>这句话的含义是告诉我们，字符串只能连接一个字符串，不能连接一个整型</p><p>所以我们需要统一变量类型，这里涉及到类型的强制转换</p><ul><li>float() 函数，将其他类型数据转为浮点数</li><li>str() 函数，将其他类型数据转为字符串</li><li>int() 函数，将其他类型数据转为整型</li></ul><p>所以我们可以把代码修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;123&#x27;</span> + <span class="built_in">str</span>(<span class="number">123</span>))</span><br><span class="line">// 输出结果：</span><br><span class="line"><span class="number">123123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;123&#x27;</span>) + <span class="number">123</span>)</span><br><span class="line">// 输出结果：</span><br><span class="line"><span class="number">246</span></span><br></pre></td></tr></table></figure><p>如果我们将一个整型和一个浮点数进行相加会怎样？</p><p>这里涉及到了类型的提升：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">123.5</span> + <span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">// 输出结果：</span><br><span class="line"><span class="number">246.5</span></span><br></pre></td></tr></table></figure><p>如果是一个浮点型强转成整型会怎样？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">123.7</span>))</span><br><span class="line"></span><br><span class="line">// 输出结果：</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>从示例可以看出，强制类型降级的时候，会直接抹去末尾的小数，并不是四舍五入</p><p>如果希望四舍五入，有如下两种方式可以实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 加<span class="number">0.5</span>实现四舍五入</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">123.7</span> + <span class="number">0.5</span>))</span><br><span class="line">// 输出结果：</span><br><span class="line"><span class="number">124</span></span><br><span class="line"></span><br><span class="line">// 使用<span class="built_in">round</span>()函数来实现</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(<span class="number">123.5</span>)))</span><br><span class="line">// 输出结果：</span><br><span class="line"><span class="number">124</span></span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符可分以下几类：</p><ul><li>算术运算符</li><li>比较运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>成员运算符</li><li>身份运算符</li></ul><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>包含我们常用的加减乘除，也包含程序中常见的取模、取幂、取整除等</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>%</td><td>取模-返回除法的余数</td></tr><tr><td>**</td><td>幂-返回x的y次幂</td></tr><tr><td>//</td><td>取整数-向下取接近除数的整数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1. c 的值为：&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">c = a - b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2. c 的值为：&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">c = a * b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3. c 的值为：&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">c = a / b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;4. c 的值为：&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">c = a % b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5. c 的值为：&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">c = a ** b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;6. c 的值为：&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变 a 和 b 的值</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">c = a // b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;7. c 的值为：&quot;</span>, c)</span><br></pre></td></tr></table></figure><p>计算结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> c 的值为： <span class="number">15</span></span><br><span class="line"><span class="number">2.</span> c 的值为： -<span class="number">5</span></span><br><span class="line"><span class="number">3.</span> c 的值为： <span class="number">50</span></span><br><span class="line"><span class="number">4.</span> c 的值为： <span class="number">0.5</span></span><br><span class="line"><span class="number">5.</span> c 的值为： <span class="number">5</span></span><br><span class="line"><span class="number">6.</span> c 的值为： <span class="number">9765625</span></span><br><span class="line"><span class="number">7.</span> c 的值为： <span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果是不同类型的数据进行运算，会发生隐式类型转换</p><p>类型转换的规则由低等到高等转换</p><p><code>bool</code>(布尔) &lt; <code>int</code>(整型) &lt; <code>float</code>(浮点型) &lt; <code>complex</code>(复数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1.5</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c 的值为：&quot;</span>, c, <span class="string">&quot;，c 的类型为：&quot;</span>, <span class="built_in">type</span>(c))</span><br><span class="line"></span><br><span class="line">d = <span class="literal">True</span></span><br><span class="line">e = c + d</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e 的值为：&quot;</span>, e, <span class="string">&quot;，e 的类型为：&quot;</span>, <span class="built_in">type</span>(e))</span><br><span class="line"></span><br><span class="line">f = <span class="number">2</span> + <span class="number">4j</span></span><br><span class="line">g = e + f</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;g 的值为：&quot;</span>, g, <span class="string">&quot;，g 的类型为：&quot;</span>, <span class="built_in">type</span>(g))</span><br></pre></td></tr></table></figure><p>计算结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c 的值为： <span class="number">2.5</span> ，c 的类型为： &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">float</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">e</span> 的值为： 3.5 ，<span class="title">e</span> 的类型为： &lt;<span class="title">class</span> &#x27;<span class="title">float</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">g</span> 的值为： (<span class="params"><span class="number">5.5</span>+<span class="number">4j</span></span>) ，<span class="title">g</span> 的类型为： &lt;<span class="title">class</span> &#x27;<span class="title">complex</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>常用的内置函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>abs(x)</td><td>返回一个数的绝对值。实参可以是整数或浮点数。如果实参是一个复数，返回它的模</td></tr><tr><td>complex([real[, imag]])</td><td>返回值为 real + imag*1j 的复数，或将字符串或数字转换为复数</td></tr><tr><td>divmod(a, b)</td><td>它将两个（非复数）数字作为实参，并在执行整数除法时返回一对商和余数</td></tr><tr><td>float([x])</td><td>返回从数字或字符串 x 生成的浮点数</td></tr><tr><td>pow(x, y[, z])</td><td>返回 x 的 y 次幂；如果 z 存在，则对 z 取余（比直接 pow(x, y) % z 计算更高效）。两个参数形式的 pow(x, y) 等价于幂运算符： x**y</td></tr><tr><td>round(number[, ndigits])</td><td>返回 number 舍入到小数点后 ndigits 位精度的值。 如果 ndigits 被省略或为 None，则返回最接近输入值的整数</td></tr><tr><td>sum(iterable[, start])</td><td>从 start 开始自左向右对 iterable 中的项求和并返回总计值。 start 默认为 0。 iterable 的项通常为数字，开始值则不允许为字符串</td></tr><tr><td>bin(x)</td><td>将一个整数转变为一个前缀为“0b”的二进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转变为一个前缀为“0o”的八进制字符串</td></tr><tr><td>hex(x)</td><td>将整数转换为以“0x”为前缀的小写十六进制字符串</td></tr><tr><td>chr(i)</td><td>返回 Unicode 码位为整数 i 的字符的字符串格式</td></tr><tr><td>ord(c)</td><td>对表示单个 Unicode 字符的字符串，返回代表它 Unicode 码点的整数</td></tr><tr><td>bool([x])</td><td>返回一个布尔值，True 或者 False</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;11. -1 的绝对值为：&quot;</span>, <span class="built_in">abs</span>(-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12. 创建的复数为：&quot;</span>, <span class="built_in">complex</span>(<span class="number">1</span>, -<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;13. 商和余数为：&quot;</span>, <span class="built_in">divmod</span>(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;14. 浮点型转换：&quot;</span>, <span class="built_in">float</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;15. 10的3次幂为：&quot;</span>, <span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;16. 四舍五入为：&quot;</span>, <span class="built_in">round</span>(<span class="number">5.5</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;17. 集合求和结果为：&quot;</span>, <span class="built_in">sum</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;18. 整数20的二进制为：&quot;</span>, <span class="built_in">bin</span>(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;19. 整数20的八进制为：&quot;</span>, <span class="built_in">oct</span>(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;20. 整数20的十六进制为：&quot;</span>, <span class="built_in">hex</span>(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;21. Unicode 为 97 的字符串：&quot;</span>, <span class="built_in">chr</span>(<span class="number">97</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;22. 字符串 a 的 Unicode 码：&quot;</span>, <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;23. 123 的 boolean 值为：&quot;</span>, <span class="built_in">bool</span>(<span class="number">123</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;24. 空字符串的 boolean 的值为：&quot;</span>, <span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11.</span> -<span class="number">1</span> 的绝对值为： <span class="number">1</span></span><br><span class="line"><span class="number">12.</span> 创建的复数为： (<span class="number">1</span>-<span class="number">2j</span>)</span><br><span class="line"><span class="number">13.</span> 商和余数为： (<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">14.</span> 浮点型转换： <span class="number">1.0</span></span><br><span class="line"><span class="number">15.</span> <span class="number">10</span>的<span class="number">3</span>次幂为： <span class="number">1000</span></span><br><span class="line"><span class="number">16.</span> 四舍五入为： <span class="number">6</span></span><br><span class="line"><span class="number">17.</span> 集合求和结果为： <span class="number">10</span></span><br><span class="line"><span class="number">18.</span> 整数<span class="number">20</span>的二进制为： <span class="number">0b10100</span></span><br><span class="line"><span class="number">19.</span> 整数<span class="number">20</span>的八进制为： <span class="number">0o24</span></span><br><span class="line"><span class="number">20.</span> 整数<span class="number">20</span>的十六进制为： <span class="number">0x14</span></span><br><span class="line"><span class="number">21.</span> Unicode 为 <span class="number">97</span> 的字符串： a</span><br><span class="line"><span class="number">22.</span> 字符串 a 的 Unicode 码： <span class="number">97</span></span><br><span class="line"><span class="number">23.</span> <span class="number">123</span> 的 boolean 值为： <span class="literal">True</span></span><br><span class="line"><span class="number">24.</span> 空字符串的 boolean 的值为： <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>从字面意思来理解，比较运算符就是比较两个数值或者字符串类型的数据，返回一个布尔值</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>等于，比较对象是否相等</td></tr><tr><td>!=</td><td>不等于，比较两个对象是否不相等</td></tr><tr><td>&gt;</td><td>大于，返回x是否大于y</td></tr><tr><td>&lt;</td><td>小于，返回x是否小于y</td></tr><tr><td>&gt;=</td><td>大于等于，返回x是否大于等于y</td></tr><tr><td>&lt;=</td><td>小于等于，返回x是否小于等于y</td></tr></tbody></table><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>Python中，使用=表示赋值，也可以使用+=、-=对赋值方式进行简化</p><p>常见的赋值表达式如下：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>赋值运算符</td></tr><tr><td>+=</td><td>加法赋值运算符</td></tr><tr><td>-=</td><td>减法赋值运算符</td></tr><tr><td>*=</td><td>乘法赋值运算符</td></tr><tr><td>/=</td><td>除法赋值运算符</td></tr><tr><td>%=</td><td>取模赋值运算符</td></tr><tr><td>**=</td><td>幂赋值运算符</td></tr><tr><td>//=</td><td>取整除赋值运算符</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>逻辑运算符有三种，分别是与、或、非</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>逻辑”与”运算符，只有当and两边都是真，结果才是真</td></tr><tr><td>or</td><td>逻辑”或”运算符，只要or任意一边是真，结果就是真</td></tr><tr><td>not</td><td>逻辑”非”运算符，反转逻辑值</td></tr></tbody></table><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>成员运算符用来判断在指定的序列中有没有找到目标值，这个序列可以是字符串、列表和元祖</p><ul><li>in ： 如果在指定的序列中找到值返回<code> True</code>，否则返回 <code>False</code></li><li>not in ： 如果在指定的序列中没有找到值返回 <code>True</code>，否则返回<code> False</code></li></ul><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><p>身份运算符用于比较两个对象的存储单元</p><ul><li>is ： <code>is </code>是判断两个标识符是不是引用自一个对象</li><li>is not ： <code>is not </code>是判断两个标识符是不是引用自不同对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a 和 b 有相同的标识&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a 和 b 没有相同的标识&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">id</span>(a) == <span class="built_in">id</span>(b):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a 和 b 有相同的标识&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a 和 b 没有相同的标识&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改变量 b 的值</span></span><br><span class="line">b = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a 和 b 有相同的标识&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a 和 b 没有相同的标识&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">not</span> b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a 和 b 没有相同的标识&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a 和 b 有相同的标识&quot;</span>)</span><br></pre></td></tr></table></figure><p>注意：<code>id()</code>函数用于获取对象内存地址</p><p>输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a 和 b 有相同的标识</span><br><span class="line">a 和 b 有相同的标识</span><br><span class="line">a 和 b 没有相同的标识</span><br><span class="line">a 和 b 没有相同的标识</span><br></pre></td></tr></table></figure><blockquote><p>如果两个数值一样的变量，Python并不会重新开辟内存空间，而是会复用已有的内存空间</p></blockquote><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>顺序结构是指做一件事是有顺序性的，按照操作步骤一步一步完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width = <span class="built_in">input</span>(<span class="string">&quot;请输入长方形的宽：&quot;</span>)</span><br><span class="line">height = <span class="built_in">input</span>(<span class="string">&quot;请输入长方形的高：&quot;</span>)</span><br><span class="line">area = <span class="built_in">int</span>(width) * <span class="built_in">int</span>(height)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;长方形的面积为：&quot;</span>, area)</span><br></pre></td></tr></table></figure><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p>Python条件语句是通过一条或多条语句的执行结果(true或false)，来决定执行的代码块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">weight = <span class="built_in">input</span>(<span class="string">&quot;请输入您当前的体重：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">float</span>(weight) &gt;= <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你和加菲猫一样肥！！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">float</span>(weight) &gt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你的身材真棒！！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;有点瘦哦，要多吃肉！！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>循环结构就是一直做某件事，直到满足某种条件，一定要给出跳出循环的条件，否则就是死循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">happy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> happy &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;学习使我快乐，快乐 + 1，当前快乐值为：&quot;</span>, happy)</span><br><span class="line">    happy += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我不快乐了&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环的使用格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure><p>这里的<sequence> 可以是我们学过的字符串，也可以是我们将要学的列表，元组，字典等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="string">&quot;Python&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(index)</span><br></pre></td></tr></table></figure><p>输出的结果是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">P</span><br><span class="line">y</span><br><span class="line">t</span><br><span class="line">h</span><br><span class="line">o</span><br><span class="line">n</span><br></pre></td></tr></table></figure><p>如果需要使用for循环遍历数字序列，可以使用内置的range()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(index)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>语法：range(start, stop[, step])</p><ul><li>start：计数从 start 开始</li><li>stop：计数到 stop 为止，但不包括 stop</li><li>step：步长，也叫间隔</li></ul><p>如果步长为3，那么可以将代码改成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(index)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h3 id="循环中断"><a href="#循环中断" class="headerlink" title="循环中断"></a>循环中断</h3><p>Python中有两种中断循环，分别是<code>break</code>和<code>continue</code></p><ul><li>break ：结束本次循环，跳出所在的循环</li><li>continue ：中断本次循环，继续进行下一次循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">happy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> happy &lt; <span class="number">10</span>:</span><br><span class="line">    happy += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> happy == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;学习使我快乐 当前快乐值为:&quot;</span>, happy)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;还是玩游戏更快乐一些&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">学习使我快乐 当前快乐值为: <span class="number">1</span></span><br><span class="line">学习使我快乐 当前快乐值为: <span class="number">2</span></span><br><span class="line">学习使我快乐 当前快乐值为: <span class="number">3</span></span><br><span class="line">学习使我快乐 当前快乐值为: <span class="number">4</span></span><br><span class="line">还是玩游戏更快乐一些</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">happy = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> happy &lt; <span class="number">10</span>:</span><br><span class="line">    happy += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> happy == <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;玩游戏真快乐啊&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;学习使我快乐 当前快乐值为:&quot;</span>, happy)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;玩游戏好无聊 还是学习更快乐&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">学习使我快乐 当前快乐值为: <span class="number">1</span></span><br><span class="line">学习使我快乐 当前快乐值为: <span class="number">2</span></span><br><span class="line">学习使我快乐 当前快乐值为: <span class="number">3</span></span><br><span class="line">学习使我快乐 当前快乐值为: <span class="number">4</span></span><br><span class="line">玩游戏真快乐啊</span><br><span class="line">学习使我快乐 当前快乐值为: <span class="number">6</span></span><br><span class="line">学习使我快乐 当前快乐值为: <span class="number">7</span></span><br><span class="line">学习使我快乐 当前快乐值为: <span class="number">8</span></span><br><span class="line">学习使我快乐 当前快乐值为: <span class="number">9</span></span><br><span class="line">学习使我快乐 当前快乐值为: <span class="number">10</span></span><br><span class="line">玩游戏好无聊 还是学习更快乐</span><br></pre></td></tr></table></figure><h3 id="内置数据结构"><a href="#内置数据结构" class="headerlink" title="内置数据结构"></a>内置数据结构</h3><h4 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h4><p><code>list</code>是Python中最常用的一种数据结构，它是一组用方括号括起来，逗号分隔的数据</p><p>创建列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">list2 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span><br></pre></td></tr></table></figure><p>列表中的数据类型可以是相同的，也可以是不同的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;]</span><br></pre></td></tr></table></figure><p>列表里也可以嵌套另一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list4 = [<span class="number">1</span>, <span class="number">2.33</span>, <span class="string">&#x27;a&#x27;</span>, list3]</span><br><span class="line"><span class="built_in">print</span>(list4)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2.33, &#x27;a&#x27;, [1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;]]</span><br></pre></td></tr></table></figure><p>空列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list5 = []</span><br><span class="line"><span class="built_in">print</span>(list5)</span><br></pre></td></tr></table></figure><p>列表中常用的方法</p><blockquote><p><code>type()</code>查看列表的类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(list4))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>列表名[索引]</code>通过索引取出列表的元素</p><p>如果取出的索引位置不存在，则会直接抛出异常</p><p>Python中除了正索引还有负索引</p><p>0、1、2、3、4分别对应-5、-4、-3、-2、-1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><blockquote><p><code>列表1+列表2</code>使用加号连接列表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(list1 + list2)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span><br></pre></td></tr></table></figure><blockquote><p><code>for 变量 in 列表:</code>对列表元素进行for循环</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><blockquote><p><code>len(列表)</code>获取列表长度</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1 + list2))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10</span><br></pre></td></tr></table></figure><blockquote><p><code>in</code>检查列表中是否存在某个元素</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">in</span> list1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><blockquote><p><code>del</code>列表名 删除列表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> list1</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 4, 5]</span><br></pre></td></tr></table></figure><blockquote><p><code>max(list1)</code>返回列表中最大的值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(list1))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 4, 5]</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>如果list元素类型不同无法比较大小，则会报错，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2.33</span>, <span class="string">&#x27;a&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="built_in">list</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// ‘<span class="built_in">str</span>’和‘<span class="built_in">float</span>’无法比较大小</span><br><span class="line">TypeError: <span class="string">&#x27;&gt;&#x27;</span> <span class="keyword">not</span> supported between instances of <span class="string">&#x27;str&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;float&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>min(list1)</code>返回列表中最小的值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(list1))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 4, 5]</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h4><p>列表切片是指将列表中的一部分截取出来</p><p>语法：<code>list[起始索引:终止索引:步长间隔]</code></p><p><strong>注意</strong>：终止索引截取时是不会包含的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略步长时默认为 1</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">3</span>:<span class="number">8</span>])</span><br><span class="line"><span class="comment"># 步长为 2</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">3</span>:<span class="number">8</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 从索引 3 开始取到最后</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">3</span>:])</span><br><span class="line"><span class="comment"># 从头开始取，取到索引 8 ，并且索引 8 娶不到</span></span><br><span class="line"><span class="built_in">print</span>(list1[:<span class="number">8</span>])</span><br><span class="line"><span class="comment"># 取所有，步长为 3</span></span><br><span class="line"><span class="built_in">print</span>(list1[::<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 从索引 1 开始，取到倒数第 2 个，并且倒数第 2 个 取不到</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>:-<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 取所有</span></span><br><span class="line"><span class="built_in">print</span>(list1[:])</span><br><span class="line"><span class="comment"># 取逆序列表</span></span><br><span class="line"><span class="built_in">print</span>(list1[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 取逆序，并且步长为 2</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">8</span>:<span class="number">1</span>:-<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[3, 4, 5, 6, 7]</span><br><span class="line">[3, 5, 7]</span><br><span class="line">[3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7]</span><br><span class="line">[0, 3, 6, 9]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span><br><span class="line">[8, 6, 4, 2]</span><br></pre></td></tr></table></figure><h4 id="列表常用方法"><a href="#列表常用方法" class="headerlink" title="列表常用方法"></a>列表常用方法</h4><p><code>list.append(obj)</code>：在列表末尾添加新的对象</p><p><code>list.count(obj)</code>：统计某个元素在列表中出现的次数</p><p><code>list.extend(seq)</code>：在列表末尾一次性追加另一个序列中的多个值(用新列表扩展原来的)</p><p><code>list.index(obj)</code>：从列表中找出某个值第一匹配项的索引位置</p><p><code>list.insert(index,obj)</code>：将对象插入列表</p><p><code>list.pop([index=-1])</code>：移除列表中的一个元素(默认最后一个)，并且返回该元素的值</p><p><code>list.remove(obj)</code>：移除列表中某个值的第一个匹配项</p><p><code>list.reverse()</code>：反向列表中元素</p><h4 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h4><p>元组和列表是非常类似的一种数据结构，那么他们有什么区别呢？</p><ul><li>元组的元素不能修改</li><li>元组使用小括号，列表使用方括号</li></ul><h4 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h4><p>用逗号隔开的就是元组，但是为了美观和代码可读性，一般加小括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="number">2011</span>, <span class="number">2015</span></span><br><span class="line"><span class="built_in">print</span>(tuple1)</span><br><span class="line"></span><br><span class="line">tuple2 = (<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="number">2011</span>, <span class="number">2015</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tuple2))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;Python&#x27;, &#x27;Java&#x27;, 2011, 2015)</span><br><span class="line">(&#x27;Python&#x27;, &#x27;Java&#x27;, 2011, 2015)</span><br><span class="line">&lt;class &#x27;tuple&#x27;&gt;</span><br></pre></td></tr></table></figure><p>在创建元组的时候可以包含列表，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple3 = (<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;Java&quot;</span>, [<span class="number">1</span> ,<span class="number">2</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>], <span class="number">2011</span>, <span class="number">2015</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple3)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;Python&#x27;, &#x27;Java&#x27;, [1, 2, &#x27;python&#x27;, &#x27;java&#x27;], 2011, 2015)</span><br></pre></td></tr></table></figure><h4 id="元组的基本操作"><a href="#元组的基本操作" class="headerlink" title="元组的基本操作"></a>元组的基本操作</h4><p>元组的基本操作和列表非常的类似，包括：</p><ul><li>索引</li><li>切片</li><li>连接</li><li>复制</li><li>对内部元素循环</li><li>查找元组中是否有某元素</li><li>删除元组</li><li>返回元组中最大值和最小值</li><li>获取元组长度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">tuple4 = (<span class="number">0</span> ,<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple4)</span><br><span class="line"><span class="comment"># 索引</span></span><br><span class="line"><span class="built_in">print</span>(tuple4[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 索引</span></span><br><span class="line"><span class="built_in">print</span>(tuple4[-<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line"><span class="built_in">print</span>(tuple4[<span class="number">0</span>:<span class="number">8</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line"><span class="built_in">print</span>(tuple4[<span class="number">8</span>:<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">tuple5 = (<span class="number">2333</span>, <span class="string">&#x27;98k&#x27;</span>)</span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line"><span class="built_in">print</span>(tuple4 + tuple5)</span><br><span class="line"><span class="comment"># 循环</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> tuple4:</span><br><span class="line">    <span class="built_in">print</span>(index)</span><br><span class="line"><span class="comment"># 查找元素是否存在</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">in</span> tuple4)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">11</span> <span class="keyword">in</span> tuple4)</span><br><span class="line"><span class="comment"># 删除元组</span></span><br><span class="line"><span class="comment"># del tuple5</span></span><br><span class="line"><span class="comment"># print(tuple5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取最大</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(tuple4))</span><br><span class="line"><span class="comment"># 取最小</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(tuple4))</span><br><span class="line"><span class="comment"># 元组长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tuple4))</span><br><span class="line"><span class="comment"># 修改元组</span></span><br><span class="line"><span class="comment"># tuple4[0] = 11</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line">2</span><br><span class="line">8</span><br><span class="line">(0, 2, 4, 6)</span><br><span class="line">(8, 7, 6, 5, 4, 3, 2)</span><br><span class="line">(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 2333, &#x27;98k&#x27;)</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">9</span><br><span class="line">0</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h4 id="列表和元组互相转化"><a href="#列表和元组互相转化" class="headerlink" title="列表和元组互相转化"></a>列表和元组互相转化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相互转化</span></span><br><span class="line">tuple1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tuple1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(tuple1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>(tuple1)))</span><br><span class="line">list1 = [<span class="number">0</span> ,<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">tuple</span>(list1)))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;tuple&#x27;&gt;</span><br><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">&lt;class &#x27;list&#x27;&gt;</span><br><span class="line">&lt;class &#x27;list&#x27;&gt;</span><br><span class="line">(0, 1, 2, 3, 4, 5)</span><br><span class="line">&lt;class &#x27;tuple&#x27;&gt;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>在列表外套一层 <code>tuple()</code> 就可以转为元组</li><li>在元组外套一层 <code>list()</code> 就可以转为列表</li></ul><h4 id="元组解包"><a href="#元组解包" class="headerlink" title="元组解包"></a>元组解包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组解包</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1)</span><br><span class="line">a, b, c, d, e = tuple1</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1, 2, 3, 4, 5)</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p>解包就是将元组中的值，依次赋值给左侧的abcde</p><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>字典由一组键(key)值(value)对组成的，类似于：</p><p>{key1:value1，key2:value2}</p><p>整个字典包括在花括号中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;geekdigging&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict1))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;: &#x27;geekdigging&#x27;, &#x27;age&#x27;: 2&#125;</span><br><span class="line">&lt;class &#x27;dict&#x27;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：键必须是唯一的，但值则不必。值可以取任何数据类型，但键必须是不可变的</p><p>我们也可以创建多种类型混合的字典，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict2 = &#123;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>): <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;geekdigging&#x27;</span>, <span class="number">2</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict2))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;(1, 2, 3): &#x27;123&#x27;, &#x27;name&#x27;: &#x27;geekdigging&#x27;, 2: [1, 2, 3]&#125;</span><br><span class="line">&lt;class &#x27;dict&#x27;&gt;</span><br></pre></td></tr></table></figure><p>还有另一种创建字典的方式：这种情况下，键只能为字符串类型，并且创建的时候字符串不能加引号，加上就会直接报语法错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict3 = <span class="built_in">dict</span>(name = <span class="string">&#x27;geekdigging&#x27;</span>, age = <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(dict3)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict3))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;: &#x27;geekdigging&#x27;, &#x27;age&#x27;: 2&#125;</span><br><span class="line">&lt;class &#x27;dict&#x27;&gt;</span><br></pre></td></tr></table></figure><h4 id="字典常用方法"><a href="#字典常用方法" class="headerlink" title="字典常用方法"></a>字典常用方法</h4><h5 id="获取某个键的值"><a href="#获取某个键的值" class="headerlink" title="获取某个键的值"></a>获取某个键的值</h5><p>语法：<code>字典名[键]</code>，如果键不存在，则会直接报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;name&#x27;</span>])</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geekdigging</span><br></pre></td></tr></table></figure><h5 id="判断当前键是否存在"><a href="#判断当前键是否存在" class="headerlink" title="判断当前键是否存在"></a>判断当前键是否存在</h5><p>语法：<code>键 in 字典</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;value1&quot;</span>,<span class="string">&quot;key2&quot;</span>:<span class="string">&quot;value2&quot;</span>&#125;</span><br><span class="line">key = <span class="built_in">input</span>(<span class="string">&quot;请输入需要查询的键:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">in</span> dict1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您查找的键对应的值为：&quot;</span>,dict1[key])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您查找的键不存在&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请输入需要查询的键:key3</span><br><span class="line">您查找的键不存在</span><br><span class="line"></span><br><span class="line">请输入需要查询的键:key1</span><br><span class="line">您查找的键对应的值为： value1</span><br></pre></td></tr></table></figure><h5 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h5><p>语法：<code>字典名[键]=值</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1=&#123;&#125;</span><br><span class="line">dict1[<span class="string">&quot;aa&quot;</span>]=<span class="number">123456</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;aa&#x27;</span>: <span class="number">123456</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="更新键值对"><a href="#更新键值对" class="headerlink" title="更新键值对"></a>更新键值对</h5><p>语法：<code>字典名[键]=值</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">123456</span>&#125;</span><br><span class="line">dict1[<span class="string">&quot;aa&quot;</span>]=<span class="number">111111</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;aa&#x27;</span>: <span class="number">111111</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="删除键值对"><a href="#删除键值对" class="headerlink" title="删除键值对"></a>删除键值对</h5><p>语法：<code>del 字典名[键]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">1111</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">2222</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.keys())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除前字典:&quot;</span>, dict1)</span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">&quot;aa&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除后字典:&quot;</span>, dict1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除前字典: &#123;<span class="string">&#x27;aa&#x27;</span>: <span class="number">1111</span>, <span class="string">&#x27;bb&#x27;</span>: <span class="number">2222</span>&#125;</span><br><span class="line">删除后字典: &#123;<span class="string">&#x27;bb&#x27;</span>: <span class="number">2222</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="返回所有的键"><a href="#返回所有的键" class="headerlink" title="返回所有的键"></a>返回所有的键</h5><p>语法：<code>dict.keys()</code>，可以使用list()来转换为列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">1111</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">2222</span>, <span class="string">&quot;cc&quot;</span>: <span class="number">3333</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.keys())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dict1.keys()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>(dict1.keys())))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_keys([<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h5 id="返回所有的值"><a href="#返回所有的值" class="headerlink" title="返回所有的值"></a>返回所有的值</h5><p>语法：<code>dict.values()</code>，可以使用list()来转换为列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">1111</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">2222</span>, <span class="string">&quot;cc&quot;</span>: <span class="number">3333</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.values())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dict1.values()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>(dict1.values())))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_values([<span class="number">1111</span>, <span class="number">2222</span>, <span class="number">3333</span>])</span><br><span class="line">[<span class="number">1111</span>, <span class="number">2222</span>, <span class="number">3333</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h5 id="将键值对以多个元组的形式存入列表"><a href="#将键值对以多个元组的形式存入列表" class="headerlink" title="将键值对以多个元组的形式存入列表"></a>将键值对以多个元组的形式存入列表</h5><p>语法：<code>dict.items()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">1111</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">2222</span>, <span class="string">&quot;cc&quot;</span>: <span class="number">3333</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.items())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dict1.items()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>(dict1.items())))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_items([(<span class="string">&#x27;aa&#x27;</span>, <span class="number">1111</span>), (<span class="string">&#x27;bb&#x27;</span>, <span class="number">2222</span>), (<span class="string">&#x27;cc&#x27;</span>, <span class="number">3333</span>)])</span><br><span class="line">[(<span class="string">&#x27;aa&#x27;</span>, <span class="number">1111</span>), (<span class="string">&#x27;bb&#x27;</span>, <span class="number">2222</span>), (<span class="string">&#x27;cc&#x27;</span>, <span class="number">3333</span>)]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h5 id="返回指定键的值，如果值不存在返回default值-默认为None"><a href="#返回指定键的值，如果值不存在返回default值-默认为None" class="headerlink" title="返回指定键的值，如果值不存在返回default值(默认为None)"></a>返回指定键的值，如果值不存在返回default值(默认为None)</h5><p>语法：<code>dict.get(key,default=None)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">1111</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">2222</span>, <span class="string">&quot;cc&quot;</span>: <span class="number">3333</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;没找到值&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&quot;dd&quot;</span>, <span class="string">&quot;没找到值&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&quot;ee&quot;</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1111</span></span><br><span class="line">没找到值</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><h5 id="删除字典中指定键所对应的值，返回值为被删除的值"><a href="#删除字典中指定键所对应的值，返回值为被删除的值" class="headerlink" title="删除字典中指定键所对应的值，返回值为被删除的值"></a>删除字典中指定键所对应的值，返回值为被删除的值</h5><p>语法：<code>dict.pop(key)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">1111</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">2222</span>, <span class="string">&quot;cc&quot;</span>: <span class="number">3333</span>&#125;</span><br><span class="line">result = dict1.pop(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1111</span></span><br><span class="line">&#123;<span class="string">&#x27;bb&#x27;</span>: <span class="number">2222</span>, <span class="string">&#x27;cc&#x27;</span>: <span class="number">3333</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="给字典中添加键值对，未指定值默认为None"><a href="#给字典中添加键值对，未指定值默认为None" class="headerlink" title="给字典中添加键值对，未指定值默认为None"></a>给字典中添加键值对，未指定值默认为None</h5><p>语法：<code>dict.setdefault(key,default=None)</code>，如果键已存在不做任何操作，不存在则添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">1111</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">2222</span>, <span class="string">&quot;cc&quot;</span>: <span class="number">3333</span>&#125;</span><br><span class="line">dict1.setdefault(<span class="string">&quot;aa&quot;</span>, <span class="number">2222</span>)</span><br><span class="line">dict1.setdefault(<span class="string">&quot;dd&quot;</span>, <span class="number">4444</span>)</span><br><span class="line">dict1.setdefault(<span class="string">&quot;ee&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;aa&#x27;</span>: <span class="number">1111</span>, <span class="string">&#x27;bb&#x27;</span>: <span class="number">2222</span>, <span class="string">&#x27;cc&#x27;</span>: <span class="number">3333</span>, <span class="string">&#x27;dd&#x27;</span>: <span class="number">4444</span>, <span class="string">&#x27;ee&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="将字典dict2的键值对更新到dict1里"><a href="#将字典dict2的键值对更新到dict1里" class="headerlink" title="将字典dict2的键值对更新到dict1里"></a>将字典dict2的键值对更新到dict1里</h5><p>语法：<code>dict1.update(dict2)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">1111</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">2222</span>, <span class="string">&quot;cc&quot;</span>: <span class="number">3333</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&quot;cc&quot;</span>: <span class="number">3333</span>, <span class="string">&quot;dd&quot;</span>: <span class="number">4444</span>, <span class="string">&quot;ee&quot;</span>: <span class="number">5555</span>&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;aa&#x27;</span>: <span class="number">1111</span>, <span class="string">&#x27;bb&#x27;</span>: <span class="number">2222</span>, <span class="string">&#x27;cc&#x27;</span>: <span class="number">3333</span>, <span class="string">&#x27;dd&#x27;</span>: <span class="number">4444</span>, <span class="string">&#x27;ee&#x27;</span>: <span class="number">5555</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;cc&#x27;</span>: <span class="number">3333</span>, <span class="string">&#x27;dd&#x27;</span>: <span class="number">4444</span>, <span class="string">&#x27;ee&#x27;</span>: <span class="number">5555</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="删除字典中所有元素"><a href="#删除字典中所有元素" class="headerlink" title="删除字典中所有元素"></a>删除字典中所有元素</h5><p>语法：<code>dict.clear()</code>，删除的是字典元素不删除字典本身，删除后为空字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">1111</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">2222</span>, <span class="string">&quot;cc&quot;</span>: <span class="number">3333</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除前：&quot;</span>, dict1)</span><br><span class="line">dict1.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除后：&quot;</span>, dict1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除前： &#123;<span class="string">&#x27;aa&#x27;</span>: <span class="number">1111</span>, <span class="string">&#x27;bb&#x27;</span>: <span class="number">2222</span>, <span class="string">&#x27;cc&#x27;</span>: <span class="number">3333</span>&#125;</span><br><span class="line">删除后： &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="返回一个字典的浅复制"><a href="#返回一个字典的浅复制" class="headerlink" title="返回一个字典的浅复制"></a>返回一个字典的浅复制</h5><p>语法：<code>dict.copy()</code>，浅复制代表引用，操作复制后的对象会影响原对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dict3 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;geekdigging&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="comment"># 浅拷贝: 引用对象</span></span><br><span class="line">dict4 = dict3</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dict3))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dict4))</span><br><span class="line"><span class="comment"># 浅拷贝：深拷贝父对象（dict），子对象（dict中的元素）还是引用</span></span><br><span class="line">dict5 = dict3.copy()</span><br><span class="line">dict3[<span class="string">&#x27;age&#x27;</span>].remove(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(dict3)</span><br><span class="line"><span class="built_in">print</span>(dict5)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dict3))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dict5))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2380696613760</span></span><br><span class="line"><span class="number">2380696613760</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;geekdigging&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;geekdigging&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="number">2380696613760</span></span><br><span class="line"><span class="number">2380696613824</span></span><br></pre></td></tr></table></figure><h5 id="返回一个字典的深复制"><a href="#返回一个字典的深复制" class="headerlink" title="返回一个字典的深复制"></a>返回一个字典的深复制</h5><p>语法：引入copy模块<code>import copy</code>，<code>copy.deepcopy(字典名)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">dict3 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;geekdigging&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">dict6 = copy.deepcopy(dict3)</span><br><span class="line">dict3[<span class="string">&#x27;age&#x27;</span>].remove(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(dict3)</span><br><span class="line"><span class="built_in">print</span>(dict6)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dict3))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dict6))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;geekdigging&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;geekdigging&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="number">2487699927936</span></span><br><span class="line"><span class="number">2487700625408</span></span><br></pre></td></tr></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合(set)是一个无序的不重复元素序列，元素需要是不可变类型</p><h5 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h5><p>语法：<code>set = &#123;xx1,xx2,xx3&#125;</code>或<code>set = set()</code></p><p><strong>注意：</strong> 创建一个空集合必须用 <code>set()</code> 而不是 <code>&#123;&#125;</code>，因为 <code>&#123;&#125;</code> 是用来创建一个空字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 演示集合不可变元素</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Python&#x27;</span>, (<span class="number">1</span>, <span class="string">&#x27;geekdigging&#x27;</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(set1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示不可重复</span></span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示空集合</span></span><br><span class="line">set3 = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(set3))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 2, 3, (1, &#x27;geekdigging&#x27;), &#x27;Python&#x27;&#125;</span><br><span class="line">&lt;class &#x27;set&#x27;&gt;</span><br><span class="line">&#123;1, 2&#125;</span><br><span class="line">set()</span><br><span class="line">&lt;class &#x27;set&#x27;&gt;</span><br></pre></td></tr></table></figure><h5 id="使用列表list创建集合"><a href="#使用列表list创建集合" class="headerlink" title="使用列表list创建集合"></a>使用列表list创建集合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 list 创建集合</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">set1 = <span class="built_in">set</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 2, 3, 4, 5, 6, 7&#125;</span><br></pre></td></tr></table></figure><h5 id="使用元组tuple创建集合"><a href="#使用元组tuple创建集合" class="headerlink" title="使用元组tuple创建集合"></a>使用元组tuple创建集合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 tuple 创建集合</span></span><br><span class="line">tup1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>)</span><br><span class="line">set1 = <span class="built_in">set</span>(tup1)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="使用字符串创建集合"><a href="#使用字符串创建集合" class="headerlink" title="使用字符串创建集合"></a>使用字符串创建集合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用字符串创建集合</span></span><br><span class="line">str1 = <span class="string">&#x27;homra&#x27;</span></span><br><span class="line">set1 = <span class="built_in">set</span>(str1)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="集合常用方法"><a href="#集合常用方法" class="headerlink" title="集合常用方法"></a>集合常用方法</h4><blockquote><p>集合和列表、字典、元组等一样，都提供了很多内置的方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化数据</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line">set3 = set1.intersection(set2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;交集：&#x27;</span>, set3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">set4 = set1.union(set2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;并集：&#x27;</span>, set4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line">set5 = set1.difference(set2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;差集：&#x27;</span>, set5)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">交集： &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">并集： &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">差集： &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="为集合添加元素"><a href="#为集合添加元素" class="headerlink" title="为集合添加元素"></a>为集合添加元素</h5><p>语法：<code>set.add()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set1.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line">set1.add(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line">set1.add((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, (<span class="number">1</span>, <span class="number">2</span>), <span class="string">&#x27;python&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>语法：<code>set.update()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">set1.update(&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;python&#x27;</span>, (<span class="number">4</span>, <span class="number">5</span>)&#125;)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, (<span class="number">4</span>, <span class="number">5</span>), <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;python&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>区别在于 <code>add()</code> 参数只能是单个元素，而 <code>update()</code> 中的参数是一个 set 集合</p></blockquote><h5 id="随机移除元素"><a href="#随机移除元素" class="headerlink" title="随机移除元素"></a>随机移除元素</h5><p>语法：<code>set.pop()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">set1.pop()</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="移除指定元素"><a href="#移除指定元素" class="headerlink" title="移除指定元素"></a>移除指定元素</h5><p>语法：<code>set.remove()</code>，若删除的元素不存在，则直接报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">set1.remove(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>语法：<code>set.discard()</code>，若删除的元素不存在，则什么也不做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">set1.discard(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="清楚集合中所有元素"><a href="#清楚集合中所有元素" class="headerlink" title="清楚集合中所有元素"></a>清楚集合中所有元素</h5><p>语法：<code>set.clear()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">set1.clear()</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><h5 id="判断集合是否包含相同元素"><a href="#判断集合是否包含相同元素" class="headerlink" title="判断集合是否包含相同元素"></a>判断集合是否包含相同元素</h5><p>语法：<code>set.isdisjoint()</code>，没有返回<code>True</code>，否则返回<code>False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">msg = set1.isdisjoint(set2)</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h5 id="判断指定集合是否为该方法参数集合的子集"><a href="#判断指定集合是否为该方法参数集合的子集" class="headerlink" title="判断指定集合是否为该方法参数集合的子集"></a>判断指定集合是否为该方法参数集合的子集</h5><p>语法：<code>set.issubset()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">set3 = &#123;<span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set2.issubset(set1))</span><br><span class="line"><span class="built_in">print</span>(set3.issubset(set1))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h5 id="判断该方法的参数集合是否为指定集合的子集"><a href="#判断该方法的参数集合是否为指定集合的子集" class="headerlink" title="判断该方法的参数集合是否为指定集合的子集"></a>判断该方法的参数集合是否为指定集合的子集</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">set3 = &#123;<span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1.issuperset(set2))</span><br><span class="line"><span class="built_in">print</span>(set1.issuperset(set3))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><blockquote><p>函数就是可以重复使用的代码</p></blockquote><p>定义函数的规则：</p><ul><li>函数代码块以 def 关键词开头</li><li>后接函数名称和圆括号 <code>()</code> </li><li>圆括号中可以使用参数</li><li>函数内容以冒号起始，并且缩进</li><li>return 结束函数，可以选择性地返回一个值。不带 return 相当于返回 None</li></ul><p>语法：def是系统关键字，可以用来定义函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">形式参数</span>):</span></span><br><span class="line">函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>例如定义一个求两数之和的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">2</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p><code>Python</code>中包含了很多<code>内置函数</code>，无需我们定义，可以直接拿来使用</p><p>例如：<code>print()</code> 、 <code>len()</code> 、 <code>type()</code> 、 <code>id()</code> 等等</p><h4 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h4><h5 id="按照位置顺序传递"><a href="#按照位置顺序传递" class="headerlink" title="按照位置顺序传递"></a>按照位置顺序传递</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>，<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h5 id="按照赋值传递"><a href="#按照赋值传递" class="headerlink" title="按照赋值传递"></a>按照赋值传递</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtraction</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line"><span class="built_in">print</span>(subtraction(b=<span class="number">5</span>, a=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h5 id="默认赋值传递"><a href="#默认赋值传递" class="headerlink" title="默认赋值传递"></a>默认赋值传递</h5><blockquote><p>如果参数有两个，但是其中一个可能不会传递，这时我们可以给它一个默认值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division</span>(<span class="params">a, b=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"><span class="built_in">print</span>(division(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(division(<span class="number">10</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.0</span></span><br><span class="line"><span class="number">2.0</span></span><br></pre></td></tr></table></figure><h5 id="可变长度参数传递-元组"><a href="#可变长度参数传递-元组" class="headerlink" title="可变长度参数传递(元组)"></a>可变长度参数传递(元组)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_a</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br></pre></td></tr></table></figure><p>如果此时我们想打印100个参数怎么办？肯定不能增加100个形参</p><p>我们可以在参数前加一个*，表示这个参数是可变长参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_a</span>(<span class="params">a, *b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br><span class="line">print_a(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 剩余的参数被转换成了元组的形式进行打印</span></span><br><span class="line"><span class="number">1</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h5 id="可变长度参数传递-字典"><a href="#可变长度参数传递-字典" class="headerlink" title="可变长度参数传递(字典)"></a>可变长度参数传递(字典)</h5><p>我们可以给参数前加两个*，表示可以传递的数据类型是字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_b</span>(<span class="params">a, **b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br><span class="line">print_b(<span class="number">1</span>, q=<span class="string">&#x27;q&#x27;</span>, w=<span class="string">&#x27;w&#x27;</span>, e=<span class="string">&#x27;e&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &#123;<span class="string">&#x27;q&#x27;</span>: <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;w&#x27;</span>: <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;e&#x27;</span>: <span class="string">&#x27;e&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><blockquote><p>内层函数的变量作用域仅在内层函数中，并不会覆盖到外层函数</p><p>局部变量只在当前函数中生效，出了函数就不生效了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_1</span>():</span></span><br><span class="line">    <span class="comment"># 局部变量</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_2</span>():</span></span><br><span class="line">        <span class="comment"># 局部变量</span></span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a)</span><br><span class="line"><span class="comment"># 调用哪个函数 哪个函数生效</span></span><br><span class="line">print_1()</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>当我们需要使用匿名函数的时候，可以使用 <code>lambda</code> 关键字来声明匿名函数</p><ul><li>lambda 只是一个表达式，函数体比 def 简单很多</li><li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去</li><li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数</li></ul><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数对象名 = lambda 形参：表达式</span></span><br><span class="line">add = <span class="keyword">lambda</span> x,y: x + y</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><blockquote><p>一个函数调用自己就叫做递归</p></blockquote><p>例如：我们想求n的阶乘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jiecheng</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x * jiecheng(x - <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 计算4的阶乘</span></span><br><span class="line">result = jiecheng(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>什么是绝对路径和相对路径？</p><ul><li>绝对路径：是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。完整的描述文件位置的路径就是绝对路径</li><li>相对路径：相对路径就是指由这个文件所在的路径引起的跟其它文件（或文件夹）的路径关系</li></ul><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>常用语法：<code>open(file, mode=&#39;r&#39;)</code></p><p>完整语法：<code>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code></p><p>参数说明：</p><ul><li>file: 必需，文件路径（相对或者绝对路径）</li><li>mode: 可选，文件打开模式</li><li>buffering: 设置缓冲</li><li>encoding: 一般使用 utf-8</li><li>errors: 报错级别</li><li>newline: 区分换行符</li><li>closefd: 传入的file参数类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">open</span>(<span class="string">&#x27;D:/HelloWorld.txt&#x27;</span>, mode=<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World by Python!!!</span><br></pre></td></tr></table></figure><h4 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h4><blockquote><p>Python3中，文件默认的编码方式是UTF-8，文本字符的常用编码有ASCII和Unicode</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;好好学习，天天向上&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(str1))</span><br><span class="line">a = str1.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(a.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">bytes</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">好好学习，天天向上</span></span><br></pre></td></tr></table></figure><p>如果我们使用<code>gbk</code>进行解码，则会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeDecodeError: <span class="string">&#x27;gbk&#x27;</span> codec can<span class="string">&#x27;t decode byte 0x8a in position 26: incomplete multibyte sequence</span></span><br></pre></td></tr></table></figure><h4 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h4><blockquote><p>我们可以使用内置函数来操作文件，我们也可以通过OS模块更简单的操作文件</p><p>OS模块是和操作系统相关的模块</p></blockquote><p>建立一个<code>test.txt</code>文件，内容为<code>Hello World演示内容</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os <span class="comment">#导入os模块</span></span><br><span class="line">os.chdir(<span class="string">&#x27;D:&#x27;</span>) <span class="comment">#指定目录</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>) <span class="comment">#指定文件名称</span></span><br><span class="line"><span class="built_in">print</span>(file.read()) <span class="comment">#读取文件内容并打印</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World演示内容</span><br></pre></td></tr></table></figure><p>新加内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.write(<span class="string">&#x27;\n好好学习 天天向上&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这时候我们并没有指定文件的权限，所以会提示没权限写入报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io.UnsupportedOperation: <span class="keyword">not</span> writable</span><br></pre></td></tr></table></figure><p>我们需要调整打开文件的权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,mode=<span class="string">&#x27;a+&#x27;</span>)</span><br></pre></td></tr></table></figure><p>再次执行结果如下：我们可以正常写入文件了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World演示内容</span><br><span class="line">好好学习 天天向上</span><br></pre></td></tr></table></figure><p>如果我们对一个文件读取两次，但是只会打印一次，所以后面就读不到内容了</p><p>因为<code>read()</code>读取所有内容，读取完后，游标是指在最后的</p><h3 id="基础异常处理"><a href="#基础异常处理" class="headerlink" title="基础异常处理"></a>基础异常处理</h3><p>捕获异常语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ...(可能产生异常的代码)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    ...(产生异常后的处理代码)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    ...(一定要执行的代码)</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器可以理解为for循环，Python还提供了另一种访问集合的方式</p><p>特点</p><ul><li>可以记住遍历的位置的对象</li><li>迭代器从集合的第一个元素开始访问，直到所有的元素访问结束</li><li>迭代器只能向前不能后退</li></ul><p>我们可以使用<code>isinstance()</code>来判断当前对象是否可以迭代</p><p>迭代器不是Python的内置方法，需要先将迭代器引入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br></pre></td></tr></table></figure><p>下面我们使用以下迭代器中的<code>next()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(<span class="built_in">list</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: <span class="string">&#x27;list&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> an iterator</span><br></pre></td></tr></table></figure><p>list虽然是可以迭代的，但是list本身并不是迭代器，我们仍旧需要先将list转换成一个迭代器才能使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="built_in">list</span> = <span class="built_in">iter</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(<span class="built_in">list</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><blockquote><p>在python中生成器是指用代码实现迭代器的的功能本质还是迭代器，只不过是代码实现迭代器功能。在python中生成器是由函数实现的，通常我们在函数中加入yeild就可以实现生成器</p></blockquote><p>下面写一个简单的生成器的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">    <span class="keyword">yield</span>  <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">222</span>)</span><br><span class="line">g=func()</span><br></pre></td></tr></table></figure><p>我们发现上面代码并没有执行，因为此时<code>g</code>是一个生成器对象，生成器是不会自己运行的，需要我们手动调用<code>next()</code>方法才会运行，并且每次遇到<code>yield()</code>就会停止，继续调用<code>next()</code>方法才会继续执行直到下一个<code>yield()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">222</span>)</span><br><span class="line">g = func()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>可以看出，<code>yield</code>的两个作用</p><p>1、暂停当前函数的运行</p><p>2、返回<code>yield</code>的值给调用者，即本例中调用<code>next()</code>的<code>print()</code>方法</p><p>所以打印出了<code>111</code>和<code>yield</code>返回的<code>3</code>，但是并没有打印<code>222</code></p><p>还有一个方法叫<code>send()</code>，用法类似于<code>next()</code>，都可以使函数继续运行，并且可以传送值给上一个<code>yield</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    count = <span class="keyword">yield</span> <span class="number">6</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count1 = <span class="keyword">yield</span> <span class="number">7</span></span><br><span class="line">    <span class="built_in">print</span>(count1)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = func1()</span><br><span class="line">g.send(<span class="string">&#x27;哈哈哈&#x27;</span>)</span><br><span class="line">g.send(<span class="string">&#x27;呵呵呵&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g.send(<span class="string">&#x27;哈哈哈&#x27;</span>)</span><br><span class="line">TypeError: can<span class="string">&#x27;t send non-None value to a just-started generator</span></span><br></pre></td></tr></table></figure><p>这里可以看出，错误原因是因为我们第一个<code>yield</code>只能有如下三种写法</p><ul><li>使用<code>next(g)</code>获取到第一个<code>yield</code>，如果需要值则用变量接收</li><li>使用<code>g.__next__()</code>，这种方式等同于第一种</li><li>如果一定要使用<code>send()</code>方法，那么只能写成<code>g.send(None)</code></li></ul><p>经过修改后，我们的代码采用第三种方式了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    count = <span class="keyword">yield</span> <span class="number">6</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count1 = <span class="keyword">yield</span> <span class="number">7</span></span><br><span class="line">    <span class="built_in">print</span>(count1)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = func1()</span><br><span class="line">g.send(<span class="literal">None</span>)</span><br><span class="line">g.send(<span class="string">&#x27;哈哈哈&#x27;</span>)</span><br><span class="line">g.send(<span class="string">&#x27;呵呵呵&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">哈哈哈</span><br><span class="line">呵呵呵</span><br></pre></td></tr></table></figure><p>如果我们想打印出第一个<code>yield</code>的值，那么我们可以修改代码为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    count = <span class="keyword">yield</span> <span class="number">6</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第1个print&#x27;</span>, count)</span><br><span class="line">    count1 = <span class="keyword">yield</span> <span class="number">7</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第2个print&#x27;</span>, count1)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = func1()</span><br><span class="line">s1 = g.send(<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">g.send(<span class="string">&#x27;哈哈哈&#x27;</span>)</span><br><span class="line">g.send(<span class="string">&#x27;呵呵呵&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line">第<span class="number">1</span>个<span class="built_in">print</span> 哈哈哈</span><br><span class="line">第<span class="number">2</span>个<span class="built_in">print</span> 呵呵呵</span><br></pre></td></tr></table></figure><p>这时候我们可以看到，打印出第一个<code>yield</code>返回的值<code>6</code>了</p><p>那么我们可以获取到最后一个<code>yield</code>的返回值吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    count = <span class="keyword">yield</span> <span class="number">6</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count1 = <span class="keyword">yield</span> <span class="number">7</span></span><br><span class="line">    <span class="built_in">print</span>(count1)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = func1()</span><br><span class="line">s1 = g.send(<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">g.send(<span class="string">&#x27;哈哈哈&#x27;</span>)</span><br><span class="line">g.send(<span class="string">&#x27;呵呵呵&#x27;</span>)</span><br><span class="line">s2 = <span class="built_in">next</span>(g)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure><p>结果如下：这里获取的时候报错了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line">第<span class="number">1</span>个<span class="built_in">print</span> 哈哈哈</span><br><span class="line">第<span class="number">2</span>个<span class="built_in">print</span> 呵呵呵</span><br><span class="line">Traceback (most recent call last):s2 = <span class="built_in">next</span>(g)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>综上我们可以总结出四点</p><ul><li><p><code>send</code>与<code>next</code>一样，也是对生成器取值（执行一个<code>yield</code>）的方法</p></li><li><p><code>send</code>可以给上一个<code>yield</code>传值</p></li><li><p>第一次的取值永远都是<code>next</code>或<code>send(None)</code></p></li><li><p>最后一个<code>yield</code>永远也得不到<code>send</code>传的值</p></li></ul><p>那么生成器可以做点什么呢？我们可以看如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_c</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行 A &#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_d</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行 B &#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">c = print_c()</span><br><span class="line">d = print_d()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c.__next__()</span><br><span class="line">    d.__next__()</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">执行 A</span><br><span class="line">执行 B</span><br><span class="line">执行 A</span><br><span class="line">执行 B</span><br><span class="line">执行 A</span><br><span class="line">执行 B</span><br><span class="line">执行 A</span><br><span class="line">执行 B</span><br><span class="line">……</span><br></pre></td></tr></table></figure><blockquote><p>因为 <code>while</code> 条件设置的是永真，所以这个循环是不会停下来的</p></blockquote><p>这就是生成器的一个应用场景<code>协程</code></p><p><code>协程</code>更贴切的解释是流水线，比如某件事情必须 A 先做一步， B 再做一步，并且这两件事情看起来要是同时进行的</p><h3 id="Time模块"><a href="#Time模块" class="headerlink" title="Time模块"></a>Time模块</h3><p>time是个跟时间相关的模块，我们可以先看如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>结果如下：每隔一秒执行一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>不难理解，这里的<code>time.sleep(1)</code>是一个按照指定时间睡眠的方法，单位是秒</p><p>接下来看一些其他的<code>time</code>模块中的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 获取当前时间戳</span></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="comment"># 结果：1587718494.622771</span></span><br></pre></td></tr></table></figure><p>时间戳是从<code>1970年1月1日0时0分0秒</code>起到现在的时长，时长的单位是<code>秒</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 获取详细的本地时间</span></span><br><span class="line"><span class="built_in">print</span>(time.localtime())</span><br><span class="line"><span class="comment"># 结果：time.struct_time(tm_year=2020, tm_mon=4, tm_mday=24, tm_hour=16, tm_min=58, tm_sec=19, tm_wday=4, tm_yday=115, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地时间转化成一个时间戳</span></span><br><span class="line"><span class="built_in">print</span>(time.mktime(time.localtime()))</span><br><span class="line"><span class="comment"># 结果：1587718798.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化当前时间</span></span><br><span class="line"><span class="built_in">print</span>(time.asctime(time.localtime()))</span><br><span class="line"><span class="comment"># 结果：Fri Apr 24 17:01:02 2020</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义格式化时间</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br><span class="line"><span class="comment"># 结果：2020-04-24 17:01:47</span></span><br></pre></td></tr></table></figure><p>我们可以通过<code>strftime()</code> 来自定义日期格式</p><p>这里列举一下日期格式化的符号：</p><ul><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12）</li><li>%M 分钟数（00=59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身</li></ul><h3 id="calendar模块"><a href="#calendar模块" class="headerlink" title="calendar模块"></a>calendar模块</h3><p>我们先看一段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="built_in">print</span>(calendar.calendar(theyear=<span class="number">2020</span>, w=<span class="number">2</span>, l=<span class="number">1</span>, c=<span class="number">6</span>))</span><br><span class="line"><span class="comment"># 可以省略后面三个参数 直接打印想要的年份</span></span><br><span class="line"><span class="comment"># print(calendar.calendar(theyear=2020))</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">                                 <span class="number">2020</span></span><br><span class="line"></span><br><span class="line">      January                   February                   March</span><br><span class="line">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span><br><span class="line">       <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>                      <span class="number">1</span>  <span class="number">2</span>                         <span class="number">1</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span>       <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>       <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"><span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>      <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span>       <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span></span><br><span class="line"><span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span>      <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>      <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span></span><br><span class="line"><span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span>            <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span>         <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span></span><br><span class="line">                                                    <span class="number">30</span> <span class="number">31</span></span><br><span class="line"></span><br><span class="line">       April                      May                       June</span><br><span class="line">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span><br><span class="line">       <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>                   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>       <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span>       <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span>       <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span></span><br><span class="line"><span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>      <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>      <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span></span><br><span class="line"><span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span>      <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span>      <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span></span><br><span class="line"><span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span>               <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span>      <span class="number">29</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line">        July                     August                  September</span><br><span class="line">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span><br><span class="line">       <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>                      <span class="number">1</span>  <span class="number">2</span>          <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span>       <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>       <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span></span><br><span class="line"><span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>      <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span>      <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line"><span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span>      <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>      <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span></span><br><span class="line"><span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span>            <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span>      <span class="number">28</span> <span class="number">29</span> <span class="number">30</span></span><br><span class="line">                          <span class="number">31</span></span><br><span class="line"></span><br><span class="line">      October                   November                  December</span><br><span class="line">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span><br><span class="line">          <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>                         <span class="number">1</span>          <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></span><br><span class="line"> <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>       <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>       <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span></span><br><span class="line"><span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span>       <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>      <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line"><span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span>      <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span>      <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span></span><br><span class="line"><span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span>         <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span>      <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span></span><br><span class="line">                          <span class="number">30</span></span><br></pre></td></tr></table></figure><p>我们把 2020 年的日历打印出来了</p><ul><li>w = 每个日期之间的间隔字符数</li><li>l = 每周所占用的行数</li><li>c = 每个月之间的间隔字符数</li></ul><p>除了返回全年的日历，我们还可以支持返回指定月份的日历：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="built_in">print</span>(calendar.month(<span class="number">2020</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     April <span class="number">2020</span></span><br><span class="line">Mo Tu We Th Fr Sa Su</span><br><span class="line">       <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span></span><br><span class="line"><span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span></span><br><span class="line"><span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span></span><br><span class="line"><span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><p>获取某月的总天数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="built_in">print</span>(calendar._monthlen(<span class="number">2020</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><p>但是正常我们可以有更好的方式记住每个月多少天</p><blockquote><p>一三五七八十腊，三十一天永不差</p></blockquote><p>获取指定日期对应的星期数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="built_in">print</span>(calendar.weekday(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">24</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要注意的是 4代表星期五 日期从0到6</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="Excel操作"><a href="#Excel操作" class="headerlink" title="Excel操作"></a>Excel操作</h3><p>首先我们需要导入第三方模块<code>xlrd</code>，如果没有的用如下命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xlrd</span><br></pre></td></tr></table></figure><p>然后编写代码，指定<code>xls</code>的具体位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">&quot;c:/Users/Levi/Desktop/code/test.xls&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(workbook.sheet_names())</span><br><span class="line"><span class="comment"># 获取所有的 sheet</span></span><br><span class="line"><span class="built_in">print</span>(workbook.sheets())</span><br><span class="line"><span class="comment"># 根据索引获取 sheet</span></span><br><span class="line"><span class="built_in">print</span>(workbook.sheet_by_index(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 根据名字获取 sheet</span></span><br><span class="line"><span class="built_in">print</span>(workbook.sheet_by_name(<span class="string">&#x27;1班&#x27;</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;1班&#x27;</span>, <span class="string">&#x27;2班&#x27;</span>, <span class="string">&#x27;3班&#x27;</span>]</span><br><span class="line">[&lt;xlrd.sheet.Sheet <span class="built_in">object</span> at <span class="number">0x0000018A763D7610</span>&gt;, &lt;xlrd.sheet.Sheet <span class="built_in">object</span> at <span class="number">0x0000018A763D76D0</span>&gt;, &lt;xlrd.sheet.Sheet <span class="built_in">object</span> at <span class="number">0x0000018A763D77F0</span>&gt;]</span><br><span class="line">&lt;xlrd.sheet.Sheet <span class="built_in">object</span> at <span class="number">0x0000018A763D76D0</span>&gt;</span><br><span class="line">&lt;xlrd.sheet.Sheet <span class="built_in">object</span> at <span class="number">0x0000018A763D7610</span>&gt;</span><br></pre></td></tr></table></figure><p>获取行数和列数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sheet1 = workbook.sheets()[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 获取行数</span></span><br><span class="line"><span class="built_in">print</span>(sheet1.nrows)</span><br><span class="line"><span class="comment"># 获取列数</span></span><br><span class="line"><span class="built_in">print</span>(sheet1.ncols)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>获取整行和整列的数据(数据类型为列表)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取第 2 行内容</span></span><br><span class="line"><span class="built_in">print</span>(sheet1.row_values(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 获取第 3 列内容</span></span><br><span class="line"><span class="built_in">print</span>(sheet1.col_values(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;小明&#x27;</span>, <span class="number">76.0</span>, <span class="number">85.0</span>, <span class="number">95.0</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;数学&#x27;</span>, <span class="number">85.0</span>, <span class="number">58.0</span>, <span class="number">96.0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br></pre></td></tr></table></figure><p>获取单元格的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cell1 = sheet1.cell(<span class="number">1</span>, <span class="number">1</span>).value</span><br><span class="line"><span class="comment"># 行索引</span></span><br><span class="line">cell2 = sheet1.row(<span class="number">1</span>)[<span class="number">1</span>].value</span><br><span class="line">cell3 = sheet1.cell(<span class="number">1</span>, <span class="number">2</span>).value</span><br><span class="line"><span class="comment"># 列索引</span></span><br><span class="line">cell4 = sheet1.col(<span class="number">2</span>)[<span class="number">1</span>].value</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">76.0</span> <span class="number">76.0</span> <span class="number">85.0</span> <span class="number">85.0</span></span><br></pre></td></tr></table></figure><p>获取日期类型数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date_value = xlrd.xldate_as_datetime(sheet1.cell_value(<span class="number">2</span>, <span class="number">3</span>), workbook.datemode)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(date_value), date_value)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">datetime</span>.<span class="title">datetime</span>&#x27;&gt; 1900-04-01 00:</span><span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性复习</title>
      <link href="/2020/04/07/2020040700/"/>
      <url>/2020/04/07/2020040700/</url>
      
        <content type="html"><![CDATA[<h2 id="Lamdba"><a href="#Lamdba" class="headerlink" title="Lamdba"></a>Lamdba</h2><h4 id="1、为什么使用Lamdba？"><a href="#1、为什么使用Lamdba？" class="headerlink" title="1、为什么使用Lamdba？"></a>1、为什么使用Lamdba？</h4><p>Lamdba是一个匿名函数，我们可以把Lamdba表达式理解为一段可以传递的代码，这样我们就能够写出更简洁更灵活的代码，也提升了Java的表达能力</p><h4 id="2、Lamdba的实际应用场景"><a href="#2、Lamdba的实际应用场景" class="headerlink" title="2、Lamdba的实际应用场景"></a>2、Lamdba的实际应用场景</h4><blockquote><p>假设现有需求如下：查询出公司中年龄大于35的员工信息</p></blockquote><p>给定的信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">// 年龄</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;<span class="comment">// 薪资</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 现有如下员工信息</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;赵六&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br></pre></td></tr></table></figure><blockquote><p>在没有学习Lamdba之前，我们可以定义方法来实现这个需求</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过滤出年龄大于35岁的员工信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployee</span><span class="params">(List&lt;Employee&gt; emps)</span> </span>&#123;</span><br><span class="line">List&lt;Employee&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Employee emp : emps) &#123;</span><br><span class="line"><span class="keyword">if</span> (emp.getAge() &gt; <span class="number">35</span>) &#123;</span><br><span class="line">results.add(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Employee&gt; list = filterEmployee(emps);</span><br><span class="line"><span class="keyword">for</span> (Employee emp : list) &#123;</span><br><span class="line">System.out.println(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">============控制台信息============</span><br><span class="line">name=李四, age=<span class="number">44</span>, salary=<span class="number">4444.44</span></span><br><span class="line">name=王五, age=<span class="number">55</span>, salary=<span class="number">5555.55</span></span><br><span class="line">name=赵六, age=<span class="number">66</span>, salary=<span class="number">6666.66</span></span><br><span class="line">name=田七, age=<span class="number">77</span>, salary=<span class="number">7777.77</span></span><br></pre></td></tr></table></figure><blockquote><p>如果这个时候添加了一个新需求，需要查询工资低于5000的员工信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployee2</span><span class="params">(List&lt;Employee&gt; emps)</span> </span>&#123;</span><br><span class="line">List&lt;Employee&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Employee emp : emps) &#123;</span><br><span class="line">        <span class="comment">// 我们只需要修改为emp.getSalary() &lt; 5000即可</span></span><br><span class="line"><span class="keyword">if</span> (emp.getSalary() &lt; <span class="number">5000</span>) &#123;</span><br><span class="line">results.add(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line">============控制台信息============</span><br><span class="line">name=张三, age=<span class="number">33</span>, salary=<span class="number">3333.33</span></span><br><span class="line">name=李四, age=<span class="number">44</span>, salary=<span class="number">4444.44</span></span><br></pre></td></tr></table></figure><blockquote><p>这个时候问题就来了，在我们编写的这段代码中，真正不一样的地方只有一行，但是我们却写了一个新方法来实现现有的需求变动，代码的复用性与扩展性都很差。如果将来有更多的需求，那么我们需要重写很多方法来满足需求的变动，这个时候我们可以考虑使用设计模式来进行修改</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个校验对象的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyPredicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">// 传入一个对象 校验通过返回true 否则返回false</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 实现类实现具体的校验逻辑 校验年龄大于35的员工</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterEmployeeByAge</span> <span class="keyword">implements</span> <span class="title">MyPredicate</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Employee emp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> emp.getAge() &gt; <span class="number">35</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 实现类实现具体的校验逻辑 校验薪资小于5000的员工</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterEmployeeBySalary</span> <span class="keyword">implements</span> <span class="title">MyPredicate</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Employee emp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> emp.getSalary() &lt; <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 可以将之前的两个方法 统一替换成一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployee</span><span class="params">(List&lt;Employee&gt; emps, MyPredicate&lt;Employee&gt; mp)</span> </span>&#123;</span><br><span class="line">List&lt;Employee&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Employee emp : emps) &#123;</span><br><span class="line">        <span class="comment">// 当该接口校验通过 才将结果插入到集合中</span></span><br><span class="line"><span class="keyword">if</span> (mp.test(emp)) &#123;</span><br><span class="line">results.add(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 通过传入接口的不同实现类 来实现不同的逻辑校验</span></span><br><span class="line">List&lt;Employee&gt; listByAge = filterEmployee(emps, <span class="keyword">new</span> FilterEmployeeByAge());</span><br><span class="line">List&lt;Employee&gt; listBySalary = filterEmployee(emps, <span class="keyword">new</span> FilterEmployeeBySalary());</span><br></pre></td></tr></table></figure><blockquote><p>通过设计模式的改进，代码确实可扩展性比之前好了许多，但是又引发了新的问题。我们每次都要为了实现新的逻辑编写一个实现类文件，例如：FilterEmployeeBySalary和FilterEmployeeByAge，这个时候我们很自然的想到可以使用匿名内部类来解决这个问题，使我们的项目结构看起来更整洁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以直接通过匿名内部类实现对年龄的校验</span></span><br><span class="line">List&lt;Employee&gt; listByAge = filterEmployee(emps, <span class="keyword">new</span> MyPredicate&lt;Employee&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Employee emp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> emp.getAge() &gt; <span class="number">35</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>通过观察匿名内部类我们发现，真正的校验逻辑其实只有<strong>emp.getAge() &gt; 35</strong>这一句，有没有办法再次进行优化呢？那么我们终于可以引入今天的主角Lamdba啦</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过Lamdba进行优化</span></span><br><span class="line">List&lt;Employee&gt; listByAge = filterEmployee(emps, e -&gt; e.getAge() &gt; <span class="number">35</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的这个例子，我们已经感受到了Lamdba给我们带来的方便，那么下面我们就开始正式学习Lamdba的语法吧~</p></blockquote><h4 id="3、Lamdba基本语法"><a href="#3、Lamdba基本语法" class="headerlink" title="3、Lamdba基本语法"></a>3、Lamdba基本语法</h4><p>Java8中引入了一个新的操作符 **”-&gt;”**，该操作符被称为箭头操作符</p><blockquote><p>该操作符将Lamdba表达式分成了两部分</p><p>左侧：Lamdba表达式的参数列表</p><p>右侧：Lamdba表达式中需要执行的功能</p></blockquote><p>常见的语法格式有如下几种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法格式一：无参数 无返回值</span></span><br><span class="line">Runnable run = () -&gt; System.out.println(<span class="string">&quot;Hello Lamdba&quot;</span>);</span><br><span class="line">run.run();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法格式二：有一个参数 无返回值(只有一个参数 左侧小括号可以不写)</span></span><br><span class="line">Consumer&lt;String&gt; con = (s) -&gt; System.out.println(s);</span><br><span class="line">Consumer&lt;String&gt; con = s -&gt; System.out.println(s);</span><br><span class="line">con.accept(<span class="string">&quot;Hello Lamdba&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法格式三：有两个或以上参数 有返回值 且有多条语句</span></span><br><span class="line">Comparator&lt;Integer&gt; com = (x, y) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello Lamdba&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法格式四：如果只有一条语句 大括号与return可以不写</span></span><br><span class="line">Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法格式五：可推导即可省略 例如参数类型</span></span><br><span class="line">Comparator&lt;Integer&gt; com = (Integer x, Integer y) -&gt; Integer.compare(x, y);</span><br></pre></td></tr></table></figure><h4 id="4、使用的条件"><a href="#4、使用的条件" class="headerlink" title="4、使用的条件"></a>4、使用的条件</h4><p>Lamdba表达式需要函数式接口的支持</p><blockquote><p>函数式接口：接口中只有一个抽象方法的接口，称为函数式接口</p></blockquote><p>通常我们可以使用注解@FunctionalInterface来进行检验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该注解可以检验当前接口是否符合函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyPredicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、内置核心函数式接口"><a href="#5、内置核心函数式接口" class="headerlink" title="5、内置核心函数式接口"></a>5、内置核心函数式接口</h4><table><thead><tr><th>接口名</th><th>接口描述</th><th>内置方法</th></tr></thead><tbody><tr><td>Consumer<T></td><td>消费型接口</td><td>void accept(T t)</td></tr><tr><td>Supplier<T></td><td>供给型接口</td><td>T get()</td></tr><tr><td>Function&lt;T,R&gt;</td><td>函数型接口</td><td>R apply(T t)</td></tr><tr><td>Predicate<T></td><td>断言型接口</td><td>boolean test(T t)</td></tr></tbody></table><p>下面我们通过例子来演示一下</p><blockquote><p>需求：传入任意字符串进行打印</p><p>分析：符合需要传入一个参数 且无需返回值的情况</p><p>选择：Consumer接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Lamdba实现</span></span><br><span class="line">Consumer&lt;String&gt; con = s -&gt; System.out.println(s);</span><br><span class="line">    <span class="comment">// 方法引用实现</span></span><br><span class="line">    Consumer&lt;String&gt; con = System.out::println;</span><br><span class="line">con.accept(<span class="string">&quot;Hello Lamdba&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需求：获取当前的日期</p><p>分析：符合无需传入参数 且需要返回一个值</p><p>选择：Supplier接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Lamdba实现</span></span><br><span class="line">Supplier&lt;Date&gt; supplier = () -&gt; <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">// 方法引用实现</span></span><br><span class="line">    Supplier&lt;Date&gt; supplier = Date::<span class="keyword">new</span>;</span><br><span class="line">Date today = supplier.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需求：获取任意日期的字符串表格式</p><p>分析：需要传入一个Date类型 返回一个String类型</p><p>选择：Function接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Lamdba实现</span></span><br><span class="line">Function&lt;Date, String&gt; con = d -&gt; <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMM&quot;</span>).format(d);</span><br><span class="line">    <span class="comment">// 方法引用实现</span></span><br><span class="line">    Function&lt;Date, String&gt; con = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMM&quot;</span>)::format;</span><br><span class="line">String dateStr = con.apply(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需求：判断一个字符串是否包含Lamdba</p><p>分析：传入一个值 返回一个boolean</p><p>选择：Predicate接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Lamdba实现</span></span><br><span class="line">Predicate&lt;String&gt; pre = s -&gt; s.contains(<span class="string">&quot;Lamdba&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> test = pre.test(<span class="string">&quot;Hello Lamdba&quot;</span>);</span><br><span class="line">    <span class="comment">// 方法引用实现</span></span><br><span class="line">    Predicate&lt;String&gt; pre = <span class="string">&quot;Hello Lamdba&quot;</span>::contains;</span><br><span class="line">    <span class="keyword">boolean</span> test = pre.test(<span class="string">&quot;Lamdba&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、方法引用与构造器"><a href="#6、方法引用与构造器" class="headerlink" title="6、方法引用与构造器"></a>6、方法引用与构造器</h4><p>若Lamdba体中的内容有方法已经实现了，我们可以使用方法引用，也可以理解为方法引用是Lamdba的另一种表现形式</p><blockquote><p>主要有三种语法格式：</p><p>对象 : : 实例方法名</p><p>类名 : : 静态方法名</p><p>类名 : : 实例方法名</p></blockquote><p>注意：</p><ol><li>Lamdba体中调用方法的参数列表与返回值类型，要与函数式接口中的类型一致</li><li>若Lamdba参数列表中的第一参数是实例方法的调用者，而第二个参数是实例方法的参数时，可以使用ClassName :: method</li></ol><blockquote><p>具体例子可看上方两种实现方式</p></blockquote><p><strong>构造器引用</strong></p><blockquote><p>格式：ClassName : : new</p><p>注意：需要调用的构造器的参数列表要与函数式接口中抽象方法的列表保持一致</p></blockquote><table><thead><tr><th>构造参数</th><th>函数式接口参数</th></tr></thead><tbody><tr><td>空参构造</td><td>Supplier刚好符合不需要参数，返回一个值</td></tr><tr><td>一个参数构造</td><td>Function刚好符合传入一个参数，返回一个值</td></tr><tr><td>两个参数构造</td><td>BiFunction刚好符合传入两个参数，返回一个值</td></tr></tbody></table><h2 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2><h4 id="1、Stream的三个操作步骤"><a href="#1、Stream的三个操作步骤" class="headerlink" title="1、Stream的三个操作步骤"></a>1、Stream的三个操作步骤</h4><ol><li>创建Stream</li><li>中间操作</li><li>终止操作</li></ol><blockquote><p>创建Stream的四种方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1、可以通过Collection系列集合提供的stream()或paralleStream()</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、通过Arrays中的静态方法stream()获取数组流</span></span><br><span class="line">Employee[] emps = <span class="keyword">new</span> Employee[<span class="number">10</span>];</span><br><span class="line">Stream&lt;Employee&gt; stream2 = Arrays.stream(emps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、通过Stream类中的静态方法of()</span></span><br><span class="line">Stream&lt;String&gt; stream3 = Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、创建无限流</span></span><br><span class="line"><span class="comment">// 第一种：迭代Stream.iterate(seed, f);</span></span><br><span class="line">    <span class="comment">// seed是开始数字 f是一个函数式接口 传入T返回T</span></span><br><span class="line">Stream&lt;Integer&gt; stream4 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">2</span>);</span><br><span class="line">stream4.limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种：生成Stream.generate(s);</span></span><br><span class="line">    <span class="comment">// s是Supplier函数式接口 没有参数 返回T</span></span><br><span class="line">Stream.generate(() -&gt; Math.random()).limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、筛选与切片"><a href="#2、筛选与切片" class="headerlink" title="2、筛选与切片"></a>2、筛选与切片</h4><blockquote><p>filter——接收Lamdba，从流中排除某些元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 筛选出流中等于bb的元素</span></span><br><span class="line">Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>).filter(x -&gt; x.equals(<span class="string">&quot;bb&quot;</span>))</span><br><span class="line">       .forEach(System.out::println);</span><br><span class="line">============控制台信息============</span><br><span class="line">bb</span><br></pre></td></tr></table></figure><blockquote><p>limit——截断流，使其元素不超过给定数量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 筛选流中的前两个元素</span></span><br><span class="line">Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>).limit(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line">============控制台信息============</span><br><span class="line">aa</span><br><span class="line">bb</span><br></pre></td></tr></table></figure><blockquote><p>skip(n)——跳过元素，返回一个扔掉了前n个元素的流。如果流中元素不足n个，则返回一个空流，与limit(n)互补</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去掉前两个符合条件的元素</span></span><br><span class="line">Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>).skip(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line">============控制台信息============</span><br><span class="line">cc</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果元素不够 则返回空元素</span></span><br><span class="line">Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>).skip(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">============控制台信息============</span><br><span class="line">此处为空的</span><br></pre></td></tr></table></figure><blockquote><p>distinct——筛选，通过流所生成元素的hashCode和equals方法去除重复元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去除流中的重复元素</span></span><br><span class="line"><span class="comment">// 注意：如果是对象集合 那么需要重写hashCode和equals方法</span></span><br><span class="line">Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;cc&quot;</span>)</span><br><span class="line">.distinct()   </span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">============控制台信息============</span><br><span class="line">aa</span><br><span class="line">bb</span><br><span class="line">cc</span><br></pre></td></tr></table></figure><blockquote><p>下面我们综合使用以下上面学到的五种</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 筛选出没有重复的 包含b 除去第一个符合的元素后的两个元素</span></span><br><span class="line">Stream.of(<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;de&quot;</span>, <span class="string">&quot;abcde&quot;</span>)</span><br><span class="line">.distinct()</span><br><span class="line">.filter(x -&gt; x.contains(<span class="string">&quot;b&quot;</span>))</span><br><span class="line">.skip(<span class="number">1</span>)</span><br><span class="line">.limit(<span class="number">2</span>)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">============控制台信息============</span><br><span class="line">bc</span><br><span class="line">abcde</span><br></pre></td></tr></table></figure><blockquote><p>map——映射，将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</p><p>注意：使用map后返回的是Stream<T>流，T为函数的返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设现有如下集合</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;赵六&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line"><span class="comment">// 获取所有员工的名字并打印出来</span></span><br><span class="line">emps.stream().map(Employee::getName).forEach(System.out::println);</span><br><span class="line">============控制台信息============</span><br><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">王五</span><br><span class="line">赵六</span><br><span class="line">田七</span><br></pre></td></tr></table></figure><blockquote><p>flatMap——映射，接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流，简言之，flatMap中的函数返回值需要是一个流</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"><span class="comment">// 将集合变成一个流 调用flatMap 传入的参数返回值也要是一个流</span></span><br><span class="line">list.stream().flatMap(s -&gt; &#123;</span><br><span class="line">    <span class="comment">// 新建一个集合 用于保存每个字符串拆开的字符</span></span><br><span class="line">    List&lt;Character&gt; rList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 遍历每一个字符串生成的字符数组</span></span><br><span class="line">    <span class="keyword">for</span> (Character c : s.toCharArray()) &#123;</span><br><span class="line">        rList.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将结果集返回流</span></span><br><span class="line">    <span class="keyword">return</span> rList.stream();</span><br><span class="line"><span class="comment">// 将结果的字符集合打印出来</span></span><br><span class="line">&#125;).forEach(System.out::println);</span><br><span class="line">============控制台信息============</span><br><span class="line">a</span><br><span class="line">a</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">b</span><br><span class="line">b</span><br></pre></td></tr></table></figure><blockquote><p>sorted——自然排序(Comparable)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;eee&quot;</span>);</span><br><span class="line"><span class="comment">// 按照自然规则进行排序 这里需要String类实现Comparable接口</span></span><br><span class="line">list.stream().sorted().forEach(System.out::println);</span><br><span class="line">============控制台信息============</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">ddd</span><br><span class="line">eee    </span><br></pre></td></tr></table></figure><blockquote><p>sorted(Comparator com)——定制排序(Comparator)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设现有如下集合</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">777</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;李四&quot;</span>, <span class="number">33</span>, <span class="number">666</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">555</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;赵六&quot;</span>, <span class="number">55</span>, <span class="number">444</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">55</span>, <span class="number">333</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line"><span class="comment">// 先按照年龄升序排序 年龄相同再按照工资升序排序</span></span><br><span class="line">emps.stream().sorted((s1, s2) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 如果年龄相同</span></span><br><span class="line">    <span class="keyword">if</span> (s1.getAge() == s2.getAge()) &#123;</span><br><span class="line">        <span class="comment">// 比较工资差值并返回</span></span><br><span class="line">        <span class="keyword">return</span> Double.compare(s1.getSalary(), s2.getSalary());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则返回年龄差值</span></span><br><span class="line">        <span class="keyword">return</span> s1.getAge() - s2.getAge();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 打印结果集</span></span><br><span class="line">&#125;).forEach(System.out::println);</span><br><span class="line">============控制台信息============</span><br><span class="line">Employee [name=李四, age=<span class="number">33</span>, salary=<span class="number">666.0</span>]</span><br><span class="line">Employee [name=张三, age=<span class="number">33</span>, salary=<span class="number">777.0</span>]</span><br><span class="line">Employee [name=田七, age=<span class="number">55</span>, salary=<span class="number">333.0</span>]</span><br><span class="line">Employee [name=赵六, age=<span class="number">55</span>, salary=<span class="number">444.0</span>]</span><br><span class="line">Employee [name=王五, age=<span class="number">55</span>, salary=<span class="number">555.0</span>]</span><br></pre></td></tr></table></figure><blockquote><p>allMatch——检查是否匹配所有元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>);</span><br><span class="line"><span class="keyword">boolean</span> flag = list.stream().allMatch(s -&gt; s &gt; <span class="number">200</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;是否都大于200：&quot;</span> + flag);</span><br><span class="line">============控制台信息============</span><br><span class="line">是否都大于<span class="number">200</span>：<span class="keyword">false</span></span><br></pre></td></tr></table></figure><blockquote><p>anyMatch——检查是否至少匹配一个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>);</span><br><span class="line"><span class="keyword">boolean</span> flag = list.stream().anyMatch(s -&gt; s &gt; <span class="number">200</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;是否有值大于200：&quot;</span> + flag);</span><br><span class="line">============控制台信息============</span><br><span class="line">是否有值大于<span class="number">200</span>：<span class="keyword">true</span></span><br></pre></td></tr></table></figure><blockquote><p>noneMatch——检查是否没有匹配所有元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>);</span><br><span class="line"><span class="keyword">boolean</span> flag = list.stream().noneMatch(s -&gt; s &gt; <span class="number">200</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;是否没有值大于200：&quot;</span> + flag);</span><br><span class="line">============控制台信息============</span><br><span class="line">是否没有值大于<span class="number">200</span>：<span class="keyword">false</span></span><br></pre></td></tr></table></figure><blockquote><p>findFirst——返回第一个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>);</span><br><span class="line">Optional&lt;Integer&gt; first = list.stream().findFirst();</span><br><span class="line">System.out.println(<span class="string">&quot;元素中的第一个值是：&quot;</span>+first.get());</span><br><span class="line">============控制台信息============</span><br><span class="line">元素中的第一个值是：<span class="number">111</span></span><br></pre></td></tr></table></figure><blockquote><p>findAny——返回当前流中的任意元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>);</span><br><span class="line"><span class="comment">// 需要注意的是 这里如果使用stream 那么永远都会取第一个</span></span><br><span class="line"><span class="comment">// 因为stream是串行流 第一个是符合任意元素的 所以就返回了</span></span><br><span class="line"><span class="comment">// Optional&lt;Integer&gt; any = list.stream().findAny();</span></span><br><span class="line"><span class="comment">// 我们建议使用parallelStream并行流 这样结果就不会是唯一的</span></span><br><span class="line">Optional&lt;Integer&gt; any = list.parallelStream().findAny();</span><br><span class="line">System.out.println(<span class="string">&quot;元素中任意元素是：&quot;</span>+any.get());</span><br><span class="line">============控制台信息============</span><br><span class="line">元素中任意元素是：<span class="number">333</span></span><br></pre></td></tr></table></figure><blockquote><p>count——返回流中元素的总个数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>);</span><br><span class="line"><span class="keyword">long</span> count = list.stream().count();</span><br><span class="line">System.out.println(count);</span><br><span class="line">============控制台信息============</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>max——返回流中元素的最大值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">111</span>, <span class="number">222</span>, <span class="number">555</span>, <span class="number">444</span>, <span class="number">333</span>);</span><br><span class="line">Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);</span><br><span class="line">System.out.println(max.get());</span><br><span class="line">============控制台信息============</span><br><span class="line"><span class="number">555</span></span><br></pre></td></tr></table></figure><blockquote><p>min——返回流中元素的最小值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">111</span>, <span class="number">222</span>, <span class="number">555</span>, <span class="number">444</span>, <span class="number">333</span>);</span><br><span class="line">Optional&lt;Integer&gt; min = list.stream().min(Integer::compareTo);</span><br><span class="line">System.out.println(min.get());</span><br><span class="line">============控制台信息============</span><br><span class="line"><span class="number">111</span></span><br></pre></td></tr></table></figure><blockquote><p>reduce(T identity，BinaryOperator) / reduce(BinaryOperator)——可以将流中的元素反复结合起来，得到一个值</p><p>注意：如果第一个参数未指定起始值 那么返回值类型就为Optional 否则返回元素类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// reduce第一个参数代表一个初始值 即第一个x的值为0 然后从集合中取出第一个值作为y的值</span></span><br><span class="line"><span class="comment">// 之后将算出的数字作为新一轮的x的值 将集合中下一个元素的值作为y的值</span></span><br><span class="line">Integer sum = list.stream().reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">============控制台信息============</span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure><blockquote><p>collect——将流转换为其他形式，接收一个Collector接口的实现，用于给Stream中元素做汇总方法</p></blockquote><p>收集数据到List：<code>Collectors.toList()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;赵六&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line"><span class="comment">// 将所有员工的姓名收集到一个List集合中</span></span><br><span class="line"><span class="comment">// Collectors可以快速的创建一个收集器(Collector)实例</span></span><br><span class="line">List&lt;String&gt; names = emps.stream().map(Employee::getName).collect(Collectors.toList());</span><br><span class="line">System.out.println(names);</span><br><span class="line">============控制台信息============</span><br><span class="line">[张三, 李四, 王五, 赵六, 田七]</span><br></pre></td></tr></table></figure><p>收集数据到Set：<code>Collectors.toSet()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line"><span class="comment">// 将所有员工的姓名收集到一个Set集合中</span></span><br><span class="line">Set&lt;String&gt; names = emps.stream().map(Employee::getName).collect(Collectors.toSet());</span><br><span class="line">System.out.println(names);</span><br><span class="line">============控制台信息============</span><br><span class="line">[张三, 王五, 田七]</span><br></pre></td></tr></table></figure><p>收集到HashSet等特殊集合中：<code>Collectors.toCollection(HashSet::new)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line"><span class="comment">// 将所有员工的姓名收集到一个HashSet集合中</span></span><br><span class="line">HashSet&lt;String&gt; names = emps.stream().map(Employee::getName).collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line">System.out.println(names);</span><br><span class="line">============控制台信息============</span><br><span class="line">[张三, 王五, 田七]</span><br></pre></td></tr></table></figure><p>收集总数：<code>Collectors.counting()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line">Long count = emps.stream().collect(Collectors.counting());</span><br><span class="line">System.out.println(count);</span><br><span class="line">============控制台信息============</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>计算工资的平均值：<code>Collectors.averagingDouble()</code>、<code>Collectors.averagingInt()</code>、<code>Collectors.averagingLong()</code>，示例中用<code>Double</code>进行演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line"><span class="comment">// 计算除所有员工工资的平均值</span></span><br><span class="line">Double avg = emps.stream().collect(Collectors.averagingDouble(Employee::getSalary));</span><br><span class="line">System.out.println(avg);</span><br><span class="line">============控制台信息============</span><br><span class="line"><span class="number">5555.55</span></span><br></pre></td></tr></table></figure><p>计算工资的总和：<code>Collectors.summingDouble()</code>、<code>Collectors.summingInt()</code>、<code>Collectors.summingLong()</code>，示例中用<code>Double</code>进行演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line"><span class="comment">// 计算除所有员工工资的总和</span></span><br><span class="line">Double sum = emps.stream().collect(Collectors.summingDouble(Employee::getSalary));</span><br><span class="line">System.out.println(sum);</span><br><span class="line">============控制台信息============</span><br><span class="line"><span class="number">27777.75</span></span><br></pre></td></tr></table></figure><p>获取工资最大/最小的员工信息：<code>Collectors.maxBy()</code>/<code>Collectors.minBy()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line"><span class="comment">// 获取工资最大/最小的员工信息</span></span><br><span class="line"><span class="comment">// 因可能存在空值 所以返回值是Optional</span></span><br><span class="line">Optional&lt;Employee&gt; max = emps.stream().collect(Collectors.maxBy((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line">Optional&lt;Employee&gt; min = emps.stream().collect(Collectors.minBy((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line">System.out.println(max.get());</span><br><span class="line">System.out.println(min.get());</span><br><span class="line">============控制台信息============</span><br><span class="line">Employee [name=田七, age=<span class="number">77</span>, salary=<span class="number">7777.77</span>]</span><br><span class="line">Employee [name=张三, age=<span class="number">33</span>, salary=<span class="number">3333.33</span>]</span><br></pre></td></tr></table></figure><p>根据名字进行分组：<code>Collectors.groupingBy()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line"><span class="comment">// 根据员工名字进行分组 返回map中key是名字 value是满足该key的员工集合</span></span><br><span class="line">Map&lt;String, List&lt;Employee&gt;&gt; group = emps.stream().collect(Collectors.groupingBy(Employee::getName));</span><br><span class="line">System.out.println(group);</span><br><span class="line">============控制台信息============</span><br><span class="line">&#123;张三=[Employee [name=张三, age=<span class="number">33</span>, salary=<span class="number">3333.33</span>], Employee [name=张三, age=<span class="number">44</span>, salary=<span class="number">4444.44</span>]], 王五=[Employee [name=王五, age=<span class="number">55</span>, salary=<span class="number">5555.55</span>], Employee [name=王五, age=<span class="number">66</span>, salary=<span class="number">6666.66</span>]], 田七=[Employee [name=田七, age=<span class="number">77</span>, salary=<span class="number">7777.77</span>]]&#125;</span><br></pre></td></tr></table></figure><p>根据条件进行分区：<code>Collectors.partitioningBy()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line"><span class="comment">// 将所有工资大于7000分为true组 其余分为false组</span></span><br><span class="line"><span class="comment">// 参数为断言型接口</span></span><br><span class="line">Map&lt;Boolean, List&lt;Employee&gt;&gt; map = emps.stream().collect(Collectors.partitioningBy(e-&gt;e.getSalary()&gt;<span class="number">7000</span>));</span><br><span class="line">System.out.println(map);</span><br><span class="line">============控制台信息============</span><br><span class="line">&#123;<span class="keyword">false</span>=[Employee [name=张三, age=<span class="number">33</span>, salary=<span class="number">3333.33</span>], Employee [name=张三, age=<span class="number">44</span>, salary=<span class="number">4444.44</span>], Employee [name=王五, age=<span class="number">55</span>, salary=<span class="number">5555.55</span>], Employee [name=王五, age=<span class="number">66</span>, salary=<span class="number">6666.66</span>]], <span class="keyword">true</span>=[Employee [name=田七, age=<span class="number">77</span>, salary=<span class="number">7777.77</span>]]&#125;</span><br></pre></td></tr></table></figure><p>按照指定分隔符拼接字符串：<code>Collectors.joining()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line"><span class="comment">// 将所有员工的名字拼接到一起</span></span><br><span class="line">String s1 = emps.stream().map(Employee::getName).collect(Collectors.joining());</span><br><span class="line"><span class="comment">// 将所有员工的名字拼接到一起 并且用逗号进行分隔</span></span><br><span class="line">String s2 = emps.stream().map(Employee::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"><span class="comment">// 将所有员工的名字拼接到一起 用逗号分隔 并且添加开始跟结束的字符</span></span><br><span class="line">String s3 = emps.stream().map(Employee::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;开始[&quot;</span>, <span class="string">&quot;]结束 &quot;</span>));</span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br><span class="line">System.out.println(s3);</span><br><span class="line">============控制台信息============</span><br><span class="line">张三张三王五王五田七</span><br><span class="line">张三,张三,王五,王五,田七</span><br><span class="line">开始[张三,张三,王五,王五,田七]结束</span><br></pre></td></tr></table></figure><h4 id="3、Stream练习题"><a href="#3、Stream练习题" class="headerlink" title="3、Stream练习题"></a>3、Stream练习题</h4><blockquote><p>1、给定一个数字列表，如何返回一个由每个数的平方构成的列表呢？</p><p>例如：给定【1，2，3，4，5】，应该返回【1，4，9，16，25】</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; nums = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">List&lt;Integer&gt; collect = nums.stream().map(e -&gt; e * e).collect(Collectors.toList());</span><br><span class="line">System.out.println(collect);</span><br><span class="line">============控制台信息============</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br></pre></td></tr></table></figure><blockquote><p>2、怎样用map和reduce方法数一数流中由多少个Employee呢？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">33</span>, <span class="number">3333.33</span>);</span><br><span class="line">Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>, <span class="number">4444.44</span>);</span><br><span class="line">Employee emp3 = <span class="keyword">new</span> Employee(<span class="string">&quot;王五&quot;</span>, <span class="number">55</span>, <span class="number">5555.55</span>);</span><br><span class="line">Employee emp4 = <span class="keyword">new</span> Employee(<span class="string">&quot;赵六&quot;</span>, <span class="number">66</span>, <span class="number">6666.66</span>);</span><br><span class="line">Employee emp5 = <span class="keyword">new</span> Employee(<span class="string">&quot;田七&quot;</span>, <span class="number">77</span>, <span class="number">7777.77</span>);</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(emp1, emp2, emp3, emp4, emp5);</span><br><span class="line">Integer sum = emps.stream().map(e -&gt; <span class="number">1</span>).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">============控制台信息============</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="并行流与顺序流"><a href="#并行流与顺序流" class="headerlink" title="并行流与顺序流"></a>并行流与顺序流</h3><h4 id="什么是ForkJoin"><a href="#什么是ForkJoin" class="headerlink" title="什么是ForkJoin"></a>什么是ForkJoin</h4><blockquote><p>Fork/Join框架：就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务(拆到不可再拆时)，再将一个个的小任务运算的结果进行join汇总</p></blockquote><h4 id="Fork-Join与传统线程池的区别"><a href="#Fork-Join与传统线程池的区别" class="headerlink" title="Fork/Join与传统线程池的区别"></a>Fork/Join与传统线程池的区别</h4><blockquote><p>采用<code>工作窃取</code>模式(work-stealing)：</p><p>当执行新的任务时，它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中</p><p>相对于一般的线程池实现，fork/join框架的优势体现在对其中包含的任务的处理方式上，在一般的线程池中，如果一个线程正在执行的任务由于某些原因无法继续运行，那么该线程会处于等待状态，而在fork/join框架实现中，如果某个子问题由于等待另外一个子问题的完成而无法继续运行，那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行，这种方式减少了线程的等待时间，提高了性能</p></blockquote><p>计算0~10000000000L的总和</p><p>传统方式使用<code>Fork/Join</code>计算，需要编写一个类继承<code>RecursiveTask&lt;T&gt;</code>或<code>RecursiveAction</code>，两种的区别是前者有返回值，后者无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinCalculate</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">964117657719938939L</span>;</span><br><span class="line"><span class="comment">// 定义开始数字</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> start;</span><br><span class="line"><span class="comment">// 定义结束数字</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> end;</span><br><span class="line"><span class="comment">// 定义拆分最小临界值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> THRESHOLD = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ForkJoinCalculate</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.start = start;</span><br><span class="line"><span class="keyword">this</span>.end = end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 计算当前差值是否达到拆分最小临界值</span></span><br><span class="line"><span class="keyword">long</span> length = end - start;</span><br><span class="line"><span class="comment">// 如果超过10000 就进行拆分</span></span><br><span class="line"><span class="keyword">if</span> (length &gt; THRESHOLD) &#123;</span><br><span class="line"><span class="comment">// 计算开始和结束的中间值</span></span><br><span class="line"><span class="keyword">long</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 构建一个小于中间值的实例</span></span><br><span class="line">ForkJoinCalculate left = <span class="keyword">new</span> ForkJoinCalculate(start, middle);</span><br><span class="line"><span class="comment">// 执行临界值左侧任务拆分</span></span><br><span class="line">left.fork();</span><br><span class="line"><span class="comment">// 构建一个大于中间值的实例</span></span><br><span class="line">ForkJoinCalculate right = <span class="keyword">new</span> ForkJoinCalculate(middle + <span class="number">1</span>, end);</span><br><span class="line"><span class="comment">// 执行临界值右侧任务拆分</span></span><br><span class="line">right.fork();</span><br><span class="line"><span class="comment">// 将左右两侧的值进行合并</span></span><br><span class="line"><span class="keyword">return</span> left.join() + right.join();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 定义一个计数器计算总和</span></span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 计算开始到结束的数字累加</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回累加值</span></span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后我们编写测试类进行调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义开始时间</span></span><br><span class="line">Instant start = Instant.now();</span><br><span class="line"><span class="comment">// 创建池</span></span><br><span class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line"><span class="comment">// 创建任务</span></span><br><span class="line">ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> ForkJoinCalculate(<span class="number">0</span>, <span class="number">10000000000L</span>);</span><br><span class="line"><span class="comment">// 执行任务</span></span><br><span class="line">Long sum = pool.invoke(task);</span><br><span class="line"><span class="comment">// 定义结束时间</span></span><br><span class="line">Instant end = Instant.now();</span><br><span class="line">System.out.println(<span class="string">&quot;sum:&quot;</span> + sum);</span><br><span class="line">System.out.println(<span class="string">&quot;耗费时间：&quot;</span> + Duration.between(start, end).toMillis());</span><br><span class="line">============控制台信息============</span><br><span class="line">sum:-<span class="number">5345475101129947011</span></span><br><span class="line">耗费时间：<span class="number">2054</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，ForkJoin拆分任务也是需要耗费时间的，所以一般只建议在大数据量下使用该方式进行调用，且具体的执行速度也受限于具体的拆分逻辑代码</p><p>同时我们也不难发现，这种方式编写起来较为复杂，使用起来不是太方便</p></blockquote><p>那么JAVA8中我们如何简化ForkJoin的调用呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Instant start = Instant.now();</span><br><span class="line"><span class="comment">// 创建一个并行流使用parallel()</span></span><br><span class="line"><span class="comment">// 创建一个顺序流使用sequential()</span></span><br><span class="line"><span class="keyword">long</span> sum = LongStream.range(<span class="number">0</span>, <span class="number">10000000000L</span>).parallel().reduce(<span class="number">0</span>, Long::sum);</span><br><span class="line">Instant end = Instant.now();</span><br><span class="line">System.out.println(<span class="string">&quot;sum:&quot;</span> + sum);</span><br><span class="line">System.out.println(<span class="string">&quot;耗费时间：&quot;</span> + Duration.between(start, end).toMillis());</span><br><span class="line">============控制台信息============</span><br><span class="line">sum:-<span class="number">5340232226128654848</span></span><br><span class="line">耗费时间：<span class="number">1343</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy Birthday</title>
      <link href="/2019/11/14/2019111400/"/>
      <url>/2019/11/14/2019111400/</url>
      
        <content type="html"><![CDATA[<h4 id="送给大家一首逃跑计划的歌曲-虽然歌名有点忧桑-但是心里还是蛮开心呦"><a href="#送给大家一首逃跑计划的歌曲-虽然歌名有点忧桑-但是心里还是蛮开心呦" class="headerlink" title="送给大家一首逃跑计划的歌曲 虽然歌名有点忧桑 但是心里还是蛮开心呦"></a>送给大家一首逃跑计划的歌曲 虽然歌名有点忧桑 但是心里还是蛮开心呦</h4><h4 id="因为今年还蛮多人记住我的生日的-😊"><a href="#因为今年还蛮多人记住我的生日的-😊" class="headerlink" title="因为今年还蛮多人记住我的生日的~😊"></a>因为今年还蛮多人记住我的生日的~😊</h4>    <div id="aplayer-NujvuWrL" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="004RUsxs2Ff5AA" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86"    ></div>]]></content>
      
      
      <categories>
          
          <category> 日常事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活琐事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>360极速浏览器DIY教程</title>
      <link href="/2019/11/14/2019111401/"/>
      <url>/2019/11/14/2019111401/</url>
      
        <content type="html"><![CDATA[<p>因为本人喜欢拖更 所以这里简单介绍下怎么修改<br>动手能力强的小伙伴可以自己尝试<br>动手一时爽 一直动手一直爽<br>下面以当前最新版的360极速浏览器为</p><p>1、官网下载最新版本<a href="http://down.360safe.com/cse/360cse_11.0.1393.0.exe">极速浏览器</a> ，按照图示解压两次即可得到一个Chrome-bin文件夹，极速浏览器操作到这一步，就算是一个能用的绿色版了，它的User Date是在当前目录下的，至于为什么可以这样，是不是所有浏览器都能这样操作，这里不做讨论<br><img src="/img/post/2019111401/001.png" alt="img"></p><p>2、手动删减目录内的文件，具体到每一个文件是做什么用的，为什么可以删掉，这里也不做讨论，图示为我的列表，仅供参考，这部分可以看自己喜好进行保留或删减，做完这一步就算是得到了一个“绿色精简版”<br><img src="/img/post/2019111401/002.png" alt="img"></p><p>3、接下来就要对chrome.dll进行操作了，这里我们需要准备<a href="https://www.lanzous.com/i37dbsh">WinHex</a> ,有其他类似工具也可以，这里以WinHex为例，使用WinHex打开chrome.dll,具体操作如图所示，需要注意的是，尽量保证修改的起始位置跟原有的相同，从哪删除的就从哪开始，不要错位了，否则可能会导致无法实现修改效果，且每操作一步后，都要CTRL + S保存一下，下面不在啰嗦<br><img src="/img/post/2019111401/003.png" alt="img"></p><p>4、我们按照顺序，先修改同级目录生成safemon文件夹，首先CTRL + F打开搜索框，输入关键字safemon，并选择unicode格式，点击确定开始查找，具体如图所示<br><img src="/img/post/2019111401/004.png" alt="img"></p><p>5、确定后我们共查找到了12条记录，依次查看，大概是倒数第四条，我们能看到想要找的东西User Date/safemon,而我们要删除的就是这一部分，具体如图所示<br><img src="/img/post/2019111401/005.png" alt="img"></p><p>6、选中这一部分内容，为了凑整，我就正好圈了5整行，每一行有16个，也就是80，选中后右键，编辑，移除，是，确定，就删掉了这一部分，图一为选中部分，图二为移除，图三为移除后<br><img src="/img/post/2019111401/006.png" alt="img"><br><img src="/img/post/2019111401/007.png" alt="img"><br><img src="/img/post/2019111401/008.png" alt="img"></p><p>7、因为chrome.dll的大小是不能改变的，所以我们需要在刚删除的位置，填充相同数量的0字节，刚刚我们删掉了80个字节，这里就输入80，填充后按CTRL + S进行保存，图一为填充0字节，图二为填充后<br><img src="/img/post/2019111401/009.png" alt="img"><br><img src="/img/post/2019111401/010.png" alt="img"></p><p>8、接下来的操作都与上面相同，所以只会标记出位置，不再过多陈述</p><p>9、接下来禁止生成components文件夹，至于为什么要去除这个，因为之前这个目录下会自动下载两种版本的flash，但是我们平时只会用到ppflash或npflash中的一种，没必要浪费那部分空间，所以才有的这部分修改，我们搜索com.cab.tmp，可以找到一条记录，详情如图所示<br><img src="/img/post/2019111401/011.png" alt="img"></p><p>10、其实第9步操作完应该就不会出现这个目录了，但是我们为了谨慎起见，继续搜索othercom，删除内部相关目录，注意这里要换成ASCII格式，这里删除的较多，实际删除npflash和ppflash应该就可以<br><img src="/img/post/2019111401/012.png" alt="img"></p><p>11、接着我们修改F1为打开新标签页这一步，WinHex不需要关闭，首先我们打开浏览器，按F1并复制下部分弹出的网址(bbs.360.cn/forum.php?mod=viewthread&amp;tid=14294828)，继续搜索，应该也能找到一行,然后将它移除掉(查看完地址后记得关掉浏览器在修改，否则会报错)，添加chrome://newtab/，剩余的继续补0，具体步骤如图所示<br><img src="/img/post/2019111401/013.png" alt="img"></p><p>12、然后我们修改右键划词搜索为百度，首先依旧打开浏览器，划词搜索一下，去除网址链接最后部分&amp;src=360chrome_zoned，搜索这部分内容，将其替换为<a href="https://www.baidu.com/s?wd=%25s%EF%BC%8C%E5%85%B7%E4%BD%93%E5%A6%82%E5%9B%BE">https://www.baidu.com/s?wd=%s，具体如图</a><br><img src="/img/post/2019111401/014.png" alt="img"></p><p>13、接下来可以去除debug.log文件，同理搜索debug.log，可以找到两条记录，删除其中相关内容即可，这个没什么可说的，就不截图演示了</p><p>14、去除开发者模式运行的扩展程序，可以参考<a href="https://www.cnblogs.com/liuxianan/p/disable-chrome-extension-warning.html">网上教程</a>，感谢这位博主</p><p>15、到这里WinHex的使命就结束了，可以关掉它了</p><p>16、接下来可以对一些细节进行调整，首先是11.0.1393.0版本号目录下的newtab和errorpage，这两个文件可以替换成修改的[<a href="https://www.lanzous.com/i37et6j">空白可看完整皮肤壁纸的newtab</a>] 或 [<a href="https://pan.lanzou.com/i0ieoyf">原版风格去新闻的newtab</a>] 或 [<a href="https://www.lanzous.com/i37et5i">精简的errorpage</a>] </p><p>17、接下来我们要精简掉不需要的菜单项，找到11.0.1393.0\skin\iframe.srx，使用7-zip右键打开这个文件，可以修改[address\switcher_panel.xml去掉地址栏切换模式中的选择内核] 或 [menu\app_menu.xml精简菜单选项]，具体内容可自行查看我修改的地方，比较长这里就不贴了</p><p>18、到这里所有修改的工作都完成了，我们修改一下目录名字，从打开浏览器，把需要的选项都设置好，然后清除一下历史操作记录，关掉浏览器，进入User Date目录下，只保留Default目录与First Run文件，然后Default目录下，保留Preferences与Web Data，需要注意的是，如果你内置了扩展，还需要保留Extensions目录，新版内核只需要这三个即可，旧版额外还需要一个Local Storage目录，这里我们是新版的极速浏览器，只保留三个</p><p>19、接下来用记事本打开Preferences文件，搜索我们浏览器根目录的名字，默认为Chrome-bin，如果你有修改，就搜索你修改的名字，然后可以找到如下内容，将包含你个人信息的内容去掉，注意双引号不要去掉，以此类推，直到找不到为止，将所有内容都删掉后保存，这时候就可以打压缩包，到此教程结束。<br><img src="/img/post/2019111401/015.png" alt="img"></p><p>顺带提一句，新版本的极速浏览器删除过一次后就不会在出现了，但是旧版本的极速浏览器每一次打开都会重新记录，所以很多人在自己电脑能用的，打成压缩包给别人电脑的时候，就会出现你保存的配置丢掉的情况，按照这个方法即可解决该问题</p><p>其实早就想做这件事了，但是这本来就是件出力不讨好的事情，而且写出来后，死的也更快一点，鬼知道这种改法能撑多久呢？但是考虑到本身还是有一定意义的，而且我确实比较懒得更新了，之前也有很多朋友或多或少问过，所以索性今天就把这点不值一提的雕虫小技写了一下，希望能对你们有所帮助吧</p><p>写教程不易，转载请注明出处，谢谢</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程复习</title>
      <link href="/2019/09/25/2019092501/"/>
      <url>/2019/09/25/2019092501/</url>
      
        <content type="html"><![CDATA[<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><blockquote><p>volatile关键字：当多个线程进行操作共享数据时，可以保证内存中的数据可见</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ThreadDemo td = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line"><span class="keyword">new</span> Thread(td).start();</span><br><span class="line">        <span class="comment">// 因为while(true)执行的效率非常高</span></span><br><span class="line">        <span class="comment">// 所以没有机会再次获取到修改后的值</span></span><br><span class="line">        <span class="comment">// 导致一直循环卡在这里 始终是false</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (td.isFlag()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.flag = flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);<span class="comment">// 休眠来保证效果</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;flag=&quot;</span> + flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">==========控制台信息==========</span><br><span class="line">flag=<span class="keyword">true</span></span><br><span class="line">此处控制台没有停止运行</span><br></pre></td></tr></table></figure><blockquote><p>如果给flag添加了volatile后</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">==========控制台信息==========</span><br><span class="line">-------------------</span><br><span class="line">flag=<span class="keyword">true</span></span><br><span class="line">此处控制台已经停止运行</span><br></pre></td></tr></table></figure><blockquote><p>相较于synchronized是一种较为轻量级的同步策略</p><p>注意：1、volatile不具备”互斥性” 2、volatile不能保证变量的”原子性”</p></blockquote><h2 id="原子变量与CAS算法"><a href="#原子变量与CAS算法" class="headerlink" title="原子变量与CAS算法"></a>原子变量与CAS算法</h2><blockquote><p>原子变量：JDK1.5后java.util.concurrent.atomic包下提供了常用的原子变量</p><p>1、volatile保证了内存的可见性</p><p>2、CAS(Compare-And-Swap)</p><p>CAS算法是硬件对于并发操作共享数据的支持</p><p>CAS包含了三个操作数：</p><p>内存值 V (即主内存中目前的值)</p><p>预估值 A (即进行修改操作前再次读取内存中的值)</p><p>更新值 B (即进行了一系列操作后确认要修改的值)</p><p>当且仅当 V==A 时，才会将B赋值给V，否则将不做任何操作</p></blockquote><p>简单点说，就是每次开始的时候，会从主内存中读取当前的值，然后在修改前会从主内存中再次读取，如果第一次和第二次读取的值不同，则不做任何操作，相同则可以进行修改</p><blockquote><p>所以我们不难看出，当多线程并发对主内存中的数据进行修改的时候，有且仅有一个线程可以执行成功，其他的线程都会执行失败</p></blockquote><p>那么CAS算法与synchronized相比，真的效率高吗？</p><blockquote><p>答案是肯定的，因为synchronized如果没有获取到锁，会进行阻塞状态，等待下一次cpu给到执行权才可以再次进行尝试，而CAS算法如果修改失败，并不会放弃当前cpu的执行权，会立即再去尝试是否可以更新，所以CAS算法要比普通的同步锁执行效率高很多。当然了如果失败了的情况的逻辑，是需要我们自己来进行编写的，这也是CAS的缺点之一。</p></blockquote><p>下面我们对原来的代码，使用原子变量进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来的写法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> serialNumber = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 现在的写法</span></span><br><span class="line"><span class="keyword">private</span> AtomicInteger serialNumber = <span class="keyword">new</span> AtomicInteger();</span><br></pre></td></tr></table></figure><p>下面附上完整的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> AtomicInteger xx = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">System.out.println(xx.getAndIncrement());</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>xx.getAndIncrement()：获取并自增，等同于xx++</p><p>xx.getAndDecrement()：获取并自减，等同于xx–</p><p>xx.incrementAndGet()：先自增再获取，等同于++xx</p><p>xx.decrementAndGet()：先自减再获取，等同于–xx</p></blockquote><h2 id="ConcurrentHashMap锁分段机制"><a href="#ConcurrentHashMap锁分段机制" class="headerlink" title="ConcurrentHashMap锁分段机制"></a>ConcurrentHashMap锁分段机制</h2><blockquote><p>HashMap与Hashtable的区别？前者线程不安全，后者线程安全</p><p>因为Hashtable是将整个表都进行锁定，所以效率是很低的</p><p>但是ConcurrentHashMap是针对每一个方法都加了锁，这种分段锁的提高了效率，但是再JDK1.8的时候，锁分段的机制也会淘汰了，底层都采用了CAS的无锁机制进行判断。</p><p>ConcurrentHashMap的效果与Collections.synchronizedMap(new HashMap…)基本相同</p><p>都是给每一个方法单独添加锁的操作</p></blockquote><h2 id="CountDownLatch闭锁"><a href="#CountDownLatch闭锁" class="headerlink" title="CountDownLatch闭锁"></a>CountDownLatch闭锁</h2><p>CountDownLatch一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</p><p>闭锁可以延迟线程的进度直到其到达终止状态，闭锁可以用来确保某些活动直到其他活动都完成才能继续执行。</p><blockquote><p>简单点说，闭锁就是再完成某些运算时，只有其他所有线程的运算全部完成，当前运算才继续执行</p></blockquote><p>下面用代码进行举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：开启5个线程同时执行打印50000个数，计算5个线程总计需要的时间</span></span><br><span class="line"><span class="comment">// 难点：如何控制指定的5个线程执行完成后才进行计算end时间</span></span><br><span class="line"><span class="comment">// 解决：使用CountDownLatch，只有当设定的值减到0的时候，也就是其他线程都全部完成，才开始计算结束时间</span></span><br><span class="line"><span class="comment">// 注意：所以我们开启的线程数，每次执行完无论如何都要对初始值减1，并且保证初始值与线程数相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">// 设定初始值是5 当减到0的时候 才执行其他操作</span></span><br><span class="line">CountDownLatch count = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">5</span>; x++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">50000</span>; y++) &#123;</span><br><span class="line">System.out.println(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 无论如何都要对初始值减1</span></span><br><span class="line">count.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行等待 当所有的线程都执行结束后 恢复全部任务并行执行</span></span><br><span class="line">count.await();</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;共耗时:&quot;</span> + (end - start));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现Callable接口创建线程"><a href="#实现Callable接口创建线程" class="headerlink" title="实现Callable接口创建线程"></a>实现Callable接口创建线程</h2><p>首先我们来复习一下常见的两种创建线程的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 第一种方式：实现Runnable接口方式</span></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">&quot;Runnable方式：&quot;</span> + Thread.currentThread().getName())).start();</span><br><span class="line">    <span class="comment">// 第二种方式：继承Thread类方式(本质还是实现Runnable接口方式)</span></span><br><span class="line"><span class="keyword">new</span> MyThread().start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyThread继承Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Thread方式：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为Thread类实现了Runnable接口，所以上述两种方式本质上相同</p><p>但是Java中是单继承多实现，所以建议使用实现Runnable接口方式</p><p>而且Runnable接口是一个函数式接口，可以使用Lamdba，实现起来很方便</p></blockquote><p>下面我们使用实现Callable接口方式创建线程</p><blockquote><p>Callable接口方式与以上两种方式不同的是</p><p>可以接收到一个返回值</p><p>接收返回值需要使用Future的实现类来接收</p><p>所以我们需要使用FutureTask来进行接收</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Callable接口需要用FutureTask来接受返回值</span></span><br><span class="line"><span class="comment">// 计算x累加10次的结果</span></span><br><span class="line">FutureTask future = <span class="keyword">new</span> FutureTask(() -&gt; &#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(x++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开启线程的方式与之前实现Runnable接口相似</span></span><br><span class="line"><span class="comment">// 传入Thread中即可</span></span><br><span class="line"><span class="keyword">new</span> Thread(future).start();</span><br><span class="line"><span class="comment">// 通过使用FutureTask中的get方法来进行获取返回值</span></span><br><span class="line"><span class="comment">// 需要注意的是 这里会有异常 需要进行捕获或抛出</span></span><br><span class="line">System.out.println(future.get());</span><br><span class="line">==========控制台信息==========</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>这里我们将代码进行修改，我们发现只有当开启的线程执行完毕</p><p>才会继续执行后面的代码 所以我们得出结论 FutureTask也可用于闭锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FutureTask future = <span class="keyword">new</span> FutureTask(() -&gt; &#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">System.out.println(x++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Thread(future).start();</span><br><span class="line">System.out.println(<span class="string">&quot;总计：&quot;</span>+future.get());</span><br><span class="line">System.out.println(<span class="string">&quot;我是最后执行的&quot;</span>);</span><br><span class="line">==========控制台信息==========</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">总计：<span class="number">5</span></span><br><span class="line">我是最后执行的</span><br></pre></td></tr></table></figure><h2 id="同步锁Lock"><a href="#同步锁Lock" class="headerlink" title="同步锁Lock"></a>同步锁Lock</h2><p>下面用一个售票案例演示Lock的应用</p><blockquote><p>Lock是JDK1.5之后才出现的</p><p>需要注意的是：这是一个显示锁，需要通过lock()方法上锁，且必须通过unlock()方法释放锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="comment">// 创建三个线程</span></span><br><span class="line"><span class="keyword">new</span> Thread(t, <span class="string">&quot;一号窗口&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(t, <span class="string">&quot;二号窗口&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(t, <span class="string">&quot;三号窗口&quot;</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设定总票数100</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// 设定同步锁</span></span><br><span class="line"><span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当票数大于0的时候 循环售票</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 上锁</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 当ticket大于0的时候 将票数减1 打印售票窗口</span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + --ticket);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 否则跳出循环 结束售票</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 避免死锁 所以释放锁一定要放到finally中</span></span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么Lock与synchronized的区别是什么呢？</p><p>两者区别：</p><p>1、首先synchronized是java内置关键字，在jvm层面，Lock是个java类</p><p>2、synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁</p><p>3、synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁</p><p>4、用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了</p><p>5、synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）</p><p>6、Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Lock的几个常用方法： </span><br><span class="line"></span><br><span class="line">lock.lock();<span class="comment">// 加锁</span></span><br><span class="line">lock.ublock();<span class="comment">// 释放锁</span></span><br><span class="line">lock.tryLock();<span class="comment">// 尝试获取 获取不到会一直等待 获取到返回true 否则返回false</span></span><br><span class="line">lock.tryLock(<span class="number">3000</span>, TimeUnit.MILLISECONDS);<span class="comment">// 尝试获取锁 3秒获取不到自动失败</span></span><br></pre></td></tr></table></figure><h2 id="虚假唤醒"><a href="#虚假唤醒" class="headerlink" title="虚假唤醒"></a>虚假唤醒</h2><p>下面通过生产者消费者案例说明虚假唤醒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerAndProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Saler saler = <span class="keyword">new</span> Saler();</span><br><span class="line">Consumer con = <span class="keyword">new</span> Consumer(saler);</span><br><span class="line">Producer pro = <span class="keyword">new</span> Producer(saler);</span><br><span class="line"><span class="keyword">new</span> Thread(con, <span class="string">&quot;消费者A&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(con, <span class="string">&quot;消费者B&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(pro, <span class="string">&quot;生产者A&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(pro, <span class="string">&quot;生产者B&quot;</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 商家</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span> </span>&#123;</span><br><span class="line"><span class="comment">// 商品初始化数量是0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> product = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进货</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 当货物存在10个 就不再进货了</span></span><br><span class="line">        <span class="comment">// 此处如果使用if(product &gt;= 10) 则会出现数据错误问题</span></span><br><span class="line">        <span class="comment">// 因为如果使用if 那么唤醒会直接进行商品++的问题</span></span><br><span class="line">        <span class="comment">// 使用while可以重新进行循环判断在进行商品数量上的修改</span></span><br><span class="line">        <span class="comment">// 这个叫做虚假唤醒</span></span><br><span class="line"><span class="keyword">while</span> (product &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;货物已满&quot;</span>);</span><br><span class="line"><span class="comment">// 线程进入等待状态</span></span><br><span class="line">wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 唤醒所有等待线程</span></span><br><span class="line">notifyAll();</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + (++product));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卖货</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 当货物等于0个时 停止卖货</span></span><br><span class="line"><span class="keyword">while</span> (product &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;当前缺货&quot;</span>);</span><br><span class="line"><span class="comment">// 线程进入等待状态</span></span><br><span class="line">wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 唤醒所有等待线程</span></span><br><span class="line">notifyAll();</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + (product--));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Saler saler;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Saler saler)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.saler = saler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 循环20次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">20</span>; x++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>));</span><br><span class="line">saler.get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Saler saler;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Saler saler)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.saler = saler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 消费20次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">20</span>; x++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>));</span><br><span class="line">saler.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>条件锁推荐用户把wait()放进循环里而不是放到if()里</p></blockquote><h2 id="Condition线程通信"><a href="#Condition线程通信" class="headerlink" title="Condition线程通信"></a>Condition线程通信</h2><p>为什么要用Condition线程通信？</p><blockquote><p>Condition可以进行通信</p><p>传统情况下我们如果使用wait()后对线程进行唤醒，直接用notifyAll唤醒所有的线程，但是很多情况下我们可能只是想唤醒读或写的线程，传统方式没办法实现精确唤醒。</p><p>Condition实例是绑定到一个锁上。要为特定的Lock锁获得Condition实例，可以使用newCondition()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先需要一个Lock锁</span></span><br><span class="line"><span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">// 然后通过newCondition()创建对应的Condition实例</span></span><br><span class="line"><span class="keyword">private</span> Condition read = lock.newCondition();</span><br><span class="line"><span class="keyword">private</span> Condition write = lock.newCondition();</span><br></pre></td></tr></table></figure><blockquote><p>在Condition中，用await()替换wait()，用signal()替换notify()，用signalAll()替换notifyAll()，传统线程的通信方式，Condition都可以实现，这里注意，Condition是被绑定到Lock上的，要创建一个Lock的Condition必须用newCondition()方法</p></blockquote><h2 id="线程按序交替打印"><a href="#线程按序交替打印" class="headerlink" title="线程按序交替打印"></a>线程按序交替打印</h2><p>上面我们学了Condition通信，下面我们通过一个案例来加深Condition的使用</p><blockquote><p>编写一个程序，开启三个线程，这三个线程的ID分别为A、B、C，每个线程将自己的ID在屏幕上打印10遍，要求输出的结果必须按顺序显示</p><p>如：ABCABCABC……依次递归</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoCal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ConditionDemo demo = <span class="keyword">new</span> ConditionDemo();</span><br><span class="line"><span class="keyword">new</span> Thread(demo::printA, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(demo::printB, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(demo::printC, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="keyword">private</span> Condition printA = lock.newCondition();</span><br><span class="line"><span class="keyword">private</span> Condition printB = lock.newCondition();</span><br><span class="line"><span class="keyword">private</span> Condition printC = lock.newCondition();</span><br><span class="line"><span class="comment">// 用于记录当前轮到哪个线程打印的标记</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">print(printA, printB, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">print(printB, printC, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">print(printC, printA, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Condition c1, Condition c2, <span class="keyword">int</span> nowFlag, <span class="keyword">int</span> nextFlag)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="comment">// 如果当前传入的标记与能打印的标记不同</span></span><br><span class="line"><span class="keyword">if</span> (flag != nowFlag) &#123;</span><br><span class="line"><span class="comment">// 将线程等待</span></span><br><span class="line">c1.await();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 否则进行打印操作</span></span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line"><span class="comment">// 打印完成后修改标记 并唤醒下一个线程</span></span><br><span class="line">flag = nextFlag;</span><br><span class="line">c2.signal();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ReadWriteLock读写锁"><a href="#ReadWriteLock读写锁" class="headerlink" title="ReadWriteLock读写锁"></a>ReadWriteLock读写锁</h2><p>写写/读写 需要互斥</p><p>读读 不需要互斥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">lock.readLock().lock();</span><br><span class="line">lock.readLock().unlock();</span><br><span class="line">lock.writeLock().lock();</span><br><span class="line">lock.writeLock().unlock();</span><br></pre></td></tr></table></figure><h2 id="线程八锁"><a href="#线程八锁" class="headerlink" title="线程八锁"></a>线程八锁</h2><p>1、非静态方法的锁默认为this，静态方法的锁为对应的Class实例</p><p>2、某一时间内，只能有一个线程持有锁，无论几个方法</p><p>3、锁不同，那么就不会产生阻塞</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>什么是线程池？</p><p>提供了一个线程队列，队列中保存着所有等待状态的线程，避免了创建与销毁额外开销，提高了响应的速度</p><p>线程池的体系结构</p><p>java.util.concurrent.Executor：负责线程的使用与调度的根接口</p><p>ExecutorService：子接口，线程池的主要接口</p><p>ThreadPoolExecutor：线程池的实现类</p><p>ScheduledExecutorService：子接口，负责线程的调度</p><p>ScheduledThreadPoolExecutor：继承ThreadPoolExecutor，实现ScheduledExecutorService</p><blockquote><p>工具类：Executors</p><p>ExecutorService newFixedThreadPool()：创建固定大小的线程池</p><p>ExecutorService newCacheThreadPool()：缓存线程池，线程池数量不固定，可以根据需求自动更改数量</p><p>ExecutorService newSingleThreadExecutor()：创建单个线程池，线程池中只有一个线程</p><p>ScheduledExecutorService newScheduledThreadPool()：创建固定大小的线程，可以延迟或定时的执行任务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建线程池</span></span><br><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 为线程池中的线程分配任务</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">pool.submit(() -&gt; &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= <span class="number">50</span>; x++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭线程池 会等待所有任务执行完成后关闭</span></span><br><span class="line">pool.shutdown();</span><br><span class="line">        <span class="comment">// 立即关闭</span></span><br><span class="line">        pool.shutdownNow();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以获取到当前CPU的核数</span></span><br><span class="line">Runtime.getRuntime().availableProcessors();</span><br></pre></td></tr></table></figure><blockquote><p>下面用代码演示一下延迟调度的用法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建线程池</span></span><br><span class="line">ScheduledExecutorService pool = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 为线程池中的线程分配任务</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">ScheduledFuture&lt;Integer&gt; future = pool.schedule(() -&gt; &#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + num);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">System.out.println(future.get());</span><br><span class="line">&#125;</span><br><span class="line">pool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">==========控制台信息==========</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">83</span></span><br><span class="line"><span class="number">83</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">34</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">54</span></span><br><span class="line"><span class="number">54</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">17</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>:<span class="number">71</span></span><br><span class="line"><span class="number">71</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">93</span></span><br><span class="line"><span class="number">93</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span>:<span class="number">50</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">97</span></span><br><span class="line"><span class="number">97</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">5</span>:<span class="number">65</span></span><br><span class="line"><span class="number">65</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>:<span class="number">87</span></span><br><span class="line"><span class="number">87</span></span><br></pre></td></tr></table></figure><h2 id="ForkJoinPool分支合并框架"><a href="#ForkJoinPool分支合并框架" class="headerlink" title="ForkJoinPool分支合并框架"></a>ForkJoinPool分支合并框架</h2><h4 id="使用的背景："><a href="#使用的背景：" class="headerlink" title="使用的背景："></a>使用的背景：</h4><p>在必要的情况下，将一个大任务，进行拆分（fork）成若干个小任务（拆到给出的临界值为止），再将一个个的小任务运算的结果进行join汇总</p><h4 id="与线程池的区别："><a href="#与线程池的区别：" class="headerlink" title="与线程池的区别："></a>与线程池的区别：</h4><p>1、采用工作窃取模式：当多线程同时执行任务时，某个线程下的所有任务均执行完毕，那么他会随机从一个没有执行完毕的线程末尾窃取一个任务放到自己的队列中进行执行</p><p>2、相对于一般的线程池的实现，fork/join框架的优点在于任务的处理方式上。传统线程池中，如果一个线程正在执行的任务由于阻塞或某些原因无法继续执行，那么该线程就会处于等待状态，而在fork/join中，如果某个子问题由于等待另一个子问题的完成而无法继续执行，那么其他处于空闲状态的线程会将该子问题窃取过来进行执行，减少了线程的等待时间，提高了性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinTask;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolFork</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> ForkJoinSumCalculate(<span class="number">0L</span>, <span class="number">500000000L</span>);</span><br><span class="line">Long num = pool.invoke(task);</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// RecursiveTask有返回值 RecursiveAction无返回值</span></span><br><span class="line"><span class="comment">// class ForkJoinSumCalculate extends RecursiveAction</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkJoinSumCalculate</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8915621361296775736L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> start;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> end;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> THURSHOLD = <span class="number">250000000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ForkJoinSumCalculate</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.start = start;</span><br><span class="line"><span class="keyword">this</span>.end = end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 取出当前的大小</span></span><br><span class="line"><span class="keyword">long</span> size = end - start;</span><br><span class="line"><span class="comment">// 如果大小小于等于临界值</span></span><br><span class="line"><span class="keyword">if</span> (size &lt;= THURSHOLD) &#123;</span><br><span class="line"><span class="comment">// 计算总和进行返回</span></span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 计算中间值进行拆分</span></span><br><span class="line"><span class="keyword">long</span> middle = (end + start) / <span class="number">2</span>;</span><br><span class="line">ForkJoinSumCalculate left = <span class="keyword">new</span> ForkJoinSumCalculate(start, middle);</span><br><span class="line">ForkJoinSumCalculate right = <span class="keyword">new</span> ForkJoinSumCalculate(middle + <span class="number">1</span>, end);</span><br><span class="line"><span class="comment">// 进行拆分 压入线程队列</span></span><br><span class="line">left.fork();</span><br><span class="line">right.fork();</span><br><span class="line"><span class="comment">// 返回分支总和</span></span><br><span class="line"><span class="keyword">return</span> left.join() + right.join();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub搭建免费个人博客</title>
      <link href="/2019/04/12/2019041201/"/>
      <url>/2019/04/12/2019041201/</url>
      
        <content type="html"><![CDATA[<h4 id="1、注册Github账号"><a href="#1、注册Github账号" class="headerlink" title="1、注册Github账号"></a>1、注册Github账号</h4><p>打开github的官网:<a href="https://github.com/">https://github.com</a><br>点击右上角【SignUp】按钮开始注册<br>已有github账号可以直接跳过这一步<br>英语不好的朋友，可以在浏览器右键，选择【翻译成简体中文】</p><p><img src="/img/post/2019041201/001.png" alt="01"></p><h3 id="2、创建仓库"><a href="#2、创建仓库" class="headerlink" title="2、创建仓库"></a>2、创建仓库</h3><p>点击github右上角的加号，选择New repository,或者点击左侧Create a repository进行创建<br>Repository name需要与你的用户名相同<br>例如我的用户名:homraL<br>那么这里我要写:homraL.github.io</p><p><img src="/img/post/2019041201/002.png" alt="02"></p><p><img src="/img/post/2019041201/003.png" alt="03"></p><h4 id="3、开启GitHub-Pages"><a href="#3、开启GitHub-Pages" class="headerlink" title="3、开启GitHub Pages"></a>3、开启GitHub Pages</h4><p>在打开的仓库页面，点击右上方的Settings按钮，在新打开的页面，向下找到GitHub Pages的部分<br>可以通过Choose a theme更改主题<br>可以通过上方绿色框内的地址进行访问<br>例如我的地址就是: <a href="https://homral.github.io/">https://homral.github.io</a><br>如果有域名可以填入Custom domain<br>后面会单独讲如何与域名进行绑定，此处不做过多讨论<br><img src="/img/post/2019041201/004.png" alt="04"><br><img src="/img/post/2019041201/005.png" alt="05"></p><p>下图为选择主题页面<br><img src="/img/post/2019041201/006.png" alt="06"></p><p>下图为访问我的博客页面: <a href="https://homral.github.io/">https://homral.github.io</a><br><img src="/img/post/2019041201/007.png" alt="07"></p><h4 id="4、搭建Hexo准备工作"><a href="#4、搭建Hexo准备工作" class="headerlink" title="4、搭建Hexo准备工作"></a>4、搭建Hexo准备工作</h4><p>搭建Hexo需要我们准备如下软件<br>Node.js: <a href="https://nodejs.org/en/download">https://nodejs.org/en/download</a><br>Git: <a href="https://git-scm.com/download">https://git-scm.com/download</a><br>GitHub: <a href="https://desktop.github.com/">https://desktop.github.com</a><br><img src="/img/post/2019041201/008.png" alt="08"><br><img src="/img/post/2019041201/009.png" alt="09"><br><img src="/img/post/2019041201/010.png" alt="00"></p><p>现在我们从官网下载到上述三款软件<br>首先配置node.js<br><img src="/img/post/2019041201/011.png" alt="10"></p><p>将node-v10.15.3-win-x64.zip解压到要安装的位置 并新建两个目录<br>node-global:npm  全局安装位置<br>node-cache:npm   缓存路径<br><img src="/img/post/2019041201/012.png" alt="11"></p><p>接下来配置node相关的环境变量<br>在Path中添加如下两条<br>E:\Learn\Java\Software\Node<br>E:\Learn\Java\Software\Node\node-global<br>第一条是你的Node解压后的根路径 方便我们在任意目录下使用node命令<br>第二条是我们刚新建的全局安装位置<br><img src="/img/post/2019041201/013.png" alt="12"></p><p>接下来可以通过命令行<br>输入下方两条命令进行检验是否配置成功<br>node -v<br>npm -v<br>如下显示即代表成功了<br><img src="/img/post/2019041201/014.png" alt="13"></p><p>接下来将node-global和node-cache与npm配置到一起<br>分别运行如下两条命令 路径需要替换为你自己的路径<br>npm config set prefix “E:\Learn\Java\Software\Node\node-global”<br>npm config set cache “E:\Learn\Java\Software\Node\node-cache”<br>执行成功后 在运行如下两条命令<br>npm install webpack -g<br>npm install -g npm<br>见到如下说明成功了<br>需要注意的是 这里的WARN不需要在意 因为部分功能是给MAC系统使用的<br>忽略即可 只要不是ERROR就可以啦<br>到这里Node.js的准备告一段落<br><img src="/img/post/2019041201/015.png" alt="14"></p><p>接下来安装一下Git<br>这里我们也是根据系统的位数与需要的版本进行安装<br>同时也会提供ZIP免安装版与EXE安装版<br>与Node不同 Git我选择了安装版<br>较免安装版配置上个人觉得更方便一点<br>安装过程全程一直保持默认下一步即可<br>安装成功后 我们在任意文件夹内空白处点击鼠标右键<br>如出现下面菜单 就说明安装成功了<br><img src="/img/post/2019041201/016.png" alt="15"></p><p>接下来双击GitHubDesktopSetup.exe<br>不需要你选择任何东西 甚至你都不知道安装到哪里去了<br>然后它就安装完毕并自动打开了<br>登录你的github账号<br>将对应你用户名的仓库克隆到本地的一个目录<br><img src="/img/post/2019041201/017.png" alt="16"></p><p>等待一下 在对应的目录下我们就能看到啦<br>到这里Hexo的准备工作已经完成<br>下次我们可以点击桌面上紫色的图标GitHub Desktop来启动它<br><img src="/img/post/2019041201/018.png" alt="17"></p><h4 id="5、搭建Hexo开始"><a href="#5、搭建Hexo开始" class="headerlink" title="5、搭建Hexo开始"></a>5、搭建Hexo开始</h4><p>我们可以先创建一个Hexo文件夹(名字随意 下文中myblog同样）<br>进入到文件夹后 右键选择Git Bash Here<br>依次输入下方四条命令<br>npm install -g hexo-cli<br>hexo init myblog<br>cd myblog<br>npm install<br><img src="/img/post/2019041201/019.png" alt="19"></p><p>生成静态文件：hexo g<br>启动服务器：hexo s<br>注意：这里会有一个弹框 记得允许访问<br>上述两条命令后 我们就可以访问啦<br><img src="/img/post/2019041201/020.png" alt="20"></p><p>默认情况下 访问网址为：<a href="http://localhost:4000/">http://localhost:4000</a><br><img src="/img/post/2019041201/021.png" alt="21"></p><h4 id="6、如何创建一篇新文章"><a href="#6、如何创建一篇新文章" class="headerlink" title="6、如何创建一篇新文章"></a>6、如何创建一篇新文章</h4><p>首先我们使用CTRL + C可以关掉服务<br>新建文章：hexo new “文章名”<br>之后会在Hexo\myblog\source_posts下创建一个md文件<br>我们可以复制该文件 修改标题或者文件名<br>然后重新使用<br>hexo g<br>hexo s<br>刷新<a href="http://localhost:4000就能看到了">http://localhost:4000就能看到了</a></p><h4 id="7、更换Hexo的主题"><a href="#7、更换Hexo的主题" class="headerlink" title="7、更换Hexo的主题"></a>7、更换Hexo的主题</h4><p>打开Hexo官方主题页：<a href="https://hexo.io/themes">https://hexo.io/themes</a><br>挑选自己喜欢的主题<br>这里楼主选择的是MiccallTheme<br><img src="/img/post/2019041201/022.png" alt="22"></p><p>首先进入theme文件夹下 右键选择Git Bash Here<br>或者通过cd命令进入该文件夹<br>然后将打开的主题github路径复制下来 请自行替换下方路径<br>git clone <a href="https://github.com/miccall/hexo-theme-Mic_Theme">https://github.com/miccall/hexo-theme-Mic_Theme</a><br>之后我们就可以在themes下看到下载好的主题文件<br>可以将名字改的短一点 方便使用<br><img src="/img/post/2019041201/023.png" alt="23"></p><p>然后打开Hexo的配置文件<br>翻到最后找到theme属性<br>将默认主题修改为你刚刚下载的文件夹名称<br>这里我改成了Miccall<br><img src="/img/post/2019041201/024.png" alt="24"><br><img src="/img/post/2019041201/025.png" alt="25"></p><p>之后保存再次执行<br>hexo g<br>hexo s<br>就可以看到新的主题了<br>没有效果的可以先清理下在启动<br>hexo clean<br><img src="/img/post/2019041201/026.png" alt="26"></p><h4 id="8、生成SSH密钥添加到GitHub"><a href="#8、生成SSH密钥添加到GitHub" class="headerlink" title="8、生成SSH密钥添加到GitHub"></a>8、生成SSH密钥添加到GitHub</h4><p>只有配置好SSH密钥后 我们才可以通过git操作实现本地代码库与Github代码库同步<br>在myblog文件夹下输入命令<br>yourname输入你的GitHub用户名<br>youremail输入你GitHub的邮箱<br>之后一直回车即可<br>可在用户名文件夹下生成key<br>C:\Users\用户名.ssh</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">config --global user.name &quot;yourname&quot;</span></span><br><span class="line"><span class="attr">git</span> <span class="string">config --global user.email &quot;youremail&quot;</span></span><br><span class="line"><span class="meta">ssh-keygen</span> <span class="string">-t rsa -C &quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/2019041201/027.png" alt="27"></p><p>id_rsa是你这台电脑的私人秘钥 不能给别人看的<br>id_rsa.pub是公共秘钥 可以随便给别人看<br>我们要把公钥放在GitHub上 这样当你链接GitHub自己的账户时<br>它就会根据公钥匹配你的私钥 当能够相互匹配时<br>才能够顺利的通过git上传你的文件到GitHub上<br>我们打开github官网<br>找到右上角头像下的settings<br>选择SSH and GPG keys<br>点击New SSH key创建新的SSHkey<br><img src="/img/post/2019041201/028.png" alt="28"></p><p>在新弹出的页面中<br>随便输如一个title名字<br>将id_rsa.pub文件中的内容全选复制到下方框内<br>点击add ssh key<br>之后会让你输入一次github的密码进行确认<br><img src="/img/post/2019041201/029.png" alt="29"></p><p>之后打开Hexo的配置文件<br>拉到最下面 将内容修改为如下<br>homraL替换成你自己的github名字</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">type</span>: <span class="string">git</span></span><br><span class="line">  <span class="attr">repository</span>: <span class="string">git@github.com:homraL/homraL.github.io.git</span></span><br><span class="line">  <span class="attr">branch</span>: <span class="string">master</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/2019041201/030.png" alt="30"></p><p>仓库地址可以在你的github仓库主页找到<br>点击Clone or download<br>因为我们选用的是SSH方式 所以选择use SSH<br>然后复制下方地址到repository后面即可<br>注意：每一个属性后面的空格不可删掉<br><img src="/img/post/2019041201/031.png" alt="31"></p><p>在git中输入命令安装deploy-git<br>这样我们才能用命令部署到GitHub<br>npm install hexo-deployer-git –save<br>接下来我们重新部署一下即可<br>hexo clean 清除了你之前生成的东西 也可以不加<br>hexo generate 生成静态文章 可以用hexo g缩写<br>hexo deploy 部署文章 可以用hexo d缩写</p><p>注意：deploy时可能要你输入username和password<br>这个时候 我们再次访问<a href="https://homral.github.io/">https://homral.github.io</a><br>就可以看到更换成hexo了<br><img src="/img/post/2019041201/032.png" alt="32"></p><h4 id="9、绑定个人域名-非必须内容"><a href="#9、绑定个人域名-非必须内容" class="headerlink" title="9、绑定个人域名(非必须内容)"></a>9、绑定个人域名(非必须内容)</h4><p>现在我们已经可以通过homral.github.io访问了<br>但是看起来不够”厉害”<br>所以我们可以买一个自己的域名绑定到上面<br>楼主是在阿里云买的域名 <a href="https://wanwang.aliyun.com/">https://wanwang.aliyun.com</a><br><img src="/img/post/2019041201/033.png" alt="33"></p><p>好了 到这一步假装我们有了一个域名<br>就假装是楼主的那个吧<br>homra.cn<br>然后我们打开 <a href="https://dc.console.aliyun.com/next/#/domain/list/all-domain">https://dc.console.aliyun.com/next/#/domain/list/all-domain</a><br>找到域名右侧的解析按钮<br><img src="/img/post/2019041201/034.png" alt="34"></p><p>点击添加纪录 按照楼主的记录创建两条记录<br><img src="/img/post/2019041201/035.png" alt="35"></p><p>然后我们打开github 找到最开始说的Custom domain<br>将申请好的域名填写到这里<br><img src="/img/post/2019041201/036.png" alt="36"></p><p>然后打开博客的source目录<br>创建一个无后缀名的CNAME文件<br>里面输入你的域名<br><img src="/img/post/2019041201/037.png" alt="37"></p><p>最后在你懂得<br>hexo clean<br>hexo g<br>hexo d</p><p>很久很久之后<br>如果不能访问不要着急<br>因为需要解析的<br>几分钟到几小时不等<br>最终你发现你的域名终于可以访问了<br>如果更换了新电脑 该怎么继续写博客呢？<br>只需要备份Hexo下的这些文件即可<br>_config.yml<br>package.json<br>scaffolds目录<br>source目录<br>themes目录<br>之后覆盖到新电脑中的相同位置<br>最后执行上方三条命令重新生成发布即可</p><p>本文写于2019年4月11日 上海<br>转载请注明出处</p><p>参考链接 感谢<br><a href="https://www.cnblogs.com/jackyroc/p/7681938.html">https://www.cnblogs.com/jackyroc/p/7681938.html</a><br><a href="https://www.cnblogs.com/lxg0/p/9472851.html">https://www.cnblogs.com/lxg0/p/9472851.html</a><br><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乱七八糟</title>
      <link href="/1970/01/01/1970010100/"/>
      <url>/1970/01/01/1970010100/</url>
      
        <content type="html"><![CDATA[<h3 id="乱七八糟"><a href="#乱七八糟" class="headerlink" title="乱七八糟"></a>乱七八糟</h3><blockquote><p>本文档用于记录一些单独写一个文档不够，但是又蛮有意思的一些东西</p></blockquote><h4 id="动态赋值-RequestMapping"><a href="#动态赋值-RequestMapping" class="headerlink" title="动态赋值@RequestMapping"></a>动态赋值@RequestMapping</h4><blockquote><p>比如我们现在有如下需求：</p><p>同一套代码有两套配置文件，分别对应项目A和B，需要同一个接口</p><p>访问A的时候请求是<code>/testA</code>，访问B的时候请求是<code>/testB</code></p><p>那么这样我们就可以使用<code>#&#123;&#125;</code>来实现这个需求</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 项目类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Project</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 项目名字</span></span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line">    <span class="comment">// 该项目的其他信息 这里需要new 否则会是null</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInfo info = <span class="keyword">new</span> ProjectInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目信息类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectInfo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里先默认写死到这里 可自行改成配置文件读取赋值</span></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">&quot;/testA&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同样的方法也可以用于Value注解获取</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;project.info.url&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String urlStr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller中请求可以这么写</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;#&#123;project.info.url&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseBean <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseBean.success(<span class="string">&quot;读取成功:&quot;</span>+urlStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：需要<code>Project</code>在容器内，如果多级对象调用，需要有默认无参构造且不为<code>null</code></p></blockquote><h4 id="pom-xml中scope的解释"><a href="#pom-xml中scope的解释" class="headerlink" title="pom.xml中scope的解释"></a><code>pom.xml</code>中<code>scope</code>的解释</h4><blockquote><p>通过<code>maven</code>引入的<code>jar</code>包，里面的类，都是已经编译好的字节码，跟<code>runtime</code>或者<code>provided</code>没关系</p><p>简单来说，<code>compile</code>、<code>runtime</code>和<code>provided</code>的区别，需要在执行<code>mvn package</code>命令，且打包格式是<code>war</code>之类（而不是默认的<code>jar</code>）的时候才能看出来</p><p>通过<code>compile</code>和<code>provided</code>引入的<code>jar</code>包，里面的类，你在项目中可以直接<code>import</code>进来用，编译没问题，但是<code>runtime</code>引入的<code>jar</code>包中的类，项目代码里不能直接用，用了无法通过编译，只能通过反射之类的方式来用</p><p>通过<code>compile</code>和<code>runtime</code>引入的<code>jar</code>包，会出现在你的项目<code>war</code>包里，而<code>provided</code>引入的<code>jar</code>包则不会</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题</title>
      <link href="/1970/01/01/1970010101/"/>
      <url>/1970/01/01/1970010101/</url>
      
        <content type="html"><![CDATA[<h3 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、两数之和</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote><p>给定一个整数数组<code>nums</code>和一个整数目标值<code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标</p><p>你可以假设每种输入只会对应一个答案。但是数组中同一个元素不能使用两遍</p><p>你可以按任意顺序返回答案</p></blockquote><h4 id="题目示例："><a href="#题目示例：" class="headerlink" title="题目示例："></a>题目示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">解释：因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] == <span class="number">9</span> ，返回 [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">3</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><blockquote><p>这道题最优的做法时间复杂度是<code>O(n)</code></p><p>创建一个<code>map</code>，其中<code>kv</code>分别存放<code>当前数</code>与<code>索引位置</code>，然后遍历数组，如果目标值去掉当前数在<code>map</code>中，则直接返回当前索引以及找到的<code>map</code>索引，否则将<code>当前数</code>和<code>索引位置</code>初始化到<code>map</code>中方便下次查找</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span> &#125;;</span><br><span class="line">System.out.println(Arrays.toString(twoSum(arr, <span class="number">9</span>)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] arr, Integer target) &#123;</span><br><span class="line"><span class="comment">// 创建 k为当前数 v为索引位置的map</span></span><br><span class="line">Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">// 如果map中存在 目标值-当前数 直接返回当前索引和找到的map索引</span></span><br><span class="line"><span class="keyword">if</span> (map.containsKey(target - arr[i])) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, map.get(target - arr[i]) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果不存在 则将当前索引放入map中</span></span><br><span class="line">map.put(arr[i], i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 什么都没找到 返回空数组</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、两数相加"><a href="#2、两数相加" class="headerlink" title="2、两数相加"></a>2、两数相加</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote><p>给你两个<code>非空</code>的链表，表示两个非负的整数。它们每位数字都是按照<code>逆序</code>的方式存储的，并且每个节点只能存储<code>一位数字</code></p><p>请你将两个数相加，并以相同形式返回一个表示和的链表</p><p>你可以假设除了数字<code>0</code>之外，这两个数都不会以<code>0</code>开头</p></blockquote><h4 id="题目示例：-1"><a href="#题目示例：-1" class="headerlink" title="题目示例："></a>题目示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>], l2 = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">7</span>,<span class="number">0</span>,<span class="number">8</span>]</span><br><span class="line">解释：<span class="number">342</span> + <span class="number">465</span> = <span class="number">807</span></span><br><span class="line"></span><br><span class="line">输入：l1 = [<span class="number">0</span>], l2 = [<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">输入：l1 = [<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>], l2 = [<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>]</span><br><span class="line">输出：[<span class="number">8</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul><h4 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h4><blockquote><p>难点主要在要使用它提供的链表类上，如果用集合做会快得多</p><p>可以将所有数字取出相加在将每个数字反过来计算</p><p>我使用的是直接循环计算出每一位</p><p>循环链表并获取当前的数字，相加后获取个位以及十位数字，并将十位数字当作进位放入到下一个节点的计算总和中，然后移动链表位置到下一个</p><p>直到两个链表均为空，且无进位数字则结束循环，返回结果集</p><p>因要在循环中移动链表位置，需要使用变量next来进行移动，所以初始节点位置为根节点root的next值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">2</span>, <span class="keyword">new</span> ListNode(<span class="number">4</span>, <span class="keyword">new</span> ListNode(<span class="number">3</span>)));</span><br><span class="line">ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">5</span>, <span class="keyword">new</span> ListNode(<span class="number">6</span>, <span class="keyword">new</span> ListNode(<span class="number">4</span>)));</span><br><span class="line">ListNode addTwoNumbers = addTwoNumbers(l1, l2);</span><br><span class="line">System.out.println(addTwoNumbers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建初始链表 用于存放返回值</span></span><br><span class="line">ListNode root = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 将初始链表赋值给当前移动到的要处理的链表</span></span><br><span class="line">ListNode cursor = root;</span><br><span class="line"><span class="comment">// 定义是否有需要进位的十位数</span></span><br><span class="line"><span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 只有当两个链表都为空 且无需进位的时候 结束循环返回结果</span></span><br><span class="line"><span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span> || carry != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 获取第一个链表当前val数据 如果没有则为0</span></span><br><span class="line"><span class="keyword">int</span> l1Val = l1 != <span class="keyword">null</span> ? l1.val : <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 获取第二个链表当前val数据 如果没有则为0</span></span><br><span class="line"><span class="keyword">int</span> l2Val = l2 != <span class="keyword">null</span> ? l2.val : <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 将当前的两个数字相加以及进位数字进行相加 获取当前结果集总和</span></span><br><span class="line"><span class="keyword">int</span> sumVal = l1Val + l2Val + carry;</span><br><span class="line"><span class="comment">// 取出当前结果的十位数 如果只有一位则十位为0</span></span><br><span class="line">carry = sumVal / <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 取出当前结果的个位数 当作本节点的最终结果数字</span></span><br><span class="line">ListNode sumNode = <span class="keyword">new</span> ListNode(sumVal % <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 因需要根据循环来改变链表值 所以为了保证每次都改的都是不同的链表</span></span><br><span class="line"><span class="comment">// 所以这里使用.next方法 并同时移动当前处理链表</span></span><br><span class="line">cursor.next = sumNode;</span><br><span class="line"><span class="comment">// 将封装的新链表当作下次循环要处理的链表</span></span><br><span class="line">cursor = sumNode;</span><br><span class="line"><span class="comment">// 非空判断第一个链表 并移动位置到下一个</span></span><br><span class="line">l1 = l1 != <span class="keyword">null</span> ? l1.next : l1;</span><br><span class="line"><span class="comment">// 非空判断第二个链表 并移动位置到下一个</span></span><br><span class="line">l2 = l2 != <span class="keyword">null</span> ? l2.next : l2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为当时使用的是next方法 所以根链表不是root而是root.next</span></span><br><span class="line"><span class="keyword">return</span> root.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LeetCode提供的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">ListNode next;</span><br><span class="line"></span><br><span class="line">ListNode() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line"><span class="keyword">this</span>.val = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line"><span class="keyword">this</span>.val = val;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、无重复字符的最长子串"><a href="#3、无重复字符的最长子串" class="headerlink" title="3、无重复字符的最长子串"></a>3、无重复字符的最长子串</h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote><p>给定一个字符串，请你找出其中不含有重复字符的<code>最长子串</code>的长度</p></blockquote><h4 id="题目示例：-2"><a href="#题目示例：-2" class="headerlink" title="题目示例："></a>题目示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入: s = <span class="string">&quot;abcabcbb&quot;</span></span><br><span class="line">输出: <span class="number">3</span> </span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">&quot;abc&quot;</span>，所以其长度为 <span class="number">3</span></span><br><span class="line"></span><br><span class="line">输入: s = <span class="string">&quot;bbbbb&quot;</span></span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">&quot;b&quot;</span>，所以其长度为 <span class="number">1</span></span><br><span class="line"></span><br><span class="line">输入: s = <span class="string">&quot;pwwkew&quot;</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">&quot;wke&quot;</span>，所以其长度为 <span class="number">3</span></span><br><span class="line">     请注意，你的答案必须是 子串 的长度，<span class="string">&quot;pwke&quot;</span> 是一个子序列，不是子串</span><br><span class="line"></span><br><span class="line">输入: s = <span class="string">&quot;&quot;</span></span><br><span class="line">输出: <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><h4 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h4><blockquote><p>使用<code>滑动窗口</code>原理来进行实现，定义开始和结束标志</p><p>遍历字符串中每一个字符，不管是否出现重复数据，结束标志一直随着循环累加</p><p>当没有出现重复的时候，开始标志不动</p><p>当出现重复的时候，使用max函数锁住左边界，即取靠右侧的一个，也可以理解成开始标志只能前进不能后退</p><p>每次循环都计算出本次最长的值存入结果集中，并覆盖当前字母所在位置，也是防止开始标志回滚到已经读过的数据</p><p>遍历结束，返回最终长度</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Integer length = lengthOfLongestSubstring(<span class="string">&quot;abba&quot;</span>);</span><br><span class="line">System.out.println(length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义结果集</span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 定义map用于存放对应字符以及当前字符在字符串中的位置</span></span><br><span class="line">Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 遍历字符串</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> end = <span class="number">0</span>, start = <span class="number">0</span>; end &lt; s.length(); end++) &#123;</span><br><span class="line"><span class="comment">// 获取当前字符</span></span><br><span class="line"><span class="keyword">char</span> alpha = s.charAt(end);</span><br><span class="line"><span class="comment">// 如果map中已存在该值 说明存在重复字符</span></span><br><span class="line"><span class="keyword">if</span> (map.containsKey(alpha)) &#123;</span><br><span class="line"><span class="comment">// 更新开始位置为相对靠右的那个</span></span><br><span class="line"><span class="comment">// 例如：abba 第二个b位置为2但开始值为0 第二个a位置为1但开始值为2</span></span><br><span class="line">start = Math.max(map.get(alpha), start);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每次循环都比较当前最长值与本次循环值哪个长 并更新</span></span><br><span class="line">ans = Math.max(ans, end - start + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 每次循环都更新map中对应位置 存在覆盖 不存在新增</span></span><br><span class="line">map.put(s.charAt(end), end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回结果集</span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
